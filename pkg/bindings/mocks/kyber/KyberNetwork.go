// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package kyber

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// KyberNetworkABI is the input ABI used to generate the binding from.
const KyberNetworkABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"trader\",\"type\":\"address\"},{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"destAddress\",\"type\":\"address\"},{\"name\":\"maxDestAmount\",\"type\":\"uint256\"},{\"name\":\"minConversionRate\",\"type\":\"uint256\"},{\"name\":\"walletId\",\"type\":\"address\"},{\"name\":\"hint\",\"type\":\"bytes\"}],\"name\":\"tradeWithHint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"name\":\"usePermissionless\",\"type\":\"bool\"}],\"name\":\"searchBestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"infoFields\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeBurner\",\"type\":\"address\"}],\"name\":\"setFeeBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"}],\"name\":\"findBestRateOnlyPermission\",\"outputs\":[{\"name\":\"obsolete\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reservesPerTokenSrc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whiteList\",\"type\":\"address\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"negligibleRateDiff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeBurnerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expectedRate\",\"type\":\"address\"}],\"name\":\"setExpectedRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expectedRateContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"field\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetworkProxyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAlerters\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"getExpectedRate\",\"outputs\":[{\"name\":\"expectedRate\",\"type\":\"uint256\"},{\"name\":\"slippageRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserves\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"getExpectedRateOnlyPermission\",\"outputs\":[{\"name\":\"expectedRate\",\"type\":\"uint256\"},{\"name\":\"slippageRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERM_HINT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserCapInTokenWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reservesPerTokenDest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"},{\"name\":\"isPermissionless\",\"type\":\"bool\"}],\"name\":\"addReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPriceValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"field\",\"type\":\"bytes32\"}],\"name\":\"info\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"}],\"name\":\"findBestRate\",\"outputs\":[{\"name\":\"obsolete\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxGasPrice\",\"type\":\"uint256\"},{\"name\":\"_negligibleRateDiff\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERM_HINT_GET_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"networkProxy\",\"type\":\"address\"}],\"name\":\"setKyberProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumReserves\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"ethToToken\",\"type\":\"bool\"},{\"name\":\"tokenToEth\",\"type\":\"bool\"},{\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"listPairForReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherReceival\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"add\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"isPermissionless\",\"type\":\"bool\"}],\"name\":\"AddReserveToNetwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"RemoveReserveFromNetwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"ListReservePairs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentContract\",\"type\":\"address\"}],\"name\":\"WhiteListContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentContract\",\"type\":\"address\"}],\"name\":\"ExpectedRateContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentContract\",\"type\":\"address\"}],\"name\":\"FeeBurnerContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxGasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"negligibleRateDiff\",\"type\":\"uint256\"}],\"name\":\"KyberNetwrokParamsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"KyberNetworkSetEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"KyberProxySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dstAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethWeiValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reserve1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reserve2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hint\",\"type\":\"bytes\"}],\"name\":\"KyberTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"}]"

// KyberNetworkBin is the compiled bytecode used for deploying new contracts.
var KyberNetworkBin = "0x60606040526001600755600a600855640ba43b7400600f556010805460ff19169055341561002c57600080fd5b60405160208061387f8339810160405280805160008054600160a060020a03191633600160a060020a039081169190911790915590925082161515905061007257600080fd5b60008054600160a060020a03909216600160a060020a03199092169190911790556137dd806100a26000396000f30060606040526004361061024d5763ffffffff60e060020a60003504166301a12fd381146102be578063088322ef146102df5780630902f1ac1461036f5780630c235d96146103d55780631610b59b146104245780631a79464e1461043a5780631dc1f78d14610459578063238dafe014610499578063249715b3146104c057806326782247146104e257806327a099d8146105115780632ab8fc2d1461052457806339e899ee146105465780633ccdbb28146105655780633de39c111461058e578063408ee7fe146105a15780634cef5a5c146105c0578063579425b7146105d35780635d270cdc146105e65780635dada964146106055780635ed5ea28146106185780635f65d7031461062b5780636432679f146106445780636aa633b614610663578063749f95bf1461067657806375829def146106b95780637726bed3146106d857806377f50f97146106f0578063785250da146107035780637acc8678146107165780637c423f5414610735578063809a9e55146107485780638334278d1461077057806385dc0c56146107865780638b98a2c5146107ae5780638eaaeecf14610838578063937e909b1461085d5780639870d7fe1461087f578063a0d7bb1b1461089e578063ac8a584a146108c2578063b2d111f6146108e1578063b64a097e146108f4578063b8388aca1461090a578063c0324c7714610932578063c0919ac61461094b578063c6c3f3f91461095e578063ce56c4541461097d578063cfff25bb1461099f578063d4fac45d146109b2578063e02584bf146109d7578063f851a44014610a0b575b33600160a060020a03166000908152600a602052604081205460ff16600281111561027457fe5b141561027f57600080fd5b33600160a060020a03167f75f33ed68675112c77094e7c5b073890598be1d23e27cd7f6907b4a7d98ac6193460405190815260200160405180910390a2005b34156102c957600080fd5b6102dd600160a060020a0360043516610a1e565b005b61035d600160a060020a0360048035821691602480358216926044359260643581169260843582169260a4359260c4359260e4359091169190610124906101043590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610b8e95505050505050565b60405190815260200160405180910390f35b341561037a57600080fd5b610382610c49565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156103c15780820151838201526020016103a9565b505050509050019250505060405180910390f35b34156103e057600080fd5b610402600160a060020a03600435811690602435166044356064351515610cb2565b604051600160a060020a03909216825260208201526040908101905180910390f35b341561042f57600080fd5b61035d6004356110c2565b341561044557600080fd5b6102dd600160a060020a03600435166110d4565b341561046457600080fd5b610481600160a060020a0360043581169060243516604435611179565b60405191825260208201526040908101905180910390f35b34156104a457600080fd5b6104ac6111d6565b604051901515815260200160405180910390f35b34156104cb57600080fd5b6104ac600160a060020a03600435166024356111df565b34156104ed57600080fd5b6104f561134c565b604051600160a060020a03909116815260200160405180910390f35b341561051c57600080fd5b61038261135b565b341561052f57600080fd5b6104f5600160a060020a03600435166024356113c1565b341561055157600080fd5b6102dd600160a060020a03600435166113f8565b341561057057600080fd5b6102dd600160a060020a036004358116906024359060443516611488565b341561059957600080fd5b61035d61157f565b34156105ac57600080fd5b6102dd600160a060020a0360043516611585565b34156105cb57600080fd5b61035d611681565b34156105de57600080fd5b6104f5611687565b34156105f157600080fd5b6102dd600160a060020a0360043516611696565b341561061057600080fd5b6104f561173b565b341561062357600080fd5b6104f561174a565b341561063657600080fd5b6102dd600435602435611759565b341561064f57600080fd5b61035d600160a060020a0360043516611792565b341561066e57600080fd5b6104ac61182d565b341561068157600080fd5b610695600160a060020a0360043516611836565b604051808260028111156106a557fe5b60ff16815260200191505060405180910390f35b34156106c457600080fd5b6102dd600160a060020a036004351661184b565b34156106e357600080fd5b6102dd60043515156118e6565b34156106fb57600080fd5b6102dd611997565b341561070e57600080fd5b6104f5611a31565b341561072157600080fd5b6102dd600160a060020a0360043516611a40565b341561074057600080fd5b610382611b22565b341561075357600080fd5b610481600160a060020a0360043581169060243516604435611b88565b341561077b57600080fd5b6104f5600435611c81565b341561079157600080fd5b610481600160a060020a0360043581169060243516604435611ca9565b34156107b957600080fd5b6107c1611d63565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156107fd5780820151838201526020016107e5565b50505050905090810190601f16801561082a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561084357600080fd5b61035d600160a060020a0360043581169060243516611d9a565b341561086857600080fd5b6104f5600160a060020a0360043516602435611da0565b341561088a57600080fd5b6102dd600160a060020a0360043516611dbb565b34156108a957600080fd5b6104ac600160a060020a03600435166024351515611e8b565b34156108cd57600080fd5b6102dd600160a060020a0360043516611fac565b34156108ec57600080fd5b61035d612118565b34156108ff57600080fd5b61035d60043561211e565b341561091557600080fd5b610481600160a060020a0360043581169060243516604435612130565b341561093d57600080fd5b6102dd600435602435612155565b341561095657600080fd5b61035d6121c7565b341561096957600080fd5b6102dd600160a060020a03600435166121cf565b341561098857600080fd5b6102dd600435600160a060020a036024351661226a565b34156109aa57600080fd5b61035d6122fd565b34156109bd57600080fd5b61035d600160a060020a0360043581169060243516612303565b34156109e257600080fd5b6104ac600160a060020a03600435811690602435166044351515606435151560843515156123ae565b3415610a1657600080fd5b6104f5612633565b6000805433600160a060020a03908116911614610a3a57600080fd5b600160a060020a03821660009081526003602052604090205460ff161515610a6157600080fd5b50600160a060020a0381166000908152600360205260408120805460ff191690555b600554811015610b8a5781600160a060020a0316600582815481101515610aa657fe5b600091825260209091200154600160a060020a03161415610b8257600580546000198101908110610ad357fe5b60009182526020909120015460058054600160a060020a039092169183908110610af957fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556005805490610b35906000198301613695565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051600160a060020a039092168252151560208201526040908101905180910390a1610b8a565b600101610a83565b5050565b6000610b986136be565b6007805460010190819055600e5433600160a060020a03908116911614610bbe57600080fd5b83511580610bcd575083516004145b1515610bd857600080fd5b600160a060020a03808d1683528b81166020840152604083018b90528981166060840152888116608084015260a0830188905260c08301879052851660e08301526101008201849052610c2a82612642565b92506007548114610c3a57600080fd5b50509998505050505050505050565b610c51613711565b6009805480602002602001604051908101604052809291908181526020018280548015610ca757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610c89575b505050505090505b90565b6000806000806000610cc2613711565b610cca613711565b610cd2613711565b6000806000975060009650600095508c600160a060020a03168e600160a060020a03161415610d30576009805488908110610d0957fe5b600091825260209091200154600160a060020a03169950670de0b6b3a764000098506110b1565b600160a060020a038e1660008051602061379283398151915214610d6b57600160a060020a038e166000908152601260205260409020610d84565b600160a060020a038d1660009081526013602052604090205b805480602002602001604051908101604052809291908181526020018280548015610dd857602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610dba575b5050505050945084511515610e16576009805488908110610df557fe5b600091825260209091200154600160a060020a0316995096975087966110b1565b8451604051805910610e255750595b908082528060200260200182016040525093508451604051805910610e475750595b90808252806020026020018201604052509250600091505b8451821015610fb8578a158015610eb757506002600a6000878581518110610e8357fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205460ff166002811115610eb557fe5b145b15610ec157610fad565b848281518110610ecd57fe5b90602001906020020151600160a060020a0316637cd442728f8f8f4360006040516020015260405160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201526064810191909152608401602060405180830381600087803b1515610f4657600080fd5b6102c65a03f11515610f5757600080fd5b50505060405180519050848381518110610f6d57fe5b6020908102909101015287848381518110610f8457fe5b906020019060200201511115610fad57838281518110610fa057fe5b9060200190602002015197505b600190910190610e5f565b600088111561109557600854612710018861271002811515610fd657fe5b049050600091505b845182101561102c5780848381518110610ff457fe5b9060200190602002015110611021578183878060010198508151811061101657fe5b602090810290910101525b600190910190610fde565b600186111561106257828660001943014081151561104657fe5b068151811061105157fe5b90602001906020020151965061107c565b8260008151811061106f57fe5b9060200190602002015196505b83878151811061108857fe5b9060200190602002015197505b8487815181106110a157fe5b9060200190602002015188995099505b505050505050505094509492505050565b60116020526000908152604090205481565b60005433600160a060020a039081169116146110ef57600080fd5b600160a060020a038116151561110457600080fd5b600d547f91251c8b04e3ed4b921776c3aced2ad433c3701257fc5666cb35239ec4df5411908290600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a1600d8054600160a060020a031916600160a060020a0392909216919091179055565b600080611184613723565b6111c386868660408051908101604052600481527f5045524d000000000000000000000000000000000000000000000000000000006020820152612aa4565b9050600081519097909650945050505050565b60105460ff1690565b600160a060020a03331660009081526002602052604081205460ff16151561120657600080fd5b600160a060020a0383166000908152600a602052604081205460ff16600281111561122d57fe5b141561123857600080fd5b82600160a060020a031660098381548110151561125157fe5b600091825260209091200154600160a060020a03161461127057600080fd5b600160a060020a0383166000908152600a60205260409020805460ff191690556009805460001981019081106112a257fe5b60009182526020909120015460098054600160a060020a0390921691849081106112c857fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556009805490611304906000198301613695565b507f861f07ab6bad95b71c362ed240dc0082c3d9bbfe75e7830be646ef0d61da311783604051600160a060020a03909116815260200160405180910390a15060015b92915050565b600154600160a060020a031681565b611363613711565b6004805480602002602001604051908101604052809291908181526020018280548015610ca757602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610c89575050505050905090565b6012602052816000526040600020818154811015156113dc57fe5b600091825260209091200154600160a060020a03169150829050565b60005433600160a060020a0390811691161461141357600080fd5b600b547f1eae61fde1a37f65af69f00b4269aa5fda423f684194d303865cba6c650b2366908290600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a1600b8054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a039081169116146114a357600080fd5b82600160a060020a031663a9059cbb828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561150057600080fd5b6102c65a03f1151561151157600080fd5b50505060405180519050151561152657600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051600160a060020a03938416815260208101929092529091166040808301919091526060909101905180910390a1505050565b600f5490565b60005433600160a060020a039081169116146115a057600080fd5b600160a060020a03811660009081526003602052604090205460ff16156115c657600080fd5b600554603290106115d657600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600360205260409020805460ff1916600190811790915560058054909181016116558382613695565b5060009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055565b60085481565b600d54600160a060020a031681565b60005433600160a060020a039081169116146116b157600080fd5b600160a060020a03811615156116c657600080fd5b600c547fa2446ac1a8b17e6d40c1cafcbf076b945fdc5f897c970e6e19915760def475ad908290600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a1600c8054600160a060020a031916600160a060020a0392909216919091179055565b600c54600160a060020a031681565b600b54600160a060020a031681565b600160a060020a03331660009081526002602052604090205460ff16151561178057600080fd5b60009182526011602052604090912055565b600b54600090600160a060020a031615156117b2575060ff60020a611828565b600b54600160a060020a0316636432679f8360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561180b57600080fd5b6102c65a03f1151561181c57600080fd5b50505060405180519150505b919050565b60105460ff1681565b600a6020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461186657600080fd5b600160a060020a038116151561187b57600080fd5b6001547f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4090600160a060020a0316604051600160a060020a03909116815260200160405180910390a160018054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a0390811691161461190157600080fd5b801561194c57600d54600160a060020a0316151561191e57600080fd5b600c54600160a060020a0316151561193557600080fd5b600e54600160a060020a0316151561194c57600080fd5b6010805460ff191682151517908190557f8a846a525e22497042ee2f99423a8ff8bbb831d3ae5384692bf6040f591c1eba9060ff16604051901515815260200160405180910390a150565b60015433600160a060020a039081169116146119b257600080fd5b6001546000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed91600160a060020a039081169116604051600160a060020a039283168152911660208201526040908101905180910390a16001805460008054600160a060020a0319908116600160a060020a03841617909155169055565b600e54600160a060020a031681565b60005433600160a060020a03908116911614611a5b57600080fd5b600160a060020a0381161515611a7057600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051600160a060020a03909116815260200160405180910390a16000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed908290600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a160008054600160a060020a031916600160a060020a0392909216919091179055565b611b2a613711565b6005805480602002602001604051908101604052809291908181526020018280548015610ca757602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610c89575050505050905090565b600c5460009081908190600160a060020a03161515611ba657600080fd5b506001600060ff60020a85161115611be257507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169160005b600c54600160a060020a031663d38d2bea8787878560006040516040015260405160e060020a63ffffffff8716028152600160a060020a039485166004820152929093166024830152604482015290151560648201526084016040805180830381600087803b1515611c5357600080fd5b6102c65a03f11515611c6457600080fd5b505050604051805190602001805190509250925050935093915050565b6009805482908110611c8f57fe5b600091825260209091200154600160a060020a0316905081565b600c546000908190600160a060020a03161515611cc557600080fd5b600c54600160a060020a031663d38d2bea8686866000806040516040015260405160e060020a63ffffffff8716028152600160a060020a039485166004820152929093166024830152604482015290151560648201526084016040805180830381600087803b1515611d3657600080fd5b6102c65a03f11515611d4757600080fd5b5050506040518051906020018051905091509150935093915050565b60408051908101604052600481527f5045524d00000000000000000000000000000000000000000000000000000000602082015281565b60008080fd5b6013602052816000526040600020818154811015156113dc57fe5b60005433600160a060020a03908116911614611dd657600080fd5b600160a060020a03811660009081526002602052604090205460ff1615611dfc57600080fd5b60045460329010611e0c57600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600260205260409020805460ff1916600190811790915560048054909181016116558382613695565b600160a060020a03331660009081526002602052604081205460ff161515611eb257600080fd5b600160a060020a0383166000908152600a602052604081205460ff166002811115611ed957fe5b14611ee357600080fd5b6009805460018101611ef58382613695565b5060009182526020909120018054600160a060020a031916600160a060020a03851617905581611f26576001611f29565b60025b600160a060020a0384166000908152600a60205260409020805460ff19166001836002811115611f5557fe5b021790555082600160a060020a03167f4d99ce7cd99dfb1a7692e50c2e9b8d84c1b420f1d439ca8c4de0171acac119076001846040519115158252151560208201526040908101905180910390a250600192915050565b6000805433600160a060020a03908116911614611fc857600080fd5b600160a060020a03821660009081526002602052604090205460ff161515611fef57600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b600454811015610b8a5781600160a060020a031660048281548110151561203457fe5b600091825260209091200154600160a060020a031614156121105760048054600019810190811061206157fe5b60009182526020909120015460048054600160a060020a03909216918390811061208757fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556004805460001901906120c39082613695565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051600160a060020a039092168252151560208201526040908101905180910390a1610b8a565b600101612011565b600f5481565b60009081526011602052604090205490565b60008061213b613723565b6111c3868686602060405190810160405260008152612aa4565b60005433600160a060020a0390811691161461217057600080fd5b61271081111561217f57600080fd5b600f82905560088190557fc1bdc2503431144078ba3cb975f03be0f6c1d365cf490875e7534b4ca70c863e828260405191825260208201526040908101905180910390a15050565b60ff60020a81565b60005433600160a060020a039081169116146121ea57600080fd5b600160a060020a03811615156121ff57600080fd5b600e8054600160a060020a031916600160a060020a0383811691909117918290557ffdd305502f7797ff3390aa08825f7f6aec92c27a94e103bfaf45452b4cf1d4f4911633604051600160a060020a039283168152911660208201526040908101905180910390a150565b60005433600160a060020a0390811691161461228557600080fd5b600160a060020a03811682156108fc0283604051600060405180830381858888f1935050505015156122b657600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051918252600160a060020a031660208201526040908101905180910390a15050565b60095490565b6000600160a060020a03831660008051602061379283398151915214156123355750600160a060020a03811631611346565b82600160a060020a03166370a082318360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561238c57600080fd5b6102c65a03f1151561239d57600080fd5b505050604051805190509050611346565b600160a060020a03331660009081526002602052604081205460ff1615156123d557600080fd5b600160a060020a0386166000908152600a602052604081205460ff1660028111156123fc57fe5b141561240757600080fd5b83156124885761241a8686600085612cf7565b85600160a060020a03167fadb5a4f14d89b3a5ffb3900ac1ea4574d991f93887f6199fabaf25393644e01c6000805160206137928339815191528785604051600160a060020a0393841681529190921660208201529015156040808301919091526060909101905180910390a25b821561261e5761249b8686600185612cf7565b811561252d5784600160a060020a031663095ea7b38760ff60020a60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561250257600080fd5b6102c65a03f1151561251357600080fd5b50505060405180519050151561252857600080fd5b6125b0565b84600160a060020a031663095ea7b3876000806040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561258a57600080fd5b6102c65a03f1151561259b57600080fd5b5050506040518051905015156125b057600080fd5b85600160a060020a03167fadb5a4f14d89b3a5ffb3900ac1ea4574d991f93887f6199fabaf25393644e01c8660008051602061379283398151915285604051600160a060020a0393841681529190921660208201529015156040808301919091526060909101905180910390a25b61262785612e49565b50600195945050505050565b600054600160a060020a031681565b600061264c613723565b6010546000908190819060ff16151561266457600080fd5b600f543a111561267357600080fd5b61268f8660200151876040015188606001518960800151612f06565b151561269a57600080fd5b6126b7866020015187606001518860400151896101000151612aa4565b935060008451116126c757600080fd5b69d3c21bcecceda10000008451106126de57600080fd5b8560c00151845110156126f057600080fd5b61270d8660200151876060015188604001518960a0015188613022565b9450925090508161271e8751611792565b101561272957600080fd5b61273e866020015187604001518389516130a4565b151561274957600080fd5b612774866020015182600080516020613792833981519152308689602001518a608001516001613186565b151561277f57600080fd5b6127ae60008051602061379283398151915283886060015189608001518789604001518a60a001516001613186565b15156127b957600080fd5b6000805160206137928339815191526020870151600160a060020a03161461287257600d54600160a060020a031663fd062d3b8360208701518960e0015160006040516020015260405160e060020a63ffffffff86160281526004810193909352600160a060020a039182166024840152166044820152606401602060405180830381600087803b151561284c57600080fd5b6102c65a03f1151561285d57600080fd5b50505060405180519050151561287257600080fd5b6000805160206137928339815191526060870151600160a060020a03161461292b57600d54600160a060020a031663fd062d3b8360408701518960e0015160006040516020015260405160e060020a63ffffffff86160281526004810193909352600160a060020a039182166024840152166044820152606401602060405180830381600087803b151561290557600080fd5b6102c65a03f1151561291657600080fd5b50505060405180519050151561292b57600080fd5b8551600160a060020a03167fd30ca399cb43507ecec6a629a35cf45eb98cda550c27696dcb0d8c4a3873ce6c8760200151886060015184878b608001518860008051602061379283398151915260208f0151600160a060020a031614612995578b60200151612998565b60005b600080516020613792833981519152600160a060020a03168f60600151600160a060020a0316146129cd578c604001516129d0565b60005b8f6101000151604051600160a060020a03808b16825289811660208301526040820189905260608201889052868116608083015260a0820186905284811660c0830152831660e0820152610120610100820181815290820183818151815260200191508051906020019080838360005b83811015612a58578082015183820152602001612a40565b50505050905090810190601f168015612a855780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a25090949350505050565b612aac613723565b60016004835110158015612c165750604080519081016040908152600482527f5045524d000000000000000000000000000000000000000000000000000000006020830152518082805190602001908083835b60208310612b1e5780518252601f199092019160209182019101612aff565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902083600081518110612b5857fe5b016020015160f860020a900460f860020a0284600181518110612b7757fe5b016020015160f860020a900460f860020a0285600281518110612b9657fe5b016020015160f860020a900460f860020a0286600381518110612bb557fe5b016020015160f860020a900460f860020a026040517fff000000000000000000000000000000000000000000000000000000000000009485168152928416600184015290831660028301529091166003820152600401604051908190039020145b15612c1f575060005b612c39866000805160206137928339815191528684610cb2565b60808401908152600160a060020a039091166020840152612c6e908790600080516020613792833981519152908790516133c3565b60608301908152612c92906000805160206137928339815191529087905184610cb2565b60a0840152600160a060020a03166040830152612cc76000805160206137928339815191528660608501518560a001516133c3565b60c08301908152612cec90859051612cde896133ea565b612ce7896133ea565b6134a8565b825250949350505050565b600160a060020a03831660009081526013602052604081208315612d2f5750600160a060020a03841660009081526012602052604090205b600091505b8054821015612df7578082815481101515612d4b57fe5b600091825260209091200154600160a060020a0387811691161415612dec578215612d7557612df7565b805481906000198101908110612d8757fe5b6000918252602090912001548154600160a060020a0390911690829084908110612dad57fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790558054612de6826000198301613695565b50612df7565b600190910190612d34565b828015612e045750805482145b15612e41578054819060018101612e1b8382613695565b5060009182526020909120018054600160a060020a031916600160a060020a0388161790555b505050505050565b600160a060020a0381166000805160206137928339815191521415612e8957600160a060020a038116600090815260066020526040902060129055612f03565b80600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612ecf57600080fd5b6102c65a03f11515612ee057600080fd5b5050506040518051600160a060020a038316600090815260066020526040902055505b50565b60006b204fce5e3e25026110000000841115612f2157600080fd5b831515612f2d57600080fd5b600160a060020a0382161515612f4257600080fd5b600160a060020a038581169084161415612f5b57600080fd5b600160a060020a0385166000805160206137928339815191521415612f8b57348414612f8657600080fd5b613016565b3415612f9657600080fd5b8385600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515612fee57600080fd5b6102c65a03f11515612fff57600080fd5b505050604051805190501015151561301657600080fd5b5060015b949350505050565b6000806000848460c001511115613087575083613053600080516020613792833981519152888360a0880151613543565b915061307388600080516020613792833981519152848760800151613543565b92508583111561308257600080fd5b613099565b8360c001519050859250836060015191505b955095509592505050565b60008383101561301657600160a060020a038516600080516020613792833981519152141561310157600160a060020a03821683850380156108fc0290604051600060405180830381858888f193505050501515612f8657600080fd5b84600160a060020a031663a9059cbb8385870360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561316057600080fd5b6102c65a03f1151561317157600080fd5b50505060405180519050151561301657600080fd5b600080600160a060020a038a811690891614156131f25730600160a060020a031687600160a060020a03161415156131e957600160a060020a03871689156108fc028a604051600060405180830381858888f1935050505015156131e957600080fd5b600191506133b6565b600160a060020a038a1660008051602061379283398151915214156132145750875b84600160a060020a0316636cf69811828c8c8c308a8a60006040516020015260405160e060020a63ffffffff8a16028152600160a060020a0396871660048201526024810195909552928516604485015293166064830152608482019290925290151560a482015260c4016020604051808303818588803b151561329757600080fd5b6125ee5a03f115156132a857600080fd5b505050506040518051905015156132be57600080fd5b30600160a060020a031687600160a060020a03161415156133b157600160a060020a038816600080516020613792833981519152141561332e57600160a060020a03871686156108fc0287604051600060405180830381858888f19350505050151561332957600080fd5b6133b1565b87600160a060020a031663a9059cbb888860006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561338b57600080fd5b6102c65a03f1151561339c57600080fd5b5050506040518051905015156133b157600080fd5b600191505b5098975050505050505050565b60006133e1836133d2876133ea565b6133db876133ea565b85613561565b95945050505050565b600080600160a060020a038316600080516020613792833981519152141561341557601291506134a2565b50600160a060020a03821660009081526006602052604090205480151561349e5782600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561347c57600080fd5b6102c65a03f1151561348d57600080fd5b5050506040518051905091506134a2565b8091505b50919050565b60006b204fce5e3e250261100000008511156134c357600080fd5b6b204fce5e3e250261100000008411156134dc57600080fd5b82821061351757601283830311156134f357600080fd5b84838303600a0a02670de0b6b3a7640000850281151561350f57fe5b04905061301a565b6012828403111561352757600080fd5b84828403600a0a670de0b6b3a764000086020281151561350f57fe5b60006133e183613552876133ea565b61355b876133ea565b856135ee565b60006b204fce5e3e2502611000000085111561357c57600080fd5b69d3c21bcecceda100000082111561359357600080fd5b8383106135c257601284840311156135aa57600080fd5b670de0b6b3a7640000858302858503600a0a0261350f565b601283850311156135d257600080fd5b828403600a0a670de0b6b3a76400000282860281151561350f57fe5b600080806b204fce5e3e2502611000000087111561360b57600080fd5b69d3c21bcecceda100000084111561362257600080fd5b848610613653576012858703111561363957600080fd5b5050828403600a0a8502670de0b6b3a76400000282613679565b6012868603111561366357600080fd5b5050670de0b6b3a76400008502848403600a0a83025b8060018284010381151561368957fe5b04979650505050505050565b8154818355818115116136b9576000838152602090206136b9918101908301613773565b505050565b6101206040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e0820152610100810161370c613711565b905290565b60206040519081016040526000815290565b60e060405190810160405280600081526020016000600160a060020a031681526020016000600160a060020a03168152602001600081526020016000815260200160008152602001600081525090565b610caf91905b8082111561378d5760008155600101613779565b50905600000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeea165627a7a7230582099026ce79746408504a22acf53b320ef078659611e09859639b09b3442fdc4bc0029"

// DeployKyberNetwork deploys a new Ethereum contract, binding an instance of KyberNetwork to it.
func DeployKyberNetwork(auth *bind.TransactOpts, backend bind.ContractBackend, _admin common.Address) (common.Address, *types.Transaction, *KyberNetwork, error) {
	parsed, err := abi.JSON(strings.NewReader(KyberNetworkABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(KyberNetworkBin), backend, _admin)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KyberNetwork{KyberNetworkCaller: KyberNetworkCaller{contract: contract}, KyberNetworkTransactor: KyberNetworkTransactor{contract: contract}, KyberNetworkFilterer: KyberNetworkFilterer{contract: contract}}, nil
}

// KyberNetwork is an auto generated Go binding around an Ethereum contract.
type KyberNetwork struct {
	KyberNetworkCaller     // Read-only binding to the contract
	KyberNetworkTransactor // Write-only binding to the contract
	KyberNetworkFilterer   // Log filterer for contract events
}

// KyberNetworkCaller is an auto generated read-only Go binding around an Ethereum contract.
type KyberNetworkCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KyberNetworkTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KyberNetworkTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KyberNetworkFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KyberNetworkFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KyberNetworkSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KyberNetworkSession struct {
	Contract     *KyberNetwork     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KyberNetworkCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KyberNetworkCallerSession struct {
	Contract *KyberNetworkCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// KyberNetworkTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KyberNetworkTransactorSession struct {
	Contract     *KyberNetworkTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// KyberNetworkRaw is an auto generated low-level Go binding around an Ethereum contract.
type KyberNetworkRaw struct {
	Contract *KyberNetwork // Generic contract binding to access the raw methods on
}

// KyberNetworkCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KyberNetworkCallerRaw struct {
	Contract *KyberNetworkCaller // Generic read-only contract binding to access the raw methods on
}

// KyberNetworkTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KyberNetworkTransactorRaw struct {
	Contract *KyberNetworkTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKyberNetwork creates a new instance of KyberNetwork, bound to a specific deployed contract.
func NewKyberNetwork(address common.Address, backend bind.ContractBackend) (*KyberNetwork, error) {
	contract, err := bindKyberNetwork(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KyberNetwork{KyberNetworkCaller: KyberNetworkCaller{contract: contract}, KyberNetworkTransactor: KyberNetworkTransactor{contract: contract}, KyberNetworkFilterer: KyberNetworkFilterer{contract: contract}}, nil
}

// NewKyberNetworkCaller creates a new read-only instance of KyberNetwork, bound to a specific deployed contract.
func NewKyberNetworkCaller(address common.Address, caller bind.ContractCaller) (*KyberNetworkCaller, error) {
	contract, err := bindKyberNetwork(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KyberNetworkCaller{contract: contract}, nil
}

// NewKyberNetworkTransactor creates a new write-only instance of KyberNetwork, bound to a specific deployed contract.
func NewKyberNetworkTransactor(address common.Address, transactor bind.ContractTransactor) (*KyberNetworkTransactor, error) {
	contract, err := bindKyberNetwork(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KyberNetworkTransactor{contract: contract}, nil
}

// NewKyberNetworkFilterer creates a new log filterer instance of KyberNetwork, bound to a specific deployed contract.
func NewKyberNetworkFilterer(address common.Address, filterer bind.ContractFilterer) (*KyberNetworkFilterer, error) {
	contract, err := bindKyberNetwork(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KyberNetworkFilterer{contract: contract}, nil
}

// bindKyberNetwork binds a generic wrapper to an already deployed contract.
func bindKyberNetwork(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KyberNetworkABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KyberNetwork *KyberNetworkRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _KyberNetwork.Contract.KyberNetworkCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KyberNetwork *KyberNetworkRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KyberNetwork.Contract.KyberNetworkTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KyberNetwork *KyberNetworkRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KyberNetwork.Contract.KyberNetworkTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KyberNetwork *KyberNetworkCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _KyberNetwork.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KyberNetwork *KyberNetworkTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KyberNetwork.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KyberNetwork *KyberNetworkTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KyberNetwork.Contract.contract.Transact(opts, method, params...)
}

// PERMHINT is a free data retrieval call binding the contract method 0x8b98a2c5.
//
// Solidity: function PERM_HINT() constant returns(bytes)
func (_KyberNetwork *KyberNetworkCaller) PERMHINT(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "PERM_HINT")
	return *ret0, err
}

// PERMHINT is a free data retrieval call binding the contract method 0x8b98a2c5.
//
// Solidity: function PERM_HINT() constant returns(bytes)
func (_KyberNetwork *KyberNetworkSession) PERMHINT() ([]byte, error) {
	return _KyberNetwork.Contract.PERMHINT(&_KyberNetwork.CallOpts)
}

// PERMHINT is a free data retrieval call binding the contract method 0x8b98a2c5.
//
// Solidity: function PERM_HINT() constant returns(bytes)
func (_KyberNetwork *KyberNetworkCallerSession) PERMHINT() ([]byte, error) {
	return _KyberNetwork.Contract.PERMHINT(&_KyberNetwork.CallOpts)
}

// PERMHINTGETRATE is a free data retrieval call binding the contract method 0xc0919ac6.
//
// Solidity: function PERM_HINT_GET_RATE() constant returns(uint256)
func (_KyberNetwork *KyberNetworkCaller) PERMHINTGETRATE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "PERM_HINT_GET_RATE")
	return *ret0, err
}

// PERMHINTGETRATE is a free data retrieval call binding the contract method 0xc0919ac6.
//
// Solidity: function PERM_HINT_GET_RATE() constant returns(uint256)
func (_KyberNetwork *KyberNetworkSession) PERMHINTGETRATE() (*big.Int, error) {
	return _KyberNetwork.Contract.PERMHINTGETRATE(&_KyberNetwork.CallOpts)
}

// PERMHINTGETRATE is a free data retrieval call binding the contract method 0xc0919ac6.
//
// Solidity: function PERM_HINT_GET_RATE() constant returns(uint256)
func (_KyberNetwork *KyberNetworkCallerSession) PERMHINTGETRATE() (*big.Int, error) {
	return _KyberNetwork.Contract.PERMHINTGETRATE(&_KyberNetwork.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_KyberNetwork *KyberNetworkCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_KyberNetwork *KyberNetworkSession) Admin() (common.Address, error) {
	return _KyberNetwork.Contract.Admin(&_KyberNetwork.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_KyberNetwork *KyberNetworkCallerSession) Admin() (common.Address, error) {
	return _KyberNetwork.Contract.Admin(&_KyberNetwork.CallOpts)
}

// Enabled is a free data retrieval call binding the contract method 0x238dafe0.
//
// Solidity: function enabled() constant returns(bool)
func (_KyberNetwork *KyberNetworkCaller) Enabled(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "enabled")
	return *ret0, err
}

// Enabled is a free data retrieval call binding the contract method 0x238dafe0.
//
// Solidity: function enabled() constant returns(bool)
func (_KyberNetwork *KyberNetworkSession) Enabled() (bool, error) {
	return _KyberNetwork.Contract.Enabled(&_KyberNetwork.CallOpts)
}

// Enabled is a free data retrieval call binding the contract method 0x238dafe0.
//
// Solidity: function enabled() constant returns(bool)
func (_KyberNetwork *KyberNetworkCallerSession) Enabled() (bool, error) {
	return _KyberNetwork.Contract.Enabled(&_KyberNetwork.CallOpts)
}

// ExpectedRateContract is a free data retrieval call binding the contract method 0x5dada964.
//
// Solidity: function expectedRateContract() constant returns(address)
func (_KyberNetwork *KyberNetworkCaller) ExpectedRateContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "expectedRateContract")
	return *ret0, err
}

// ExpectedRateContract is a free data retrieval call binding the contract method 0x5dada964.
//
// Solidity: function expectedRateContract() constant returns(address)
func (_KyberNetwork *KyberNetworkSession) ExpectedRateContract() (common.Address, error) {
	return _KyberNetwork.Contract.ExpectedRateContract(&_KyberNetwork.CallOpts)
}

// ExpectedRateContract is a free data retrieval call binding the contract method 0x5dada964.
//
// Solidity: function expectedRateContract() constant returns(address)
func (_KyberNetwork *KyberNetworkCallerSession) ExpectedRateContract() (common.Address, error) {
	return _KyberNetwork.Contract.ExpectedRateContract(&_KyberNetwork.CallOpts)
}

// FeeBurnerContract is a free data retrieval call binding the contract method 0x579425b7.
//
// Solidity: function feeBurnerContract() constant returns(address)
func (_KyberNetwork *KyberNetworkCaller) FeeBurnerContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "feeBurnerContract")
	return *ret0, err
}

// FeeBurnerContract is a free data retrieval call binding the contract method 0x579425b7.
//
// Solidity: function feeBurnerContract() constant returns(address)
func (_KyberNetwork *KyberNetworkSession) FeeBurnerContract() (common.Address, error) {
	return _KyberNetwork.Contract.FeeBurnerContract(&_KyberNetwork.CallOpts)
}

// FeeBurnerContract is a free data retrieval call binding the contract method 0x579425b7.
//
// Solidity: function feeBurnerContract() constant returns(address)
func (_KyberNetwork *KyberNetworkCallerSession) FeeBurnerContract() (common.Address, error) {
	return _KyberNetwork.Contract.FeeBurnerContract(&_KyberNetwork.CallOpts)
}

// FindBestRate is a free data retrieval call binding the contract method 0xb8388aca.
//
// Solidity: function findBestRate(address src, address dest, uint256 srcAmount) constant returns(uint256 obsolete, uint256 rate)
func (_KyberNetwork *KyberNetworkCaller) FindBestRate(opts *bind.CallOpts, src common.Address, dest common.Address, srcAmount *big.Int) (struct {
	Obsolete *big.Int
	Rate     *big.Int
}, error) {
	ret := new(struct {
		Obsolete *big.Int
		Rate     *big.Int
	})
	out := ret
	err := _KyberNetwork.contract.Call(opts, out, "findBestRate", src, dest, srcAmount)
	return *ret, err
}

// FindBestRate is a free data retrieval call binding the contract method 0xb8388aca.
//
// Solidity: function findBestRate(address src, address dest, uint256 srcAmount) constant returns(uint256 obsolete, uint256 rate)
func (_KyberNetwork *KyberNetworkSession) FindBestRate(src common.Address, dest common.Address, srcAmount *big.Int) (struct {
	Obsolete *big.Int
	Rate     *big.Int
}, error) {
	return _KyberNetwork.Contract.FindBestRate(&_KyberNetwork.CallOpts, src, dest, srcAmount)
}

// FindBestRate is a free data retrieval call binding the contract method 0xb8388aca.
//
// Solidity: function findBestRate(address src, address dest, uint256 srcAmount) constant returns(uint256 obsolete, uint256 rate)
func (_KyberNetwork *KyberNetworkCallerSession) FindBestRate(src common.Address, dest common.Address, srcAmount *big.Int) (struct {
	Obsolete *big.Int
	Rate     *big.Int
}, error) {
	return _KyberNetwork.Contract.FindBestRate(&_KyberNetwork.CallOpts, src, dest, srcAmount)
}

// FindBestRateOnlyPermission is a free data retrieval call binding the contract method 0x1dc1f78d.
//
// Solidity: function findBestRateOnlyPermission(address src, address dest, uint256 srcAmount) constant returns(uint256 obsolete, uint256 rate)
func (_KyberNetwork *KyberNetworkCaller) FindBestRateOnlyPermission(opts *bind.CallOpts, src common.Address, dest common.Address, srcAmount *big.Int) (struct {
	Obsolete *big.Int
	Rate     *big.Int
}, error) {
	ret := new(struct {
		Obsolete *big.Int
		Rate     *big.Int
	})
	out := ret
	err := _KyberNetwork.contract.Call(opts, out, "findBestRateOnlyPermission", src, dest, srcAmount)
	return *ret, err
}

// FindBestRateOnlyPermission is a free data retrieval call binding the contract method 0x1dc1f78d.
//
// Solidity: function findBestRateOnlyPermission(address src, address dest, uint256 srcAmount) constant returns(uint256 obsolete, uint256 rate)
func (_KyberNetwork *KyberNetworkSession) FindBestRateOnlyPermission(src common.Address, dest common.Address, srcAmount *big.Int) (struct {
	Obsolete *big.Int
	Rate     *big.Int
}, error) {
	return _KyberNetwork.Contract.FindBestRateOnlyPermission(&_KyberNetwork.CallOpts, src, dest, srcAmount)
}

// FindBestRateOnlyPermission is a free data retrieval call binding the contract method 0x1dc1f78d.
//
// Solidity: function findBestRateOnlyPermission(address src, address dest, uint256 srcAmount) constant returns(uint256 obsolete, uint256 rate)
func (_KyberNetwork *KyberNetworkCallerSession) FindBestRateOnlyPermission(src common.Address, dest common.Address, srcAmount *big.Int) (struct {
	Obsolete *big.Int
	Rate     *big.Int
}, error) {
	return _KyberNetwork.Contract.FindBestRateOnlyPermission(&_KyberNetwork.CallOpts, src, dest, srcAmount)
}

// GetAlerters is a free data retrieval call binding the contract method 0x7c423f54.
//
// Solidity: function getAlerters() constant returns(address[])
func (_KyberNetwork *KyberNetworkCaller) GetAlerters(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "getAlerters")
	return *ret0, err
}

// GetAlerters is a free data retrieval call binding the contract method 0x7c423f54.
//
// Solidity: function getAlerters() constant returns(address[])
func (_KyberNetwork *KyberNetworkSession) GetAlerters() ([]common.Address, error) {
	return _KyberNetwork.Contract.GetAlerters(&_KyberNetwork.CallOpts)
}

// GetAlerters is a free data retrieval call binding the contract method 0x7c423f54.
//
// Solidity: function getAlerters() constant returns(address[])
func (_KyberNetwork *KyberNetworkCallerSession) GetAlerters() ([]common.Address, error) {
	return _KyberNetwork.Contract.GetAlerters(&_KyberNetwork.CallOpts)
}

// GetBalance is a free data retrieval call binding the contract method 0xd4fac45d.
//
// Solidity: function getBalance(address token, address user) constant returns(uint256)
func (_KyberNetwork *KyberNetworkCaller) GetBalance(opts *bind.CallOpts, token common.Address, user common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "getBalance", token, user)
	return *ret0, err
}

// GetBalance is a free data retrieval call binding the contract method 0xd4fac45d.
//
// Solidity: function getBalance(address token, address user) constant returns(uint256)
func (_KyberNetwork *KyberNetworkSession) GetBalance(token common.Address, user common.Address) (*big.Int, error) {
	return _KyberNetwork.Contract.GetBalance(&_KyberNetwork.CallOpts, token, user)
}

// GetBalance is a free data retrieval call binding the contract method 0xd4fac45d.
//
// Solidity: function getBalance(address token, address user) constant returns(uint256)
func (_KyberNetwork *KyberNetworkCallerSession) GetBalance(token common.Address, user common.Address) (*big.Int, error) {
	return _KyberNetwork.Contract.GetBalance(&_KyberNetwork.CallOpts, token, user)
}

// GetExpectedRate is a free data retrieval call binding the contract method 0x809a9e55.
//
// Solidity: function getExpectedRate(address src, address dest, uint256 srcQty) constant returns(uint256 expectedRate, uint256 slippageRate)
func (_KyberNetwork *KyberNetworkCaller) GetExpectedRate(opts *bind.CallOpts, src common.Address, dest common.Address, srcQty *big.Int) (struct {
	ExpectedRate *big.Int
	SlippageRate *big.Int
}, error) {
	ret := new(struct {
		ExpectedRate *big.Int
		SlippageRate *big.Int
	})
	out := ret
	err := _KyberNetwork.contract.Call(opts, out, "getExpectedRate", src, dest, srcQty)
	return *ret, err
}

// GetExpectedRate is a free data retrieval call binding the contract method 0x809a9e55.
//
// Solidity: function getExpectedRate(address src, address dest, uint256 srcQty) constant returns(uint256 expectedRate, uint256 slippageRate)
func (_KyberNetwork *KyberNetworkSession) GetExpectedRate(src common.Address, dest common.Address, srcQty *big.Int) (struct {
	ExpectedRate *big.Int
	SlippageRate *big.Int
}, error) {
	return _KyberNetwork.Contract.GetExpectedRate(&_KyberNetwork.CallOpts, src, dest, srcQty)
}

// GetExpectedRate is a free data retrieval call binding the contract method 0x809a9e55.
//
// Solidity: function getExpectedRate(address src, address dest, uint256 srcQty) constant returns(uint256 expectedRate, uint256 slippageRate)
func (_KyberNetwork *KyberNetworkCallerSession) GetExpectedRate(src common.Address, dest common.Address, srcQty *big.Int) (struct {
	ExpectedRate *big.Int
	SlippageRate *big.Int
}, error) {
	return _KyberNetwork.Contract.GetExpectedRate(&_KyberNetwork.CallOpts, src, dest, srcQty)
}

// GetExpectedRateOnlyPermission is a free data retrieval call binding the contract method 0x85dc0c56.
//
// Solidity: function getExpectedRateOnlyPermission(address src, address dest, uint256 srcQty) constant returns(uint256 expectedRate, uint256 slippageRate)
func (_KyberNetwork *KyberNetworkCaller) GetExpectedRateOnlyPermission(opts *bind.CallOpts, src common.Address, dest common.Address, srcQty *big.Int) (struct {
	ExpectedRate *big.Int
	SlippageRate *big.Int
}, error) {
	ret := new(struct {
		ExpectedRate *big.Int
		SlippageRate *big.Int
	})
	out := ret
	err := _KyberNetwork.contract.Call(opts, out, "getExpectedRateOnlyPermission", src, dest, srcQty)
	return *ret, err
}

// GetExpectedRateOnlyPermission is a free data retrieval call binding the contract method 0x85dc0c56.
//
// Solidity: function getExpectedRateOnlyPermission(address src, address dest, uint256 srcQty) constant returns(uint256 expectedRate, uint256 slippageRate)
func (_KyberNetwork *KyberNetworkSession) GetExpectedRateOnlyPermission(src common.Address, dest common.Address, srcQty *big.Int) (struct {
	ExpectedRate *big.Int
	SlippageRate *big.Int
}, error) {
	return _KyberNetwork.Contract.GetExpectedRateOnlyPermission(&_KyberNetwork.CallOpts, src, dest, srcQty)
}

// GetExpectedRateOnlyPermission is a free data retrieval call binding the contract method 0x85dc0c56.
//
// Solidity: function getExpectedRateOnlyPermission(address src, address dest, uint256 srcQty) constant returns(uint256 expectedRate, uint256 slippageRate)
func (_KyberNetwork *KyberNetworkCallerSession) GetExpectedRateOnlyPermission(src common.Address, dest common.Address, srcQty *big.Int) (struct {
	ExpectedRate *big.Int
	SlippageRate *big.Int
}, error) {
	return _KyberNetwork.Contract.GetExpectedRateOnlyPermission(&_KyberNetwork.CallOpts, src, dest, srcQty)
}

// GetNumReserves is a free data retrieval call binding the contract method 0xcfff25bb.
//
// Solidity: function getNumReserves() constant returns(uint256)
func (_KyberNetwork *KyberNetworkCaller) GetNumReserves(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "getNumReserves")
	return *ret0, err
}

// GetNumReserves is a free data retrieval call binding the contract method 0xcfff25bb.
//
// Solidity: function getNumReserves() constant returns(uint256)
func (_KyberNetwork *KyberNetworkSession) GetNumReserves() (*big.Int, error) {
	return _KyberNetwork.Contract.GetNumReserves(&_KyberNetwork.CallOpts)
}

// GetNumReserves is a free data retrieval call binding the contract method 0xcfff25bb.
//
// Solidity: function getNumReserves() constant returns(uint256)
func (_KyberNetwork *KyberNetworkCallerSession) GetNumReserves() (*big.Int, error) {
	return _KyberNetwork.Contract.GetNumReserves(&_KyberNetwork.CallOpts)
}

// GetOperators is a free data retrieval call binding the contract method 0x27a099d8.
//
// Solidity: function getOperators() constant returns(address[])
func (_KyberNetwork *KyberNetworkCaller) GetOperators(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "getOperators")
	return *ret0, err
}

// GetOperators is a free data retrieval call binding the contract method 0x27a099d8.
//
// Solidity: function getOperators() constant returns(address[])
func (_KyberNetwork *KyberNetworkSession) GetOperators() ([]common.Address, error) {
	return _KyberNetwork.Contract.GetOperators(&_KyberNetwork.CallOpts)
}

// GetOperators is a free data retrieval call binding the contract method 0x27a099d8.
//
// Solidity: function getOperators() constant returns(address[])
func (_KyberNetwork *KyberNetworkCallerSession) GetOperators() ([]common.Address, error) {
	return _KyberNetwork.Contract.GetOperators(&_KyberNetwork.CallOpts)
}

// GetReserves is a free data retrieval call binding the contract method 0x0902f1ac.
//
// Solidity: function getReserves() constant returns(address[])
func (_KyberNetwork *KyberNetworkCaller) GetReserves(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "getReserves")
	return *ret0, err
}

// GetReserves is a free data retrieval call binding the contract method 0x0902f1ac.
//
// Solidity: function getReserves() constant returns(address[])
func (_KyberNetwork *KyberNetworkSession) GetReserves() ([]common.Address, error) {
	return _KyberNetwork.Contract.GetReserves(&_KyberNetwork.CallOpts)
}

// GetReserves is a free data retrieval call binding the contract method 0x0902f1ac.
//
// Solidity: function getReserves() constant returns(address[])
func (_KyberNetwork *KyberNetworkCallerSession) GetReserves() ([]common.Address, error) {
	return _KyberNetwork.Contract.GetReserves(&_KyberNetwork.CallOpts)
}

// GetUserCapInTokenWei is a free data retrieval call binding the contract method 0x8eaaeecf.
//
// Solidity: function getUserCapInTokenWei(address user, address token) constant returns(uint256)
func (_KyberNetwork *KyberNetworkCaller) GetUserCapInTokenWei(opts *bind.CallOpts, user common.Address, token common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "getUserCapInTokenWei", user, token)
	return *ret0, err
}

// GetUserCapInTokenWei is a free data retrieval call binding the contract method 0x8eaaeecf.
//
// Solidity: function getUserCapInTokenWei(address user, address token) constant returns(uint256)
func (_KyberNetwork *KyberNetworkSession) GetUserCapInTokenWei(user common.Address, token common.Address) (*big.Int, error) {
	return _KyberNetwork.Contract.GetUserCapInTokenWei(&_KyberNetwork.CallOpts, user, token)
}

// GetUserCapInTokenWei is a free data retrieval call binding the contract method 0x8eaaeecf.
//
// Solidity: function getUserCapInTokenWei(address user, address token) constant returns(uint256)
func (_KyberNetwork *KyberNetworkCallerSession) GetUserCapInTokenWei(user common.Address, token common.Address) (*big.Int, error) {
	return _KyberNetwork.Contract.GetUserCapInTokenWei(&_KyberNetwork.CallOpts, user, token)
}

// GetUserCapInWei is a free data retrieval call binding the contract method 0x6432679f.
//
// Solidity: function getUserCapInWei(address user) constant returns(uint256)
func (_KyberNetwork *KyberNetworkCaller) GetUserCapInWei(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "getUserCapInWei", user)
	return *ret0, err
}

// GetUserCapInWei is a free data retrieval call binding the contract method 0x6432679f.
//
// Solidity: function getUserCapInWei(address user) constant returns(uint256)
func (_KyberNetwork *KyberNetworkSession) GetUserCapInWei(user common.Address) (*big.Int, error) {
	return _KyberNetwork.Contract.GetUserCapInWei(&_KyberNetwork.CallOpts, user)
}

// GetUserCapInWei is a free data retrieval call binding the contract method 0x6432679f.
//
// Solidity: function getUserCapInWei(address user) constant returns(uint256)
func (_KyberNetwork *KyberNetworkCallerSession) GetUserCapInWei(user common.Address) (*big.Int, error) {
	return _KyberNetwork.Contract.GetUserCapInWei(&_KyberNetwork.CallOpts, user)
}

// Info is a free data retrieval call binding the contract method 0xb64a097e.
//
// Solidity: function info(bytes32 field) constant returns(uint256)
func (_KyberNetwork *KyberNetworkCaller) Info(opts *bind.CallOpts, field [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "info", field)
	return *ret0, err
}

// Info is a free data retrieval call binding the contract method 0xb64a097e.
//
// Solidity: function info(bytes32 field) constant returns(uint256)
func (_KyberNetwork *KyberNetworkSession) Info(field [32]byte) (*big.Int, error) {
	return _KyberNetwork.Contract.Info(&_KyberNetwork.CallOpts, field)
}

// Info is a free data retrieval call binding the contract method 0xb64a097e.
//
// Solidity: function info(bytes32 field) constant returns(uint256)
func (_KyberNetwork *KyberNetworkCallerSession) Info(field [32]byte) (*big.Int, error) {
	return _KyberNetwork.Contract.Info(&_KyberNetwork.CallOpts, field)
}

// InfoFields is a free data retrieval call binding the contract method 0x1610b59b.
//
// Solidity: function infoFields(bytes32 ) constant returns(uint256)
func (_KyberNetwork *KyberNetworkCaller) InfoFields(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "infoFields", arg0)
	return *ret0, err
}

// InfoFields is a free data retrieval call binding the contract method 0x1610b59b.
//
// Solidity: function infoFields(bytes32 ) constant returns(uint256)
func (_KyberNetwork *KyberNetworkSession) InfoFields(arg0 [32]byte) (*big.Int, error) {
	return _KyberNetwork.Contract.InfoFields(&_KyberNetwork.CallOpts, arg0)
}

// InfoFields is a free data retrieval call binding the contract method 0x1610b59b.
//
// Solidity: function infoFields(bytes32 ) constant returns(uint256)
func (_KyberNetwork *KyberNetworkCallerSession) InfoFields(arg0 [32]byte) (*big.Int, error) {
	return _KyberNetwork.Contract.InfoFields(&_KyberNetwork.CallOpts, arg0)
}

// IsEnabled is a free data retrieval call binding the contract method 0x6aa633b6.
//
// Solidity: function isEnabled() constant returns(bool)
func (_KyberNetwork *KyberNetworkCaller) IsEnabled(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "isEnabled")
	return *ret0, err
}

// IsEnabled is a free data retrieval call binding the contract method 0x6aa633b6.
//
// Solidity: function isEnabled() constant returns(bool)
func (_KyberNetwork *KyberNetworkSession) IsEnabled() (bool, error) {
	return _KyberNetwork.Contract.IsEnabled(&_KyberNetwork.CallOpts)
}

// IsEnabled is a free data retrieval call binding the contract method 0x6aa633b6.
//
// Solidity: function isEnabled() constant returns(bool)
func (_KyberNetwork *KyberNetworkCallerSession) IsEnabled() (bool, error) {
	return _KyberNetwork.Contract.IsEnabled(&_KyberNetwork.CallOpts)
}

// KyberNetworkProxyContract is a free data retrieval call binding the contract method 0x785250da.
//
// Solidity: function kyberNetworkProxyContract() constant returns(address)
func (_KyberNetwork *KyberNetworkCaller) KyberNetworkProxyContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "kyberNetworkProxyContract")
	return *ret0, err
}

// KyberNetworkProxyContract is a free data retrieval call binding the contract method 0x785250da.
//
// Solidity: function kyberNetworkProxyContract() constant returns(address)
func (_KyberNetwork *KyberNetworkSession) KyberNetworkProxyContract() (common.Address, error) {
	return _KyberNetwork.Contract.KyberNetworkProxyContract(&_KyberNetwork.CallOpts)
}

// KyberNetworkProxyContract is a free data retrieval call binding the contract method 0x785250da.
//
// Solidity: function kyberNetworkProxyContract() constant returns(address)
func (_KyberNetwork *KyberNetworkCallerSession) KyberNetworkProxyContract() (common.Address, error) {
	return _KyberNetwork.Contract.KyberNetworkProxyContract(&_KyberNetwork.CallOpts)
}

// MaxGasPrice is a free data retrieval call binding the contract method 0x3de39c11.
//
// Solidity: function maxGasPrice() constant returns(uint256)
func (_KyberNetwork *KyberNetworkCaller) MaxGasPrice(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "maxGasPrice")
	return *ret0, err
}

// MaxGasPrice is a free data retrieval call binding the contract method 0x3de39c11.
//
// Solidity: function maxGasPrice() constant returns(uint256)
func (_KyberNetwork *KyberNetworkSession) MaxGasPrice() (*big.Int, error) {
	return _KyberNetwork.Contract.MaxGasPrice(&_KyberNetwork.CallOpts)
}

// MaxGasPrice is a free data retrieval call binding the contract method 0x3de39c11.
//
// Solidity: function maxGasPrice() constant returns(uint256)
func (_KyberNetwork *KyberNetworkCallerSession) MaxGasPrice() (*big.Int, error) {
	return _KyberNetwork.Contract.MaxGasPrice(&_KyberNetwork.CallOpts)
}

// MaxGasPriceValue is a free data retrieval call binding the contract method 0xb2d111f6.
//
// Solidity: function maxGasPriceValue() constant returns(uint256)
func (_KyberNetwork *KyberNetworkCaller) MaxGasPriceValue(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "maxGasPriceValue")
	return *ret0, err
}

// MaxGasPriceValue is a free data retrieval call binding the contract method 0xb2d111f6.
//
// Solidity: function maxGasPriceValue() constant returns(uint256)
func (_KyberNetwork *KyberNetworkSession) MaxGasPriceValue() (*big.Int, error) {
	return _KyberNetwork.Contract.MaxGasPriceValue(&_KyberNetwork.CallOpts)
}

// MaxGasPriceValue is a free data retrieval call binding the contract method 0xb2d111f6.
//
// Solidity: function maxGasPriceValue() constant returns(uint256)
func (_KyberNetwork *KyberNetworkCallerSession) MaxGasPriceValue() (*big.Int, error) {
	return _KyberNetwork.Contract.MaxGasPriceValue(&_KyberNetwork.CallOpts)
}

// NegligibleRateDiff is a free data retrieval call binding the contract method 0x4cef5a5c.
//
// Solidity: function negligibleRateDiff() constant returns(uint256)
func (_KyberNetwork *KyberNetworkCaller) NegligibleRateDiff(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "negligibleRateDiff")
	return *ret0, err
}

// NegligibleRateDiff is a free data retrieval call binding the contract method 0x4cef5a5c.
//
// Solidity: function negligibleRateDiff() constant returns(uint256)
func (_KyberNetwork *KyberNetworkSession) NegligibleRateDiff() (*big.Int, error) {
	return _KyberNetwork.Contract.NegligibleRateDiff(&_KyberNetwork.CallOpts)
}

// NegligibleRateDiff is a free data retrieval call binding the contract method 0x4cef5a5c.
//
// Solidity: function negligibleRateDiff() constant returns(uint256)
func (_KyberNetwork *KyberNetworkCallerSession) NegligibleRateDiff() (*big.Int, error) {
	return _KyberNetwork.Contract.NegligibleRateDiff(&_KyberNetwork.CallOpts)
}

// PendingAdmin is a free data retrieval call binding the contract method 0x26782247.
//
// Solidity: function pendingAdmin() constant returns(address)
func (_KyberNetwork *KyberNetworkCaller) PendingAdmin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "pendingAdmin")
	return *ret0, err
}

// PendingAdmin is a free data retrieval call binding the contract method 0x26782247.
//
// Solidity: function pendingAdmin() constant returns(address)
func (_KyberNetwork *KyberNetworkSession) PendingAdmin() (common.Address, error) {
	return _KyberNetwork.Contract.PendingAdmin(&_KyberNetwork.CallOpts)
}

// PendingAdmin is a free data retrieval call binding the contract method 0x26782247.
//
// Solidity: function pendingAdmin() constant returns(address)
func (_KyberNetwork *KyberNetworkCallerSession) PendingAdmin() (common.Address, error) {
	return _KyberNetwork.Contract.PendingAdmin(&_KyberNetwork.CallOpts)
}

// ReserveType is a free data retrieval call binding the contract method 0x749f95bf.
//
// Solidity: function reserveType(address ) constant returns(uint8)
func (_KyberNetwork *KyberNetworkCaller) ReserveType(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "reserveType", arg0)
	return *ret0, err
}

// ReserveType is a free data retrieval call binding the contract method 0x749f95bf.
//
// Solidity: function reserveType(address ) constant returns(uint8)
func (_KyberNetwork *KyberNetworkSession) ReserveType(arg0 common.Address) (uint8, error) {
	return _KyberNetwork.Contract.ReserveType(&_KyberNetwork.CallOpts, arg0)
}

// ReserveType is a free data retrieval call binding the contract method 0x749f95bf.
//
// Solidity: function reserveType(address ) constant returns(uint8)
func (_KyberNetwork *KyberNetworkCallerSession) ReserveType(arg0 common.Address) (uint8, error) {
	return _KyberNetwork.Contract.ReserveType(&_KyberNetwork.CallOpts, arg0)
}

// Reserves is a free data retrieval call binding the contract method 0x8334278d.
//
// Solidity: function reserves(uint256 ) constant returns(address)
func (_KyberNetwork *KyberNetworkCaller) Reserves(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "reserves", arg0)
	return *ret0, err
}

// Reserves is a free data retrieval call binding the contract method 0x8334278d.
//
// Solidity: function reserves(uint256 ) constant returns(address)
func (_KyberNetwork *KyberNetworkSession) Reserves(arg0 *big.Int) (common.Address, error) {
	return _KyberNetwork.Contract.Reserves(&_KyberNetwork.CallOpts, arg0)
}

// Reserves is a free data retrieval call binding the contract method 0x8334278d.
//
// Solidity: function reserves(uint256 ) constant returns(address)
func (_KyberNetwork *KyberNetworkCallerSession) Reserves(arg0 *big.Int) (common.Address, error) {
	return _KyberNetwork.Contract.Reserves(&_KyberNetwork.CallOpts, arg0)
}

// ReservesPerTokenDest is a free data retrieval call binding the contract method 0x937e909b.
//
// Solidity: function reservesPerTokenDest(address , uint256 ) constant returns(address)
func (_KyberNetwork *KyberNetworkCaller) ReservesPerTokenDest(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "reservesPerTokenDest", arg0, arg1)
	return *ret0, err
}

// ReservesPerTokenDest is a free data retrieval call binding the contract method 0x937e909b.
//
// Solidity: function reservesPerTokenDest(address , uint256 ) constant returns(address)
func (_KyberNetwork *KyberNetworkSession) ReservesPerTokenDest(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _KyberNetwork.Contract.ReservesPerTokenDest(&_KyberNetwork.CallOpts, arg0, arg1)
}

// ReservesPerTokenDest is a free data retrieval call binding the contract method 0x937e909b.
//
// Solidity: function reservesPerTokenDest(address , uint256 ) constant returns(address)
func (_KyberNetwork *KyberNetworkCallerSession) ReservesPerTokenDest(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _KyberNetwork.Contract.ReservesPerTokenDest(&_KyberNetwork.CallOpts, arg0, arg1)
}

// ReservesPerTokenSrc is a free data retrieval call binding the contract method 0x2ab8fc2d.
//
// Solidity: function reservesPerTokenSrc(address , uint256 ) constant returns(address)
func (_KyberNetwork *KyberNetworkCaller) ReservesPerTokenSrc(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "reservesPerTokenSrc", arg0, arg1)
	return *ret0, err
}

// ReservesPerTokenSrc is a free data retrieval call binding the contract method 0x2ab8fc2d.
//
// Solidity: function reservesPerTokenSrc(address , uint256 ) constant returns(address)
func (_KyberNetwork *KyberNetworkSession) ReservesPerTokenSrc(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _KyberNetwork.Contract.ReservesPerTokenSrc(&_KyberNetwork.CallOpts, arg0, arg1)
}

// ReservesPerTokenSrc is a free data retrieval call binding the contract method 0x2ab8fc2d.
//
// Solidity: function reservesPerTokenSrc(address , uint256 ) constant returns(address)
func (_KyberNetwork *KyberNetworkCallerSession) ReservesPerTokenSrc(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _KyberNetwork.Contract.ReservesPerTokenSrc(&_KyberNetwork.CallOpts, arg0, arg1)
}

// SearchBestRate is a free data retrieval call binding the contract method 0x0c235d96.
//
// Solidity: function searchBestRate(address src, address dest, uint256 srcAmount, bool usePermissionless) constant returns(address, uint256)
func (_KyberNetwork *KyberNetworkCaller) SearchBestRate(opts *bind.CallOpts, src common.Address, dest common.Address, srcAmount *big.Int, usePermissionless bool) (common.Address, *big.Int, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _KyberNetwork.contract.Call(opts, out, "searchBestRate", src, dest, srcAmount, usePermissionless)
	return *ret0, *ret1, err
}

// SearchBestRate is a free data retrieval call binding the contract method 0x0c235d96.
//
// Solidity: function searchBestRate(address src, address dest, uint256 srcAmount, bool usePermissionless) constant returns(address, uint256)
func (_KyberNetwork *KyberNetworkSession) SearchBestRate(src common.Address, dest common.Address, srcAmount *big.Int, usePermissionless bool) (common.Address, *big.Int, error) {
	return _KyberNetwork.Contract.SearchBestRate(&_KyberNetwork.CallOpts, src, dest, srcAmount, usePermissionless)
}

// SearchBestRate is a free data retrieval call binding the contract method 0x0c235d96.
//
// Solidity: function searchBestRate(address src, address dest, uint256 srcAmount, bool usePermissionless) constant returns(address, uint256)
func (_KyberNetwork *KyberNetworkCallerSession) SearchBestRate(src common.Address, dest common.Address, srcAmount *big.Int, usePermissionless bool) (common.Address, *big.Int, error) {
	return _KyberNetwork.Contract.SearchBestRate(&_KyberNetwork.CallOpts, src, dest, srcAmount, usePermissionless)
}

// WhiteListContract is a free data retrieval call binding the contract method 0x5ed5ea28.
//
// Solidity: function whiteListContract() constant returns(address)
func (_KyberNetwork *KyberNetworkCaller) WhiteListContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KyberNetwork.contract.Call(opts, out, "whiteListContract")
	return *ret0, err
}

// WhiteListContract is a free data retrieval call binding the contract method 0x5ed5ea28.
//
// Solidity: function whiteListContract() constant returns(address)
func (_KyberNetwork *KyberNetworkSession) WhiteListContract() (common.Address, error) {
	return _KyberNetwork.Contract.WhiteListContract(&_KyberNetwork.CallOpts)
}

// WhiteListContract is a free data retrieval call binding the contract method 0x5ed5ea28.
//
// Solidity: function whiteListContract() constant returns(address)
func (_KyberNetwork *KyberNetworkCallerSession) WhiteListContract() (common.Address, error) {
	return _KyberNetwork.Contract.WhiteListContract(&_KyberNetwork.CallOpts)
}

// AddAlerter is a paid mutator transaction binding the contract method 0x408ee7fe.
//
// Solidity: function addAlerter(address newAlerter) returns()
func (_KyberNetwork *KyberNetworkTransactor) AddAlerter(opts *bind.TransactOpts, newAlerter common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "addAlerter", newAlerter)
}

// AddAlerter is a paid mutator transaction binding the contract method 0x408ee7fe.
//
// Solidity: function addAlerter(address newAlerter) returns()
func (_KyberNetwork *KyberNetworkSession) AddAlerter(newAlerter common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.AddAlerter(&_KyberNetwork.TransactOpts, newAlerter)
}

// AddAlerter is a paid mutator transaction binding the contract method 0x408ee7fe.
//
// Solidity: function addAlerter(address newAlerter) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) AddAlerter(newAlerter common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.AddAlerter(&_KyberNetwork.TransactOpts, newAlerter)
}

// AddOperator is a paid mutator transaction binding the contract method 0x9870d7fe.
//
// Solidity: function addOperator(address newOperator) returns()
func (_KyberNetwork *KyberNetworkTransactor) AddOperator(opts *bind.TransactOpts, newOperator common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "addOperator", newOperator)
}

// AddOperator is a paid mutator transaction binding the contract method 0x9870d7fe.
//
// Solidity: function addOperator(address newOperator) returns()
func (_KyberNetwork *KyberNetworkSession) AddOperator(newOperator common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.AddOperator(&_KyberNetwork.TransactOpts, newOperator)
}

// AddOperator is a paid mutator transaction binding the contract method 0x9870d7fe.
//
// Solidity: function addOperator(address newOperator) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) AddOperator(newOperator common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.AddOperator(&_KyberNetwork.TransactOpts, newOperator)
}

// AddReserve is a paid mutator transaction binding the contract method 0xa0d7bb1b.
//
// Solidity: function addReserve(address reserve, bool isPermissionless) returns(bool)
func (_KyberNetwork *KyberNetworkTransactor) AddReserve(opts *bind.TransactOpts, reserve common.Address, isPermissionless bool) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "addReserve", reserve, isPermissionless)
}

// AddReserve is a paid mutator transaction binding the contract method 0xa0d7bb1b.
//
// Solidity: function addReserve(address reserve, bool isPermissionless) returns(bool)
func (_KyberNetwork *KyberNetworkSession) AddReserve(reserve common.Address, isPermissionless bool) (*types.Transaction, error) {
	return _KyberNetwork.Contract.AddReserve(&_KyberNetwork.TransactOpts, reserve, isPermissionless)
}

// AddReserve is a paid mutator transaction binding the contract method 0xa0d7bb1b.
//
// Solidity: function addReserve(address reserve, bool isPermissionless) returns(bool)
func (_KyberNetwork *KyberNetworkTransactorSession) AddReserve(reserve common.Address, isPermissionless bool) (*types.Transaction, error) {
	return _KyberNetwork.Contract.AddReserve(&_KyberNetwork.TransactOpts, reserve, isPermissionless)
}

// ClaimAdmin is a paid mutator transaction binding the contract method 0x77f50f97.
//
// Solidity: function claimAdmin() returns()
func (_KyberNetwork *KyberNetworkTransactor) ClaimAdmin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "claimAdmin")
}

// ClaimAdmin is a paid mutator transaction binding the contract method 0x77f50f97.
//
// Solidity: function claimAdmin() returns()
func (_KyberNetwork *KyberNetworkSession) ClaimAdmin() (*types.Transaction, error) {
	return _KyberNetwork.Contract.ClaimAdmin(&_KyberNetwork.TransactOpts)
}

// ClaimAdmin is a paid mutator transaction binding the contract method 0x77f50f97.
//
// Solidity: function claimAdmin() returns()
func (_KyberNetwork *KyberNetworkTransactorSession) ClaimAdmin() (*types.Transaction, error) {
	return _KyberNetwork.Contract.ClaimAdmin(&_KyberNetwork.TransactOpts)
}

// ListPairForReserve is a paid mutator transaction binding the contract method 0xe02584bf.
//
// Solidity: function listPairForReserve(address reserve, address token, bool ethToToken, bool tokenToEth, bool add) returns(bool)
func (_KyberNetwork *KyberNetworkTransactor) ListPairForReserve(opts *bind.TransactOpts, reserve common.Address, token common.Address, ethToToken bool, tokenToEth bool, add bool) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "listPairForReserve", reserve, token, ethToToken, tokenToEth, add)
}

// ListPairForReserve is a paid mutator transaction binding the contract method 0xe02584bf.
//
// Solidity: function listPairForReserve(address reserve, address token, bool ethToToken, bool tokenToEth, bool add) returns(bool)
func (_KyberNetwork *KyberNetworkSession) ListPairForReserve(reserve common.Address, token common.Address, ethToToken bool, tokenToEth bool, add bool) (*types.Transaction, error) {
	return _KyberNetwork.Contract.ListPairForReserve(&_KyberNetwork.TransactOpts, reserve, token, ethToToken, tokenToEth, add)
}

// ListPairForReserve is a paid mutator transaction binding the contract method 0xe02584bf.
//
// Solidity: function listPairForReserve(address reserve, address token, bool ethToToken, bool tokenToEth, bool add) returns(bool)
func (_KyberNetwork *KyberNetworkTransactorSession) ListPairForReserve(reserve common.Address, token common.Address, ethToToken bool, tokenToEth bool, add bool) (*types.Transaction, error) {
	return _KyberNetwork.Contract.ListPairForReserve(&_KyberNetwork.TransactOpts, reserve, token, ethToToken, tokenToEth, add)
}

// RemoveAlerter is a paid mutator transaction binding the contract method 0x01a12fd3.
//
// Solidity: function removeAlerter(address alerter) returns()
func (_KyberNetwork *KyberNetworkTransactor) RemoveAlerter(opts *bind.TransactOpts, alerter common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "removeAlerter", alerter)
}

// RemoveAlerter is a paid mutator transaction binding the contract method 0x01a12fd3.
//
// Solidity: function removeAlerter(address alerter) returns()
func (_KyberNetwork *KyberNetworkSession) RemoveAlerter(alerter common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.RemoveAlerter(&_KyberNetwork.TransactOpts, alerter)
}

// RemoveAlerter is a paid mutator transaction binding the contract method 0x01a12fd3.
//
// Solidity: function removeAlerter(address alerter) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) RemoveAlerter(alerter common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.RemoveAlerter(&_KyberNetwork.TransactOpts, alerter)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address operator) returns()
func (_KyberNetwork *KyberNetworkTransactor) RemoveOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "removeOperator", operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address operator) returns()
func (_KyberNetwork *KyberNetworkSession) RemoveOperator(operator common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.RemoveOperator(&_KyberNetwork.TransactOpts, operator)
}

// RemoveOperator is a paid mutator transaction binding the contract method 0xac8a584a.
//
// Solidity: function removeOperator(address operator) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) RemoveOperator(operator common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.RemoveOperator(&_KyberNetwork.TransactOpts, operator)
}

// RemoveReserve is a paid mutator transaction binding the contract method 0x249715b3.
//
// Solidity: function removeReserve(address reserve, uint256 index) returns(bool)
func (_KyberNetwork *KyberNetworkTransactor) RemoveReserve(opts *bind.TransactOpts, reserve common.Address, index *big.Int) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "removeReserve", reserve, index)
}

// RemoveReserve is a paid mutator transaction binding the contract method 0x249715b3.
//
// Solidity: function removeReserve(address reserve, uint256 index) returns(bool)
func (_KyberNetwork *KyberNetworkSession) RemoveReserve(reserve common.Address, index *big.Int) (*types.Transaction, error) {
	return _KyberNetwork.Contract.RemoveReserve(&_KyberNetwork.TransactOpts, reserve, index)
}

// RemoveReserve is a paid mutator transaction binding the contract method 0x249715b3.
//
// Solidity: function removeReserve(address reserve, uint256 index) returns(bool)
func (_KyberNetwork *KyberNetworkTransactorSession) RemoveReserve(reserve common.Address, index *big.Int) (*types.Transaction, error) {
	return _KyberNetwork.Contract.RemoveReserve(&_KyberNetwork.TransactOpts, reserve, index)
}

// SetEnable is a paid mutator transaction binding the contract method 0x7726bed3.
//
// Solidity: function setEnable(bool _enable) returns()
func (_KyberNetwork *KyberNetworkTransactor) SetEnable(opts *bind.TransactOpts, _enable bool) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "setEnable", _enable)
}

// SetEnable is a paid mutator transaction binding the contract method 0x7726bed3.
//
// Solidity: function setEnable(bool _enable) returns()
func (_KyberNetwork *KyberNetworkSession) SetEnable(_enable bool) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetEnable(&_KyberNetwork.TransactOpts, _enable)
}

// SetEnable is a paid mutator transaction binding the contract method 0x7726bed3.
//
// Solidity: function setEnable(bool _enable) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) SetEnable(_enable bool) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetEnable(&_KyberNetwork.TransactOpts, _enable)
}

// SetExpectedRate is a paid mutator transaction binding the contract method 0x5d270cdc.
//
// Solidity: function setExpectedRate(address expectedRate) returns()
func (_KyberNetwork *KyberNetworkTransactor) SetExpectedRate(opts *bind.TransactOpts, expectedRate common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "setExpectedRate", expectedRate)
}

// SetExpectedRate is a paid mutator transaction binding the contract method 0x5d270cdc.
//
// Solidity: function setExpectedRate(address expectedRate) returns()
func (_KyberNetwork *KyberNetworkSession) SetExpectedRate(expectedRate common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetExpectedRate(&_KyberNetwork.TransactOpts, expectedRate)
}

// SetExpectedRate is a paid mutator transaction binding the contract method 0x5d270cdc.
//
// Solidity: function setExpectedRate(address expectedRate) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) SetExpectedRate(expectedRate common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetExpectedRate(&_KyberNetwork.TransactOpts, expectedRate)
}

// SetFeeBurner is a paid mutator transaction binding the contract method 0x1a79464e.
//
// Solidity: function setFeeBurner(address feeBurner) returns()
func (_KyberNetwork *KyberNetworkTransactor) SetFeeBurner(opts *bind.TransactOpts, feeBurner common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "setFeeBurner", feeBurner)
}

// SetFeeBurner is a paid mutator transaction binding the contract method 0x1a79464e.
//
// Solidity: function setFeeBurner(address feeBurner) returns()
func (_KyberNetwork *KyberNetworkSession) SetFeeBurner(feeBurner common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetFeeBurner(&_KyberNetwork.TransactOpts, feeBurner)
}

// SetFeeBurner is a paid mutator transaction binding the contract method 0x1a79464e.
//
// Solidity: function setFeeBurner(address feeBurner) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) SetFeeBurner(feeBurner common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetFeeBurner(&_KyberNetwork.TransactOpts, feeBurner)
}

// SetInfo is a paid mutator transaction binding the contract method 0x5f65d703.
//
// Solidity: function setInfo(bytes32 field, uint256 value) returns()
func (_KyberNetwork *KyberNetworkTransactor) SetInfo(opts *bind.TransactOpts, field [32]byte, value *big.Int) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "setInfo", field, value)
}

// SetInfo is a paid mutator transaction binding the contract method 0x5f65d703.
//
// Solidity: function setInfo(bytes32 field, uint256 value) returns()
func (_KyberNetwork *KyberNetworkSession) SetInfo(field [32]byte, value *big.Int) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetInfo(&_KyberNetwork.TransactOpts, field, value)
}

// SetInfo is a paid mutator transaction binding the contract method 0x5f65d703.
//
// Solidity: function setInfo(bytes32 field, uint256 value) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) SetInfo(field [32]byte, value *big.Int) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetInfo(&_KyberNetwork.TransactOpts, field, value)
}

// SetKyberProxy is a paid mutator transaction binding the contract method 0xc6c3f3f9.
//
// Solidity: function setKyberProxy(address networkProxy) returns()
func (_KyberNetwork *KyberNetworkTransactor) SetKyberProxy(opts *bind.TransactOpts, networkProxy common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "setKyberProxy", networkProxy)
}

// SetKyberProxy is a paid mutator transaction binding the contract method 0xc6c3f3f9.
//
// Solidity: function setKyberProxy(address networkProxy) returns()
func (_KyberNetwork *KyberNetworkSession) SetKyberProxy(networkProxy common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetKyberProxy(&_KyberNetwork.TransactOpts, networkProxy)
}

// SetKyberProxy is a paid mutator transaction binding the contract method 0xc6c3f3f9.
//
// Solidity: function setKyberProxy(address networkProxy) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) SetKyberProxy(networkProxy common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetKyberProxy(&_KyberNetwork.TransactOpts, networkProxy)
}

// SetParams is a paid mutator transaction binding the contract method 0xc0324c77.
//
// Solidity: function setParams(uint256 _maxGasPrice, uint256 _negligibleRateDiff) returns()
func (_KyberNetwork *KyberNetworkTransactor) SetParams(opts *bind.TransactOpts, _maxGasPrice *big.Int, _negligibleRateDiff *big.Int) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "setParams", _maxGasPrice, _negligibleRateDiff)
}

// SetParams is a paid mutator transaction binding the contract method 0xc0324c77.
//
// Solidity: function setParams(uint256 _maxGasPrice, uint256 _negligibleRateDiff) returns()
func (_KyberNetwork *KyberNetworkSession) SetParams(_maxGasPrice *big.Int, _negligibleRateDiff *big.Int) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetParams(&_KyberNetwork.TransactOpts, _maxGasPrice, _negligibleRateDiff)
}

// SetParams is a paid mutator transaction binding the contract method 0xc0324c77.
//
// Solidity: function setParams(uint256 _maxGasPrice, uint256 _negligibleRateDiff) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) SetParams(_maxGasPrice *big.Int, _negligibleRateDiff *big.Int) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetParams(&_KyberNetwork.TransactOpts, _maxGasPrice, _negligibleRateDiff)
}

// SetWhiteList is a paid mutator transaction binding the contract method 0x39e899ee.
//
// Solidity: function setWhiteList(address whiteList) returns()
func (_KyberNetwork *KyberNetworkTransactor) SetWhiteList(opts *bind.TransactOpts, whiteList common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "setWhiteList", whiteList)
}

// SetWhiteList is a paid mutator transaction binding the contract method 0x39e899ee.
//
// Solidity: function setWhiteList(address whiteList) returns()
func (_KyberNetwork *KyberNetworkSession) SetWhiteList(whiteList common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetWhiteList(&_KyberNetwork.TransactOpts, whiteList)
}

// SetWhiteList is a paid mutator transaction binding the contract method 0x39e899ee.
//
// Solidity: function setWhiteList(address whiteList) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) SetWhiteList(whiteList common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.SetWhiteList(&_KyberNetwork.TransactOpts, whiteList)
}

// TradeWithHint is a paid mutator transaction binding the contract method 0x088322ef.
//
// Solidity: function tradeWithHint(address trader, address src, uint256 srcAmount, address dest, address destAddress, uint256 maxDestAmount, uint256 minConversionRate, address walletId, bytes hint) returns(uint256)
func (_KyberNetwork *KyberNetworkTransactor) TradeWithHint(opts *bind.TransactOpts, trader common.Address, src common.Address, srcAmount *big.Int, dest common.Address, destAddress common.Address, maxDestAmount *big.Int, minConversionRate *big.Int, walletId common.Address, hint []byte) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "tradeWithHint", trader, src, srcAmount, dest, destAddress, maxDestAmount, minConversionRate, walletId, hint)
}

// TradeWithHint is a paid mutator transaction binding the contract method 0x088322ef.
//
// Solidity: function tradeWithHint(address trader, address src, uint256 srcAmount, address dest, address destAddress, uint256 maxDestAmount, uint256 minConversionRate, address walletId, bytes hint) returns(uint256)
func (_KyberNetwork *KyberNetworkSession) TradeWithHint(trader common.Address, src common.Address, srcAmount *big.Int, dest common.Address, destAddress common.Address, maxDestAmount *big.Int, minConversionRate *big.Int, walletId common.Address, hint []byte) (*types.Transaction, error) {
	return _KyberNetwork.Contract.TradeWithHint(&_KyberNetwork.TransactOpts, trader, src, srcAmount, dest, destAddress, maxDestAmount, minConversionRate, walletId, hint)
}

// TradeWithHint is a paid mutator transaction binding the contract method 0x088322ef.
//
// Solidity: function tradeWithHint(address trader, address src, uint256 srcAmount, address dest, address destAddress, uint256 maxDestAmount, uint256 minConversionRate, address walletId, bytes hint) returns(uint256)
func (_KyberNetwork *KyberNetworkTransactorSession) TradeWithHint(trader common.Address, src common.Address, srcAmount *big.Int, dest common.Address, destAddress common.Address, maxDestAmount *big.Int, minConversionRate *big.Int, walletId common.Address, hint []byte) (*types.Transaction, error) {
	return _KyberNetwork.Contract.TradeWithHint(&_KyberNetwork.TransactOpts, trader, src, srcAmount, dest, destAddress, maxDestAmount, minConversionRate, walletId, hint)
}

// TransferAdmin is a paid mutator transaction binding the contract method 0x75829def.
//
// Solidity: function transferAdmin(address newAdmin) returns()
func (_KyberNetwork *KyberNetworkTransactor) TransferAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "transferAdmin", newAdmin)
}

// TransferAdmin is a paid mutator transaction binding the contract method 0x75829def.
//
// Solidity: function transferAdmin(address newAdmin) returns()
func (_KyberNetwork *KyberNetworkSession) TransferAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.TransferAdmin(&_KyberNetwork.TransactOpts, newAdmin)
}

// TransferAdmin is a paid mutator transaction binding the contract method 0x75829def.
//
// Solidity: function transferAdmin(address newAdmin) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) TransferAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.TransferAdmin(&_KyberNetwork.TransactOpts, newAdmin)
}

// TransferAdminQuickly is a paid mutator transaction binding the contract method 0x7acc8678.
//
// Solidity: function transferAdminQuickly(address newAdmin) returns()
func (_KyberNetwork *KyberNetworkTransactor) TransferAdminQuickly(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "transferAdminQuickly", newAdmin)
}

// TransferAdminQuickly is a paid mutator transaction binding the contract method 0x7acc8678.
//
// Solidity: function transferAdminQuickly(address newAdmin) returns()
func (_KyberNetwork *KyberNetworkSession) TransferAdminQuickly(newAdmin common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.TransferAdminQuickly(&_KyberNetwork.TransactOpts, newAdmin)
}

// TransferAdminQuickly is a paid mutator transaction binding the contract method 0x7acc8678.
//
// Solidity: function transferAdminQuickly(address newAdmin) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) TransferAdminQuickly(newAdmin common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.TransferAdminQuickly(&_KyberNetwork.TransactOpts, newAdmin)
}

// WithdrawEther is a paid mutator transaction binding the contract method 0xce56c454.
//
// Solidity: function withdrawEther(uint256 amount, address sendTo) returns()
func (_KyberNetwork *KyberNetworkTransactor) WithdrawEther(opts *bind.TransactOpts, amount *big.Int, sendTo common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "withdrawEther", amount, sendTo)
}

// WithdrawEther is a paid mutator transaction binding the contract method 0xce56c454.
//
// Solidity: function withdrawEther(uint256 amount, address sendTo) returns()
func (_KyberNetwork *KyberNetworkSession) WithdrawEther(amount *big.Int, sendTo common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.WithdrawEther(&_KyberNetwork.TransactOpts, amount, sendTo)
}

// WithdrawEther is a paid mutator transaction binding the contract method 0xce56c454.
//
// Solidity: function withdrawEther(uint256 amount, address sendTo) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) WithdrawEther(amount *big.Int, sendTo common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.WithdrawEther(&_KyberNetwork.TransactOpts, amount, sendTo)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0x3ccdbb28.
//
// Solidity: function withdrawToken(address token, uint256 amount, address sendTo) returns()
func (_KyberNetwork *KyberNetworkTransactor) WithdrawToken(opts *bind.TransactOpts, token common.Address, amount *big.Int, sendTo common.Address) (*types.Transaction, error) {
	return _KyberNetwork.contract.Transact(opts, "withdrawToken", token, amount, sendTo)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0x3ccdbb28.
//
// Solidity: function withdrawToken(address token, uint256 amount, address sendTo) returns()
func (_KyberNetwork *KyberNetworkSession) WithdrawToken(token common.Address, amount *big.Int, sendTo common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.WithdrawToken(&_KyberNetwork.TransactOpts, token, amount, sendTo)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0x3ccdbb28.
//
// Solidity: function withdrawToken(address token, uint256 amount, address sendTo) returns()
func (_KyberNetwork *KyberNetworkTransactorSession) WithdrawToken(token common.Address, amount *big.Int, sendTo common.Address) (*types.Transaction, error) {
	return _KyberNetwork.Contract.WithdrawToken(&_KyberNetwork.TransactOpts, token, amount, sendTo)
}

// KyberNetworkAddReserveToNetworkIterator is returned from FilterAddReserveToNetwork and is used to iterate over the raw logs and unpacked data for AddReserveToNetwork events raised by the KyberNetwork contract.
type KyberNetworkAddReserveToNetworkIterator struct {
	Event *KyberNetworkAddReserveToNetwork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkAddReserveToNetworkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkAddReserveToNetwork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkAddReserveToNetwork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkAddReserveToNetworkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkAddReserveToNetworkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkAddReserveToNetwork represents a AddReserveToNetwork event raised by the KyberNetwork contract.
type KyberNetworkAddReserveToNetwork struct {
	Reserve          common.Address
	Add              bool
	IsPermissionless bool
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAddReserveToNetwork is a free log retrieval operation binding the contract event 0x4d99ce7cd99dfb1a7692e50c2e9b8d84c1b420f1d439ca8c4de0171acac11907.
//
// Solidity: event AddReserveToNetwork(address indexed reserve, bool add, bool isPermissionless)
func (_KyberNetwork *KyberNetworkFilterer) FilterAddReserveToNetwork(opts *bind.FilterOpts, reserve []common.Address) (*KyberNetworkAddReserveToNetworkIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "AddReserveToNetwork", reserveRule)
	if err != nil {
		return nil, err
	}
	return &KyberNetworkAddReserveToNetworkIterator{contract: _KyberNetwork.contract, event: "AddReserveToNetwork", logs: logs, sub: sub}, nil
}

// WatchAddReserveToNetwork is a free log subscription operation binding the contract event 0x4d99ce7cd99dfb1a7692e50c2e9b8d84c1b420f1d439ca8c4de0171acac11907.
//
// Solidity: event AddReserveToNetwork(address indexed reserve, bool add, bool isPermissionless)
func (_KyberNetwork *KyberNetworkFilterer) WatchAddReserveToNetwork(opts *bind.WatchOpts, sink chan<- *KyberNetworkAddReserveToNetwork, reserve []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "AddReserveToNetwork", reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkAddReserveToNetwork)
				if err := _KyberNetwork.contract.UnpackLog(event, "AddReserveToNetwork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddReserveToNetwork is a log parse operation binding the contract event 0x4d99ce7cd99dfb1a7692e50c2e9b8d84c1b420f1d439ca8c4de0171acac11907.
//
// Solidity: event AddReserveToNetwork(address indexed reserve, bool add, bool isPermissionless)
func (_KyberNetwork *KyberNetworkFilterer) ParseAddReserveToNetwork(log types.Log) (*KyberNetworkAddReserveToNetwork, error) {
	event := new(KyberNetworkAddReserveToNetwork)
	if err := _KyberNetwork.contract.UnpackLog(event, "AddReserveToNetwork", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkAdminClaimedIterator is returned from FilterAdminClaimed and is used to iterate over the raw logs and unpacked data for AdminClaimed events raised by the KyberNetwork contract.
type KyberNetworkAdminClaimedIterator struct {
	Event *KyberNetworkAdminClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkAdminClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkAdminClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkAdminClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkAdminClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkAdminClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkAdminClaimed represents a AdminClaimed event raised by the KyberNetwork contract.
type KyberNetworkAdminClaimed struct {
	NewAdmin      common.Address
	PreviousAdmin common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminClaimed is a free log retrieval operation binding the contract event 0x65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed.
//
// Solidity: event AdminClaimed(address newAdmin, address previousAdmin)
func (_KyberNetwork *KyberNetworkFilterer) FilterAdminClaimed(opts *bind.FilterOpts) (*KyberNetworkAdminClaimedIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "AdminClaimed")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkAdminClaimedIterator{contract: _KyberNetwork.contract, event: "AdminClaimed", logs: logs, sub: sub}, nil
}

// WatchAdminClaimed is a free log subscription operation binding the contract event 0x65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed.
//
// Solidity: event AdminClaimed(address newAdmin, address previousAdmin)
func (_KyberNetwork *KyberNetworkFilterer) WatchAdminClaimed(opts *bind.WatchOpts, sink chan<- *KyberNetworkAdminClaimed) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "AdminClaimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkAdminClaimed)
				if err := _KyberNetwork.contract.UnpackLog(event, "AdminClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminClaimed is a log parse operation binding the contract event 0x65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed.
//
// Solidity: event AdminClaimed(address newAdmin, address previousAdmin)
func (_KyberNetwork *KyberNetworkFilterer) ParseAdminClaimed(log types.Log) (*KyberNetworkAdminClaimed, error) {
	event := new(KyberNetworkAdminClaimed)
	if err := _KyberNetwork.contract.UnpackLog(event, "AdminClaimed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkAlerterAddedIterator is returned from FilterAlerterAdded and is used to iterate over the raw logs and unpacked data for AlerterAdded events raised by the KyberNetwork contract.
type KyberNetworkAlerterAddedIterator struct {
	Event *KyberNetworkAlerterAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkAlerterAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkAlerterAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkAlerterAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkAlerterAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkAlerterAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkAlerterAdded represents a AlerterAdded event raised by the KyberNetwork contract.
type KyberNetworkAlerterAdded struct {
	NewAlerter common.Address
	IsAdd      bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAlerterAdded is a free log retrieval operation binding the contract event 0x5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762.
//
// Solidity: event AlerterAdded(address newAlerter, bool isAdd)
func (_KyberNetwork *KyberNetworkFilterer) FilterAlerterAdded(opts *bind.FilterOpts) (*KyberNetworkAlerterAddedIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "AlerterAdded")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkAlerterAddedIterator{contract: _KyberNetwork.contract, event: "AlerterAdded", logs: logs, sub: sub}, nil
}

// WatchAlerterAdded is a free log subscription operation binding the contract event 0x5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762.
//
// Solidity: event AlerterAdded(address newAlerter, bool isAdd)
func (_KyberNetwork *KyberNetworkFilterer) WatchAlerterAdded(opts *bind.WatchOpts, sink chan<- *KyberNetworkAlerterAdded) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "AlerterAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkAlerterAdded)
				if err := _KyberNetwork.contract.UnpackLog(event, "AlerterAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlerterAdded is a log parse operation binding the contract event 0x5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762.
//
// Solidity: event AlerterAdded(address newAlerter, bool isAdd)
func (_KyberNetwork *KyberNetworkFilterer) ParseAlerterAdded(log types.Log) (*KyberNetworkAlerterAdded, error) {
	event := new(KyberNetworkAlerterAdded)
	if err := _KyberNetwork.contract.UnpackLog(event, "AlerterAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkEtherReceivalIterator is returned from FilterEtherReceival and is used to iterate over the raw logs and unpacked data for EtherReceival events raised by the KyberNetwork contract.
type KyberNetworkEtherReceivalIterator struct {
	Event *KyberNetworkEtherReceival // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkEtherReceivalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkEtherReceival)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkEtherReceival)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkEtherReceivalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkEtherReceivalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkEtherReceival represents a EtherReceival event raised by the KyberNetwork contract.
type KyberNetworkEtherReceival struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEtherReceival is a free log retrieval operation binding the contract event 0x75f33ed68675112c77094e7c5b073890598be1d23e27cd7f6907b4a7d98ac619.
//
// Solidity: event EtherReceival(address indexed sender, uint256 amount)
func (_KyberNetwork *KyberNetworkFilterer) FilterEtherReceival(opts *bind.FilterOpts, sender []common.Address) (*KyberNetworkEtherReceivalIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "EtherReceival", senderRule)
	if err != nil {
		return nil, err
	}
	return &KyberNetworkEtherReceivalIterator{contract: _KyberNetwork.contract, event: "EtherReceival", logs: logs, sub: sub}, nil
}

// WatchEtherReceival is a free log subscription operation binding the contract event 0x75f33ed68675112c77094e7c5b073890598be1d23e27cd7f6907b4a7d98ac619.
//
// Solidity: event EtherReceival(address indexed sender, uint256 amount)
func (_KyberNetwork *KyberNetworkFilterer) WatchEtherReceival(opts *bind.WatchOpts, sink chan<- *KyberNetworkEtherReceival, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "EtherReceival", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkEtherReceival)
				if err := _KyberNetwork.contract.UnpackLog(event, "EtherReceival", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEtherReceival is a log parse operation binding the contract event 0x75f33ed68675112c77094e7c5b073890598be1d23e27cd7f6907b4a7d98ac619.
//
// Solidity: event EtherReceival(address indexed sender, uint256 amount)
func (_KyberNetwork *KyberNetworkFilterer) ParseEtherReceival(log types.Log) (*KyberNetworkEtherReceival, error) {
	event := new(KyberNetworkEtherReceival)
	if err := _KyberNetwork.contract.UnpackLog(event, "EtherReceival", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkEtherWithdrawIterator is returned from FilterEtherWithdraw and is used to iterate over the raw logs and unpacked data for EtherWithdraw events raised by the KyberNetwork contract.
type KyberNetworkEtherWithdrawIterator struct {
	Event *KyberNetworkEtherWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkEtherWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkEtherWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkEtherWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkEtherWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkEtherWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkEtherWithdraw represents a EtherWithdraw event raised by the KyberNetwork contract.
type KyberNetworkEtherWithdraw struct {
	Amount *big.Int
	SendTo common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEtherWithdraw is a free log retrieval operation binding the contract event 0xec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de.
//
// Solidity: event EtherWithdraw(uint256 amount, address sendTo)
func (_KyberNetwork *KyberNetworkFilterer) FilterEtherWithdraw(opts *bind.FilterOpts) (*KyberNetworkEtherWithdrawIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "EtherWithdraw")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkEtherWithdrawIterator{contract: _KyberNetwork.contract, event: "EtherWithdraw", logs: logs, sub: sub}, nil
}

// WatchEtherWithdraw is a free log subscription operation binding the contract event 0xec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de.
//
// Solidity: event EtherWithdraw(uint256 amount, address sendTo)
func (_KyberNetwork *KyberNetworkFilterer) WatchEtherWithdraw(opts *bind.WatchOpts, sink chan<- *KyberNetworkEtherWithdraw) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "EtherWithdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkEtherWithdraw)
				if err := _KyberNetwork.contract.UnpackLog(event, "EtherWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEtherWithdraw is a log parse operation binding the contract event 0xec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de.
//
// Solidity: event EtherWithdraw(uint256 amount, address sendTo)
func (_KyberNetwork *KyberNetworkFilterer) ParseEtherWithdraw(log types.Log) (*KyberNetworkEtherWithdraw, error) {
	event := new(KyberNetworkEtherWithdraw)
	if err := _KyberNetwork.contract.UnpackLog(event, "EtherWithdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkExpectedRateContractSetIterator is returned from FilterExpectedRateContractSet and is used to iterate over the raw logs and unpacked data for ExpectedRateContractSet events raised by the KyberNetwork contract.
type KyberNetworkExpectedRateContractSetIterator struct {
	Event *KyberNetworkExpectedRateContractSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkExpectedRateContractSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkExpectedRateContractSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkExpectedRateContractSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkExpectedRateContractSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkExpectedRateContractSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkExpectedRateContractSet represents a ExpectedRateContractSet event raised by the KyberNetwork contract.
type KyberNetworkExpectedRateContractSet struct {
	NewContract     common.Address
	CurrentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterExpectedRateContractSet is a free log retrieval operation binding the contract event 0xa2446ac1a8b17e6d40c1cafcbf076b945fdc5f897c970e6e19915760def475ad.
//
// Solidity: event ExpectedRateContractSet(address newContract, address currentContract)
func (_KyberNetwork *KyberNetworkFilterer) FilterExpectedRateContractSet(opts *bind.FilterOpts) (*KyberNetworkExpectedRateContractSetIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "ExpectedRateContractSet")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkExpectedRateContractSetIterator{contract: _KyberNetwork.contract, event: "ExpectedRateContractSet", logs: logs, sub: sub}, nil
}

// WatchExpectedRateContractSet is a free log subscription operation binding the contract event 0xa2446ac1a8b17e6d40c1cafcbf076b945fdc5f897c970e6e19915760def475ad.
//
// Solidity: event ExpectedRateContractSet(address newContract, address currentContract)
func (_KyberNetwork *KyberNetworkFilterer) WatchExpectedRateContractSet(opts *bind.WatchOpts, sink chan<- *KyberNetworkExpectedRateContractSet) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "ExpectedRateContractSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkExpectedRateContractSet)
				if err := _KyberNetwork.contract.UnpackLog(event, "ExpectedRateContractSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExpectedRateContractSet is a log parse operation binding the contract event 0xa2446ac1a8b17e6d40c1cafcbf076b945fdc5f897c970e6e19915760def475ad.
//
// Solidity: event ExpectedRateContractSet(address newContract, address currentContract)
func (_KyberNetwork *KyberNetworkFilterer) ParseExpectedRateContractSet(log types.Log) (*KyberNetworkExpectedRateContractSet, error) {
	event := new(KyberNetworkExpectedRateContractSet)
	if err := _KyberNetwork.contract.UnpackLog(event, "ExpectedRateContractSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkFeeBurnerContractSetIterator is returned from FilterFeeBurnerContractSet and is used to iterate over the raw logs and unpacked data for FeeBurnerContractSet events raised by the KyberNetwork contract.
type KyberNetworkFeeBurnerContractSetIterator struct {
	Event *KyberNetworkFeeBurnerContractSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkFeeBurnerContractSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkFeeBurnerContractSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkFeeBurnerContractSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkFeeBurnerContractSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkFeeBurnerContractSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkFeeBurnerContractSet represents a FeeBurnerContractSet event raised by the KyberNetwork contract.
type KyberNetworkFeeBurnerContractSet struct {
	NewContract     common.Address
	CurrentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterFeeBurnerContractSet is a free log retrieval operation binding the contract event 0x91251c8b04e3ed4b921776c3aced2ad433c3701257fc5666cb35239ec4df5411.
//
// Solidity: event FeeBurnerContractSet(address newContract, address currentContract)
func (_KyberNetwork *KyberNetworkFilterer) FilterFeeBurnerContractSet(opts *bind.FilterOpts) (*KyberNetworkFeeBurnerContractSetIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "FeeBurnerContractSet")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkFeeBurnerContractSetIterator{contract: _KyberNetwork.contract, event: "FeeBurnerContractSet", logs: logs, sub: sub}, nil
}

// WatchFeeBurnerContractSet is a free log subscription operation binding the contract event 0x91251c8b04e3ed4b921776c3aced2ad433c3701257fc5666cb35239ec4df5411.
//
// Solidity: event FeeBurnerContractSet(address newContract, address currentContract)
func (_KyberNetwork *KyberNetworkFilterer) WatchFeeBurnerContractSet(opts *bind.WatchOpts, sink chan<- *KyberNetworkFeeBurnerContractSet) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "FeeBurnerContractSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkFeeBurnerContractSet)
				if err := _KyberNetwork.contract.UnpackLog(event, "FeeBurnerContractSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeBurnerContractSet is a log parse operation binding the contract event 0x91251c8b04e3ed4b921776c3aced2ad433c3701257fc5666cb35239ec4df5411.
//
// Solidity: event FeeBurnerContractSet(address newContract, address currentContract)
func (_KyberNetwork *KyberNetworkFilterer) ParseFeeBurnerContractSet(log types.Log) (*KyberNetworkFeeBurnerContractSet, error) {
	event := new(KyberNetworkFeeBurnerContractSet)
	if err := _KyberNetwork.contract.UnpackLog(event, "FeeBurnerContractSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkKyberNetworkSetEnableIterator is returned from FilterKyberNetworkSetEnable and is used to iterate over the raw logs and unpacked data for KyberNetworkSetEnable events raised by the KyberNetwork contract.
type KyberNetworkKyberNetworkSetEnableIterator struct {
	Event *KyberNetworkKyberNetworkSetEnable // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkKyberNetworkSetEnableIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkKyberNetworkSetEnable)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkKyberNetworkSetEnable)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkKyberNetworkSetEnableIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkKyberNetworkSetEnableIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkKyberNetworkSetEnable represents a KyberNetworkSetEnable event raised by the KyberNetwork contract.
type KyberNetworkKyberNetworkSetEnable struct {
	IsEnabled bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterKyberNetworkSetEnable is a free log retrieval operation binding the contract event 0x8a846a525e22497042ee2f99423a8ff8bbb831d3ae5384692bf6040f591c1eba.
//
// Solidity: event KyberNetworkSetEnable(bool isEnabled)
func (_KyberNetwork *KyberNetworkFilterer) FilterKyberNetworkSetEnable(opts *bind.FilterOpts) (*KyberNetworkKyberNetworkSetEnableIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "KyberNetworkSetEnable")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkKyberNetworkSetEnableIterator{contract: _KyberNetwork.contract, event: "KyberNetworkSetEnable", logs: logs, sub: sub}, nil
}

// WatchKyberNetworkSetEnable is a free log subscription operation binding the contract event 0x8a846a525e22497042ee2f99423a8ff8bbb831d3ae5384692bf6040f591c1eba.
//
// Solidity: event KyberNetworkSetEnable(bool isEnabled)
func (_KyberNetwork *KyberNetworkFilterer) WatchKyberNetworkSetEnable(opts *bind.WatchOpts, sink chan<- *KyberNetworkKyberNetworkSetEnable) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "KyberNetworkSetEnable")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkKyberNetworkSetEnable)
				if err := _KyberNetwork.contract.UnpackLog(event, "KyberNetworkSetEnable", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKyberNetworkSetEnable is a log parse operation binding the contract event 0x8a846a525e22497042ee2f99423a8ff8bbb831d3ae5384692bf6040f591c1eba.
//
// Solidity: event KyberNetworkSetEnable(bool isEnabled)
func (_KyberNetwork *KyberNetworkFilterer) ParseKyberNetworkSetEnable(log types.Log) (*KyberNetworkKyberNetworkSetEnable, error) {
	event := new(KyberNetworkKyberNetworkSetEnable)
	if err := _KyberNetwork.contract.UnpackLog(event, "KyberNetworkSetEnable", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkKyberNetwrokParamsSetIterator is returned from FilterKyberNetwrokParamsSet and is used to iterate over the raw logs and unpacked data for KyberNetwrokParamsSet events raised by the KyberNetwork contract.
type KyberNetworkKyberNetwrokParamsSetIterator struct {
	Event *KyberNetworkKyberNetwrokParamsSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkKyberNetwrokParamsSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkKyberNetwrokParamsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkKyberNetwrokParamsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkKyberNetwrokParamsSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkKyberNetwrokParamsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkKyberNetwrokParamsSet represents a KyberNetwrokParamsSet event raised by the KyberNetwork contract.
type KyberNetworkKyberNetwrokParamsSet struct {
	MaxGasPrice        *big.Int
	NegligibleRateDiff *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterKyberNetwrokParamsSet is a free log retrieval operation binding the contract event 0xc1bdc2503431144078ba3cb975f03be0f6c1d365cf490875e7534b4ca70c863e.
//
// Solidity: event KyberNetwrokParamsSet(uint256 maxGasPrice, uint256 negligibleRateDiff)
func (_KyberNetwork *KyberNetworkFilterer) FilterKyberNetwrokParamsSet(opts *bind.FilterOpts) (*KyberNetworkKyberNetwrokParamsSetIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "KyberNetwrokParamsSet")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkKyberNetwrokParamsSetIterator{contract: _KyberNetwork.contract, event: "KyberNetwrokParamsSet", logs: logs, sub: sub}, nil
}

// WatchKyberNetwrokParamsSet is a free log subscription operation binding the contract event 0xc1bdc2503431144078ba3cb975f03be0f6c1d365cf490875e7534b4ca70c863e.
//
// Solidity: event KyberNetwrokParamsSet(uint256 maxGasPrice, uint256 negligibleRateDiff)
func (_KyberNetwork *KyberNetworkFilterer) WatchKyberNetwrokParamsSet(opts *bind.WatchOpts, sink chan<- *KyberNetworkKyberNetwrokParamsSet) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "KyberNetwrokParamsSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkKyberNetwrokParamsSet)
				if err := _KyberNetwork.contract.UnpackLog(event, "KyberNetwrokParamsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKyberNetwrokParamsSet is a log parse operation binding the contract event 0xc1bdc2503431144078ba3cb975f03be0f6c1d365cf490875e7534b4ca70c863e.
//
// Solidity: event KyberNetwrokParamsSet(uint256 maxGasPrice, uint256 negligibleRateDiff)
func (_KyberNetwork *KyberNetworkFilterer) ParseKyberNetwrokParamsSet(log types.Log) (*KyberNetworkKyberNetwrokParamsSet, error) {
	event := new(KyberNetworkKyberNetwrokParamsSet)
	if err := _KyberNetwork.contract.UnpackLog(event, "KyberNetwrokParamsSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkKyberProxySetIterator is returned from FilterKyberProxySet and is used to iterate over the raw logs and unpacked data for KyberProxySet events raised by the KyberNetwork contract.
type KyberNetworkKyberProxySetIterator struct {
	Event *KyberNetworkKyberProxySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkKyberProxySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkKyberProxySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkKyberProxySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkKyberProxySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkKyberProxySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkKyberProxySet represents a KyberProxySet event raised by the KyberNetwork contract.
type KyberNetworkKyberProxySet struct {
	Proxy  common.Address
	Sender common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterKyberProxySet is a free log retrieval operation binding the contract event 0xfdd305502f7797ff3390aa08825f7f6aec92c27a94e103bfaf45452b4cf1d4f4.
//
// Solidity: event KyberProxySet(address proxy, address sender)
func (_KyberNetwork *KyberNetworkFilterer) FilterKyberProxySet(opts *bind.FilterOpts) (*KyberNetworkKyberProxySetIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "KyberProxySet")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkKyberProxySetIterator{contract: _KyberNetwork.contract, event: "KyberProxySet", logs: logs, sub: sub}, nil
}

// WatchKyberProxySet is a free log subscription operation binding the contract event 0xfdd305502f7797ff3390aa08825f7f6aec92c27a94e103bfaf45452b4cf1d4f4.
//
// Solidity: event KyberProxySet(address proxy, address sender)
func (_KyberNetwork *KyberNetworkFilterer) WatchKyberProxySet(opts *bind.WatchOpts, sink chan<- *KyberNetworkKyberProxySet) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "KyberProxySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkKyberProxySet)
				if err := _KyberNetwork.contract.UnpackLog(event, "KyberProxySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKyberProxySet is a log parse operation binding the contract event 0xfdd305502f7797ff3390aa08825f7f6aec92c27a94e103bfaf45452b4cf1d4f4.
//
// Solidity: event KyberProxySet(address proxy, address sender)
func (_KyberNetwork *KyberNetworkFilterer) ParseKyberProxySet(log types.Log) (*KyberNetworkKyberProxySet, error) {
	event := new(KyberNetworkKyberProxySet)
	if err := _KyberNetwork.contract.UnpackLog(event, "KyberProxySet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkKyberTradeIterator is returned from FilterKyberTrade and is used to iterate over the raw logs and unpacked data for KyberTrade events raised by the KyberNetwork contract.
type KyberNetworkKyberTradeIterator struct {
	Event *KyberNetworkKyberTrade // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkKyberTradeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkKyberTrade)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkKyberTrade)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkKyberTradeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkKyberTradeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkKyberTrade represents a KyberTrade event raised by the KyberNetwork contract.
type KyberNetworkKyberTrade struct {
	Trader      common.Address
	Src         common.Address
	Dest        common.Address
	SrcAmount   *big.Int
	DstAmount   *big.Int
	DestAddress common.Address
	EthWeiValue *big.Int
	Reserve1    common.Address
	Reserve2    common.Address
	Hint        []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKyberTrade is a free log retrieval operation binding the contract event 0xd30ca399cb43507ecec6a629a35cf45eb98cda550c27696dcb0d8c4a3873ce6c.
//
// Solidity: event KyberTrade(address indexed trader, address src, address dest, uint256 srcAmount, uint256 dstAmount, address destAddress, uint256 ethWeiValue, address reserve1, address reserve2, bytes hint)
func (_KyberNetwork *KyberNetworkFilterer) FilterKyberTrade(opts *bind.FilterOpts, trader []common.Address) (*KyberNetworkKyberTradeIterator, error) {

	var traderRule []interface{}
	for _, traderItem := range trader {
		traderRule = append(traderRule, traderItem)
	}

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "KyberTrade", traderRule)
	if err != nil {
		return nil, err
	}
	return &KyberNetworkKyberTradeIterator{contract: _KyberNetwork.contract, event: "KyberTrade", logs: logs, sub: sub}, nil
}

// WatchKyberTrade is a free log subscription operation binding the contract event 0xd30ca399cb43507ecec6a629a35cf45eb98cda550c27696dcb0d8c4a3873ce6c.
//
// Solidity: event KyberTrade(address indexed trader, address src, address dest, uint256 srcAmount, uint256 dstAmount, address destAddress, uint256 ethWeiValue, address reserve1, address reserve2, bytes hint)
func (_KyberNetwork *KyberNetworkFilterer) WatchKyberTrade(opts *bind.WatchOpts, sink chan<- *KyberNetworkKyberTrade, trader []common.Address) (event.Subscription, error) {

	var traderRule []interface{}
	for _, traderItem := range trader {
		traderRule = append(traderRule, traderItem)
	}

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "KyberTrade", traderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkKyberTrade)
				if err := _KyberNetwork.contract.UnpackLog(event, "KyberTrade", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKyberTrade is a log parse operation binding the contract event 0xd30ca399cb43507ecec6a629a35cf45eb98cda550c27696dcb0d8c4a3873ce6c.
//
// Solidity: event KyberTrade(address indexed trader, address src, address dest, uint256 srcAmount, uint256 dstAmount, address destAddress, uint256 ethWeiValue, address reserve1, address reserve2, bytes hint)
func (_KyberNetwork *KyberNetworkFilterer) ParseKyberTrade(log types.Log) (*KyberNetworkKyberTrade, error) {
	event := new(KyberNetworkKyberTrade)
	if err := _KyberNetwork.contract.UnpackLog(event, "KyberTrade", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkListReservePairsIterator is returned from FilterListReservePairs and is used to iterate over the raw logs and unpacked data for ListReservePairs events raised by the KyberNetwork contract.
type KyberNetworkListReservePairsIterator struct {
	Event *KyberNetworkListReservePairs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkListReservePairsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkListReservePairs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkListReservePairs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkListReservePairsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkListReservePairsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkListReservePairs represents a ListReservePairs event raised by the KyberNetwork contract.
type KyberNetworkListReservePairs struct {
	Reserve common.Address
	Src     common.Address
	Dest    common.Address
	Add     bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterListReservePairs is a free log retrieval operation binding the contract event 0xadb5a4f14d89b3a5ffb3900ac1ea4574d991f93887f6199fabaf25393644e01c.
//
// Solidity: event ListReservePairs(address indexed reserve, address src, address dest, bool add)
func (_KyberNetwork *KyberNetworkFilterer) FilterListReservePairs(opts *bind.FilterOpts, reserve []common.Address) (*KyberNetworkListReservePairsIterator, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "ListReservePairs", reserveRule)
	if err != nil {
		return nil, err
	}
	return &KyberNetworkListReservePairsIterator{contract: _KyberNetwork.contract, event: "ListReservePairs", logs: logs, sub: sub}, nil
}

// WatchListReservePairs is a free log subscription operation binding the contract event 0xadb5a4f14d89b3a5ffb3900ac1ea4574d991f93887f6199fabaf25393644e01c.
//
// Solidity: event ListReservePairs(address indexed reserve, address src, address dest, bool add)
func (_KyberNetwork *KyberNetworkFilterer) WatchListReservePairs(opts *bind.WatchOpts, sink chan<- *KyberNetworkListReservePairs, reserve []common.Address) (event.Subscription, error) {

	var reserveRule []interface{}
	for _, reserveItem := range reserve {
		reserveRule = append(reserveRule, reserveItem)
	}

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "ListReservePairs", reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkListReservePairs)
				if err := _KyberNetwork.contract.UnpackLog(event, "ListReservePairs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseListReservePairs is a log parse operation binding the contract event 0xadb5a4f14d89b3a5ffb3900ac1ea4574d991f93887f6199fabaf25393644e01c.
//
// Solidity: event ListReservePairs(address indexed reserve, address src, address dest, bool add)
func (_KyberNetwork *KyberNetworkFilterer) ParseListReservePairs(log types.Log) (*KyberNetworkListReservePairs, error) {
	event := new(KyberNetworkListReservePairs)
	if err := _KyberNetwork.contract.UnpackLog(event, "ListReservePairs", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkOperatorAddedIterator is returned from FilterOperatorAdded and is used to iterate over the raw logs and unpacked data for OperatorAdded events raised by the KyberNetwork contract.
type KyberNetworkOperatorAddedIterator struct {
	Event *KyberNetworkOperatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkOperatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkOperatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkOperatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkOperatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkOperatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkOperatorAdded represents a OperatorAdded event raised by the KyberNetwork contract.
type KyberNetworkOperatorAdded struct {
	NewOperator common.Address
	IsAdd       bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOperatorAdded is a free log retrieval operation binding the contract event 0x091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b.
//
// Solidity: event OperatorAdded(address newOperator, bool isAdd)
func (_KyberNetwork *KyberNetworkFilterer) FilterOperatorAdded(opts *bind.FilterOpts) (*KyberNetworkOperatorAddedIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "OperatorAdded")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkOperatorAddedIterator{contract: _KyberNetwork.contract, event: "OperatorAdded", logs: logs, sub: sub}, nil
}

// WatchOperatorAdded is a free log subscription operation binding the contract event 0x091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b.
//
// Solidity: event OperatorAdded(address newOperator, bool isAdd)
func (_KyberNetwork *KyberNetworkFilterer) WatchOperatorAdded(opts *bind.WatchOpts, sink chan<- *KyberNetworkOperatorAdded) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "OperatorAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkOperatorAdded)
				if err := _KyberNetwork.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAdded is a log parse operation binding the contract event 0x091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b.
//
// Solidity: event OperatorAdded(address newOperator, bool isAdd)
func (_KyberNetwork *KyberNetworkFilterer) ParseOperatorAdded(log types.Log) (*KyberNetworkOperatorAdded, error) {
	event := new(KyberNetworkOperatorAdded)
	if err := _KyberNetwork.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkRemoveReserveFromNetworkIterator is returned from FilterRemoveReserveFromNetwork and is used to iterate over the raw logs and unpacked data for RemoveReserveFromNetwork events raised by the KyberNetwork contract.
type KyberNetworkRemoveReserveFromNetworkIterator struct {
	Event *KyberNetworkRemoveReserveFromNetwork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkRemoveReserveFromNetworkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkRemoveReserveFromNetwork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkRemoveReserveFromNetwork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkRemoveReserveFromNetworkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkRemoveReserveFromNetworkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkRemoveReserveFromNetwork represents a RemoveReserveFromNetwork event raised by the KyberNetwork contract.
type KyberNetworkRemoveReserveFromNetwork struct {
	Reserve common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRemoveReserveFromNetwork is a free log retrieval operation binding the contract event 0x861f07ab6bad95b71c362ed240dc0082c3d9bbfe75e7830be646ef0d61da3117.
//
// Solidity: event RemoveReserveFromNetwork(address reserve)
func (_KyberNetwork *KyberNetworkFilterer) FilterRemoveReserveFromNetwork(opts *bind.FilterOpts) (*KyberNetworkRemoveReserveFromNetworkIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "RemoveReserveFromNetwork")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkRemoveReserveFromNetworkIterator{contract: _KyberNetwork.contract, event: "RemoveReserveFromNetwork", logs: logs, sub: sub}, nil
}

// WatchRemoveReserveFromNetwork is a free log subscription operation binding the contract event 0x861f07ab6bad95b71c362ed240dc0082c3d9bbfe75e7830be646ef0d61da3117.
//
// Solidity: event RemoveReserveFromNetwork(address reserve)
func (_KyberNetwork *KyberNetworkFilterer) WatchRemoveReserveFromNetwork(opts *bind.WatchOpts, sink chan<- *KyberNetworkRemoveReserveFromNetwork) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "RemoveReserveFromNetwork")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkRemoveReserveFromNetwork)
				if err := _KyberNetwork.contract.UnpackLog(event, "RemoveReserveFromNetwork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveReserveFromNetwork is a log parse operation binding the contract event 0x861f07ab6bad95b71c362ed240dc0082c3d9bbfe75e7830be646ef0d61da3117.
//
// Solidity: event RemoveReserveFromNetwork(address reserve)
func (_KyberNetwork *KyberNetworkFilterer) ParseRemoveReserveFromNetwork(log types.Log) (*KyberNetworkRemoveReserveFromNetwork, error) {
	event := new(KyberNetworkRemoveReserveFromNetwork)
	if err := _KyberNetwork.contract.UnpackLog(event, "RemoveReserveFromNetwork", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkTokenWithdrawIterator is returned from FilterTokenWithdraw and is used to iterate over the raw logs and unpacked data for TokenWithdraw events raised by the KyberNetwork contract.
type KyberNetworkTokenWithdrawIterator struct {
	Event *KyberNetworkTokenWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkTokenWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkTokenWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkTokenWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkTokenWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkTokenWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkTokenWithdraw represents a TokenWithdraw event raised by the KyberNetwork contract.
type KyberNetworkTokenWithdraw struct {
	Token  common.Address
	Amount *big.Int
	SendTo common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTokenWithdraw is a free log retrieval operation binding the contract event 0x72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6.
//
// Solidity: event TokenWithdraw(address token, uint256 amount, address sendTo)
func (_KyberNetwork *KyberNetworkFilterer) FilterTokenWithdraw(opts *bind.FilterOpts) (*KyberNetworkTokenWithdrawIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "TokenWithdraw")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkTokenWithdrawIterator{contract: _KyberNetwork.contract, event: "TokenWithdraw", logs: logs, sub: sub}, nil
}

// WatchTokenWithdraw is a free log subscription operation binding the contract event 0x72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6.
//
// Solidity: event TokenWithdraw(address token, uint256 amount, address sendTo)
func (_KyberNetwork *KyberNetworkFilterer) WatchTokenWithdraw(opts *bind.WatchOpts, sink chan<- *KyberNetworkTokenWithdraw) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "TokenWithdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkTokenWithdraw)
				if err := _KyberNetwork.contract.UnpackLog(event, "TokenWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenWithdraw is a log parse operation binding the contract event 0x72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6.
//
// Solidity: event TokenWithdraw(address token, uint256 amount, address sendTo)
func (_KyberNetwork *KyberNetworkFilterer) ParseTokenWithdraw(log types.Log) (*KyberNetworkTokenWithdraw, error) {
	event := new(KyberNetworkTokenWithdraw)
	if err := _KyberNetwork.contract.UnpackLog(event, "TokenWithdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkTransferAdminPendingIterator is returned from FilterTransferAdminPending and is used to iterate over the raw logs and unpacked data for TransferAdminPending events raised by the KyberNetwork contract.
type KyberNetworkTransferAdminPendingIterator struct {
	Event *KyberNetworkTransferAdminPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkTransferAdminPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkTransferAdminPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkTransferAdminPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkTransferAdminPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkTransferAdminPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkTransferAdminPending represents a TransferAdminPending event raised by the KyberNetwork contract.
type KyberNetworkTransferAdminPending struct {
	PendingAdmin common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTransferAdminPending is a free log retrieval operation binding the contract event 0x3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40.
//
// Solidity: event TransferAdminPending(address pendingAdmin)
func (_KyberNetwork *KyberNetworkFilterer) FilterTransferAdminPending(opts *bind.FilterOpts) (*KyberNetworkTransferAdminPendingIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "TransferAdminPending")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkTransferAdminPendingIterator{contract: _KyberNetwork.contract, event: "TransferAdminPending", logs: logs, sub: sub}, nil
}

// WatchTransferAdminPending is a free log subscription operation binding the contract event 0x3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40.
//
// Solidity: event TransferAdminPending(address pendingAdmin)
func (_KyberNetwork *KyberNetworkFilterer) WatchTransferAdminPending(opts *bind.WatchOpts, sink chan<- *KyberNetworkTransferAdminPending) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "TransferAdminPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkTransferAdminPending)
				if err := _KyberNetwork.contract.UnpackLog(event, "TransferAdminPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferAdminPending is a log parse operation binding the contract event 0x3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40.
//
// Solidity: event TransferAdminPending(address pendingAdmin)
func (_KyberNetwork *KyberNetworkFilterer) ParseTransferAdminPending(log types.Log) (*KyberNetworkTransferAdminPending, error) {
	event := new(KyberNetworkTransferAdminPending)
	if err := _KyberNetwork.contract.UnpackLog(event, "TransferAdminPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KyberNetworkWhiteListContractSetIterator is returned from FilterWhiteListContractSet and is used to iterate over the raw logs and unpacked data for WhiteListContractSet events raised by the KyberNetwork contract.
type KyberNetworkWhiteListContractSetIterator struct {
	Event *KyberNetworkWhiteListContractSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KyberNetworkWhiteListContractSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KyberNetworkWhiteListContractSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KyberNetworkWhiteListContractSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KyberNetworkWhiteListContractSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KyberNetworkWhiteListContractSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KyberNetworkWhiteListContractSet represents a WhiteListContractSet event raised by the KyberNetwork contract.
type KyberNetworkWhiteListContractSet struct {
	NewContract     common.Address
	CurrentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWhiteListContractSet is a free log retrieval operation binding the contract event 0x1eae61fde1a37f65af69f00b4269aa5fda423f684194d303865cba6c650b2366.
//
// Solidity: event WhiteListContractSet(address newContract, address currentContract)
func (_KyberNetwork *KyberNetworkFilterer) FilterWhiteListContractSet(opts *bind.FilterOpts) (*KyberNetworkWhiteListContractSetIterator, error) {

	logs, sub, err := _KyberNetwork.contract.FilterLogs(opts, "WhiteListContractSet")
	if err != nil {
		return nil, err
	}
	return &KyberNetworkWhiteListContractSetIterator{contract: _KyberNetwork.contract, event: "WhiteListContractSet", logs: logs, sub: sub}, nil
}

// WatchWhiteListContractSet is a free log subscription operation binding the contract event 0x1eae61fde1a37f65af69f00b4269aa5fda423f684194d303865cba6c650b2366.
//
// Solidity: event WhiteListContractSet(address newContract, address currentContract)
func (_KyberNetwork *KyberNetworkFilterer) WatchWhiteListContractSet(opts *bind.WatchOpts, sink chan<- *KyberNetworkWhiteListContractSet) (event.Subscription, error) {

	logs, sub, err := _KyberNetwork.contract.WatchLogs(opts, "WhiteListContractSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KyberNetworkWhiteListContractSet)
				if err := _KyberNetwork.contract.UnpackLog(event, "WhiteListContractSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhiteListContractSet is a log parse operation binding the contract event 0x1eae61fde1a37f65af69f00b4269aa5fda423f684194d303865cba6c650b2366.
//
// Solidity: event WhiteListContractSet(address newContract, address currentContract)
func (_KyberNetwork *KyberNetworkFilterer) ParseWhiteListContractSet(log types.Log) (*KyberNetworkWhiteListContractSet, error) {
	event := new(KyberNetworkWhiteListContractSet)
	if err := _KyberNetwork.contract.UnpackLog(event, "WhiteListContractSet", log); err != nil {
		return nil, err
	}
	return event, nil
}
