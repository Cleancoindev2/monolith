// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package makerDAO

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SaiProxyCreateAndExecuteABI is the input ABI used to generate the binding from.
const SaiProxyCreateAndExecuteABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"jam\",\"type\":\"uint256\"},{\"name\":\"wad\",\"type\":\"uint256\"},{\"name\":\"otc_\",\"type\":\"address\"}],\"name\":\"wipeAndFree\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"lockAndDraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"lockAndDraw\",\"outputs\":[{\"name\":\"cup\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registry_\",\"type\":\"address\"},{\"name\":\"tub_\",\"type\":\"address\"}],\"name\":\"createAndOpen\",\"outputs\":[{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"otc_\",\"type\":\"address\"}],\"name\":\"shut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"wad\",\"type\":\"uint256\"},{\"name\":\"otc_\",\"type\":\"address\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"}],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"}],\"name\":\"shut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registry_\",\"type\":\"address\"},{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"createOpenLockAndDraw\",\"outputs\":[{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"lad\",\"type\":\"address\"}],\"name\":\"give\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registry_\",\"type\":\"address\"},{\"name\":\"tub_\",\"type\":\"address\"}],\"name\":\"createOpenAndLock\",\"outputs\":[{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"jam\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub_\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"jam\",\"type\":\"uint256\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipeAndFree\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// SaiProxyCreateAndExecuteBin is the compiled bytecode used for deploying new contracts.
const SaiProxyCreateAndExecuteBin = `608060405234801561001057600080fd5b5061290b806100206000396000f3006080604052600436106100cc5763ffffffff60e060020a6000350416630344a36f81146100d15780631b968160146100fa5780631edf0c1e14610120578063516e9aec1461013a578063581f3c5014610163578063792037e3146101ad5780638a9fc475146101d8578063a3dc65a714610207578063b95460f81461022e578063bc244c111461024f578063bc25a81014610273578063d3140a651461028a578063da93dfcf146102a7578063eefe3818146102d2578063f9ef04be146102ec578063faed77ab14610313575b600080fd5b3480156100dd57600080fd5b506100f8600160a060020a0360043516602435604435610330565b005b6100f8600160a060020a03600435811690602435906044359060643590608435166104c5565b6100f8600160a060020a03600435166024356044356104e3565b610151600160a060020a03600435166024356104fd565b60408051918252519081900360200190f35b34801561016f57600080fd5b5061018a600160a060020a036004358116906024351661051b565b60408051600160a060020a03909316835260208301919091528051918290030190f35b3480156101b957600080fd5b506100f8600160a060020a03600435811690602435906044351661062e565b3480156101e457600080fd5b506100f8600160a060020a0360043581169060243590604435906064351661086a565b34801561021357600080fd5b506100f8600160a060020a0360043516602435604435610ed9565b34801561023a57600080fd5b50610151600160a060020a0360043516610ee6565b34801561025b57600080fd5b506100f8600160a060020a0360043516602435610f58565b6100f8600160a060020a03600435166024356110da565b61018a600160a060020a03600435811690602435166044356117cc565b3480156102b357600080fd5b506100f8600160a060020a0360043581169060243590604435166118ea565b61018a600160a060020a036004358116906024351661193f565b3480156102f857600080fd5b506100f8600160a060020a0360043516602435604435611a3c565b6100f8600160a060020a0360043516602435604435606435611fc1565b6000808211156104bf5750604080517f440f19ba000000000000000000000000000000000000000000000000000000008152600481018490526024810183905290518491600160a060020a0383169163440f19ba9160448082019260009290919082900301818387803b1580156103a657600080fd5b505af11580156103ba573d6000803e3d6000fd5b5050505080600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156103fc57600080fd5b505af1158015610410573d6000803e3d6000fd5b505050506040513d602081101561042657600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018590529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561049257600080fd5b505af11580156104a6573d6000803e3d6000fd5b505050506040513d60208110156104bc57600080fd5b50505b50505050565b6104d18585848461086a565b6104dc858585611a3c565b5050505050565b6104ed83836110da565b6104f8838383610330565b505050565b600061050883610ee6565b90506105158382846104e3565b92915050565b604080517ff3701da200000000000000000000000000000000000000000000000000000000815233600482015290516000918291600160a060020a0386169163f3701da291602480830192602092919082900301818787803b15801561058057600080fd5b505af1158015610594573d6000803e3d6000fd5b505050506040513d60208110156105aa57600080fd5b505191506105b783610ee6565b6040805160e260020a632eaa14a702815260048101839052600160a060020a03858116602483015291519293509085169163baa8529c9160448082019260009290919082900301818387803b15801561060f57600080fd5b505af1158015610623573d6000803e3d6000fd5b505050509250929050565b604080517f1f3634ed00000000000000000000000000000000000000000000000000000000815260048101849052905184916107eb918391869161075791600160a060020a03851691631f3634ed916024808201926020929091908290030181600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d60208110156106c957600080fd5b5051604080517f7ec9c3b80000000000000000000000000000000000000000000000000000000081529051600160a060020a03881691637ec9c3b89160048083019260209291908290030181600087803b15801561072657600080fd5b505af115801561073a573d6000803e3d6000fd5b505050506040513d602081101561075057600080fd5b5051611fd7565b604080517ff7c8d634000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a0387169163f7c8d6349160248083019260209291908290030181600087803b1580156107b957600080fd5b505af11580156107cd573d6000803e3d6000fd5b505050506040513d60208110156107e357600080fd5b5051866104c5565b604080517fb84d2106000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a0383169163b84d210691602480830192600092919082900301818387803b15801561084c57600080fd5b505af1158015610860573d6000803e3d6000fd5b5050505050505050565b6000808311156104dc5784905080600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108b557600080fd5b505af11580156108c9573d6000803e3d6000fd5b505050506040513d60208110156108df57600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b505050506040513d602081101561097b57600080fd5b5050604080517f6f78ee0d000000000000000000000000000000000000000000000000000000008152600481018690529051610aba918391610ab4918791610aaf91600160a060020a03861691636f78ee0d916024808201926020929091908290030181600087803b1580156109f057600080fd5b505af1158015610a04573d6000803e3d6000fd5b505050506040513d6020811015610a1a57600080fd5b5051604080517ff7c8d634000000000000000000000000000000000000000000000000000000008152600481018c90529051600160a060020a0389169163f7c8d6349160248083019260209291908290030181600087803b158015610a7e57600080fd5b505af1158015610a92573d6000803e3d6000fd5b505050506040513d6020811015610aa857600080fd5b505161201a565b611fd7565b8461203e565b60001981600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610afb57600080fd5b505af1158015610b0f573d6000803e3d6000fd5b505050506040513d6020811015610b2557600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0385811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b158015610b7c57600080fd5b505af1158015610b90573d6000803e3d6000fd5b505050506040513d6020811015610ba657600080fd5b505114610c865780600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b505050506040513d6020811015610c1557600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03848116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b505050505b60001981600160a060020a03166312d43a516040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610cc757600080fd5b505af1158015610cdb573d6000803e3d6000fd5b505050506040513d6020811015610cf157600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0385811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b158015610d4857600080fd5b505af1158015610d5c573d6000803e3d6000fd5b505050506040513d6020811015610d7257600080fd5b505114610e525780600160a060020a03166312d43a516040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610db757600080fd5b505af1158015610dcb573d6000803e3d6000fd5b505050506040513d6020811015610de157600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03848116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b158015610e3957600080fd5b505af1158015610e4d573d6000803e3d6000fd5b505050505b604080517f73b3810100000000000000000000000000000000000000000000000000000000815260048101869052602481018590529051600160a060020a038316916373b3810191604480830192600092919082900301818387803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b505050505050505050565b6104f8838383600061086a565b600081600160a060020a031663fcfff16f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f2657600080fd5b505af1158015610f3a573d6000803e3d6000fd5b505050506040513d6020811015610f5057600080fd5b505192915050565b604080517f1f3634ed000000000000000000000000000000000000000000000000000000008152600481018390529051839161105c9183918591610fc991600160a060020a03851691631f3634ed916024808201926020929091908290030181600087803b15801561069f57600080fd5b604080517ff7c8d634000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a0387169163f7c8d6349160248083019260209291908290030181600087803b15801561102b57600080fd5b505af115801561103f573d6000803e3d6000fd5b505050506040513d602081101561105557600080fd5b5051611fc1565b604080517fb84d2106000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a0383169163b84d210691602480830192600092919082900301818387803b1580156110bd57600080fd5b505af11580156110d1573d6000803e3d6000fd5b50505050505050565b6000806000803411156104dc57604080517ffdac0025000000000000000000000000000000000000000000000000000000008152600481018690529051869450600160a060020a0385169163fdac00259160248083019260809291908290030181600087803b15801561114c57600080fd5b505af1158015611160573d6000803e3d6000fd5b505050506040513d608081101561117657600080fd5b50519150600160a060020a03821630146111f157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6375702d6e6f742d6f776e656400000000000000000000000000000000000000604482015290519081900360640190fd5b82600160a060020a0316637bd2bea76040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b505050506040513d602081101561125957600080fd5b5051604080517fd0e30db00000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163d0e30db0913491600480830192600092919082900301818588803b1580156112b857600080fd5b505af11580156112cc573d6000803e3d6000fd5b50505050506113133484600160a060020a0316637ec9c3b86040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a7e57600080fd5b9050346113588285600160a060020a0316637ec9c3b86040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561072657600080fd5b11156113675760018103611369565b805b905060001983600160a060020a0316637bd2bea76040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156113ac57600080fd5b505af11580156113c0573d6000803e3d6000fd5b505050506040513d60208110156113d657600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0387811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b15801561142d57600080fd5b505af1158015611441573d6000803e3d6000fd5b505050506040513d602081101561145757600080fd5b5051146115375782600160a060020a0316637bd2bea76040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561149c57600080fd5b505af11580156114b0573d6000803e3d6000fd5b505050506040513d60208110156114c657600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03868116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b505050505b82600160a060020a031663049878f3826040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b15801561158057600080fd5b505af1158015611594573d6000803e3d6000fd5b5050505060001983600160a060020a0316630f8a771e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156115d957600080fd5b505af11580156115ed573d6000803e3d6000fd5b505050506040513d602081101561160357600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0387811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b15801561165a57600080fd5b505af115801561166e573d6000803e3d6000fd5b505050506040513d602081101561168457600080fd5b5051146117645782600160a060020a0316630f8a771e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156116c957600080fd5b505af11580156116dd573d6000803e3d6000fd5b505050506040513d60208110156116f357600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03868116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b15801561174b57600080fd5b505af115801561175f573d6000803e3d6000fd5b505050505b604080517fb3b77a5100000000000000000000000000000000000000000000000000000000815260048101869052602481018390529051600160a060020a0385169163b3b77a5191604480830192600092919082900301818387803b158015610eba57600080fd5b604080517ff3701da200000000000000000000000000000000000000000000000000000000815233600482015290516000918291600160a060020a0387169163f3701da291602480830192602092919082900301818787803b15801561183157600080fd5b505af1158015611845573d6000803e3d6000fd5b505050506040513d602081101561185b57600080fd5b5051915061186884610ee6565b90506118758482856104e3565b6040805160e260020a632eaa14a702815260048101839052600160a060020a03848116602483015291519186169163baa8529c9160448082019260009290919082900301818387803b1580156118ca57600080fd5b505af11580156118de573d6000803e3d6000fd5b50505050935093915050565b6040805160e260020a632eaa14a702815260048101849052600160a060020a03838116602483015291519185169163baa8529c9160448082019260009290919082900301818387803b1580156110bd57600080fd5b604080517ff3701da200000000000000000000000000000000000000000000000000000000815233600482015290516000918291600160a060020a0386169163f3701da291602480830192602092919082900301818787803b1580156119a457600080fd5b505af11580156119b8573d6000803e3d6000fd5b505050506040513d60208110156119ce57600080fd5b505191506119db83610ee6565b90506119e783826110da565b6040805160e260020a632eaa14a702815260048101839052600160a060020a03848116602483015291519185169163baa8529c9160448082019260009290919082900301818387803b15801561060f57600080fd5b6000806000808411156104bc57859250611a8e8484600160a060020a0316637ec9c3b86040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a7e57600080fd5b915083611ad38385600160a060020a0316637ec9c3b86040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561072657600080fd5b1115611ae25760018203611ae4565b815b604080517fa5cd184e00000000000000000000000000000000000000000000000000000000815260048101889052602481018390529051919350600160a060020a0385169163a5cd184e9160448082019260009290919082900301818387803b158015611b5057600080fd5b505af1158015611b64573d6000803e3d6000fd5b5050505060001983600160a060020a0316630f8a771e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611ba957600080fd5b505af1158015611bbd573d6000803e3d6000fd5b505050506040513d6020811015611bd357600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0387811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b158015611c2a57600080fd5b505af1158015611c3e573d6000803e3d6000fd5b505050506040513d6020811015611c5457600080fd5b505114611d345782600160a060020a0316630f8a771e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611c9957600080fd5b505af1158015611cad573d6000803e3d6000fd5b505050506040513d6020811015611cc357600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03868116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b158015611d1b57600080fd5b505af1158015611d2f573d6000803e3d6000fd5b505050505b82600160a060020a0316637f8661a1836040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b158015611d7d57600080fd5b505af1158015611d91573d6000803e3d6000fd5b5050505082600160a060020a0316637bd2bea76040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611dd357600080fd5b505af1158015611de7573d6000803e3d6000fd5b505050506040513d6020811015611dfd57600080fd5b5051604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015611e6257600080fd5b505af1158015611e76573d6000803e3d6000fd5b505050506040513d6020811015611e8c57600080fd5b5051604080517f7bd2bea70000000000000000000000000000000000000000000000000000000081529051919250600160a060020a03851691637bd2bea7916004808201926020929091908290030181600087803b158015611eed57600080fd5b505af1158015611f01573d6000803e3d6000fd5b505050506040513d6020811015611f1757600080fd5b5051604080517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a0390921691632e1a7d4d9160248082019260009290919082900301818387803b158015611f7c57600080fd5b505af1158015611f90573d6000803e3d6000fd5b505060405133925083156108fc02915083906000818181858888f193505050501580156110d1573d6000803e3d6000fd5b611fcc848483610ed9565b6104bf848484611a3c565b60006b033b2e3c9fd0803ce8000000612009611ff3858561288f565b60026b033b2e3c9fd0803ce80000005b046128b7565b81151561201257fe5b049392505050565b600081612009612036856b033b2e3c9fd0803ce800000061288f565b600285612003565b60008060008086600160a060020a031663ace237f56040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561208257600080fd5b505af1158015612096573d6000803e3d6000fd5b505050506040513d60208110156120ac57600080fd5b5051604080517f59e02dd70000000000000000000000000000000000000000000000000000000081528151600160a060020a03909316926359e02dd7926004808401939192918290030181600087803b15801561210857600080fd5b505af115801561211c573d6000803e3d6000fd5b505050506040513d604081101561213257600080fd5b508051602090910151909450925082801561214c57508315155b156110d15761215b86856128c7565b9150600160a060020a0385161561278b5784600160a060020a031663ff1fd97488600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156121b957600080fd5b505af11580156121cd573d6000803e3d6000fd5b505050506040513d60208110156121e357600080fd5b5051604080517f12d43a510000000000000000000000000000000000000000000000000000000081529051600160a060020a038c16916312d43a519160048083019260209291908290030181600087803b15801561224057600080fd5b505af1158015612254573d6000803e3d6000fd5b505050506040513d602081101561226a57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039384166004820152929091166024830152604482018690525160648083019260209291908290030181600087803b1580156122c157600080fd5b505af11580156122d5573d6000803e3d6000fd5b505050506040513d60208110156122eb57600080fd5b5051604080517f9166cba4000000000000000000000000000000000000000000000000000000008152905191925060001991600160a060020a038a1691639166cba49160048083019260209291908290030181600087803b15801561234f57600080fd5b505af1158015612363573d6000803e3d6000fd5b505050506040513d602081101561237957600080fd5b50516040805160e160020a636eb1769f028152306004820152600160a060020a0389811660248301529151919092169163dd62ed3e9160448083019260209291908290030181600087803b1580156123d057600080fd5b505af11580156123e4573d6000803e3d6000fd5b505050506040513d60208110156123fa57600080fd5b5051146124da5786600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561243f57600080fd5b505af1158015612453573d6000803e3d6000fd5b505050506040513d602081101561246957600080fd5b50516040805160e060020a63095ea7b3028152600160a060020a03888116600483015260001960248301529151919092169163095ea7b391604480830192600092919082900301818387803b1580156124c157600080fd5b505af11580156124d5573d6000803e3d6000fd5b505050505b86600160a060020a0316639166cba46040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561251857600080fd5b505af115801561252c573d6000803e3d6000fd5b505050506040513d602081101561254257600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b1580156125b457600080fd5b505af11580156125c8573d6000803e3d6000fd5b505050506040513d60208110156125de57600080fd5b5050604080517f12d43a510000000000000000000000000000000000000000000000000000000081529051600160a060020a0380881692638185402b92918b16916312d43a51916004808201926020929091908290030181600087803b15801561264757600080fd5b505af115801561265b573d6000803e3d6000fd5b505050506040513d602081101561267157600080fd5b5051604080517f9166cba400000000000000000000000000000000000000000000000000000000815290518691600160a060020a038d1691639166cba4916004808201926020929091908290030181600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b505050506040513d60208110156126fb57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015260248101939093529216604482015260648101859052905160848083019260209291908290030181600087803b15801561275957600080fd5b505af115801561276d573d6000803e3d6000fd5b505050506040513d602081101561278357600080fd5b506110d19050565b86600160a060020a03166312d43a516040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156127c957600080fd5b505af11580156127dd573d6000803e3d6000fd5b505050506040513d60208110156127f357600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561286557600080fd5b505af1158015612879573d6000803e3d6000fd5b505050506040513d6020811015610ece57600080fd5b60008115806128ac5750508082028282828115156128a957fe5b04145b151561051557600080fd5b8082018281101561051557600080fd5b60008161200961203685670de0b6b3a764000061288f5600a165627a7a723058204fc5cde444ef9d5450889e7cfc9035fd32980fa0ed125b2bd0793fcb9afa09700029`

// DeploySaiProxyCreateAndExecute deploys a new Ethereum contract, binding an instance of SaiProxyCreateAndExecute to it.
func DeploySaiProxyCreateAndExecute(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SaiProxyCreateAndExecute, error) {
	parsed, err := abi.JSON(strings.NewReader(SaiProxyCreateAndExecuteABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SaiProxyCreateAndExecuteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SaiProxyCreateAndExecute{SaiProxyCreateAndExecuteCaller: SaiProxyCreateAndExecuteCaller{contract: contract}, SaiProxyCreateAndExecuteTransactor: SaiProxyCreateAndExecuteTransactor{contract: contract}, SaiProxyCreateAndExecuteFilterer: SaiProxyCreateAndExecuteFilterer{contract: contract}}, nil
}

// SaiProxyCreateAndExecute is an auto generated Go binding around an Ethereum contract.
type SaiProxyCreateAndExecute struct {
	SaiProxyCreateAndExecuteCaller     // Read-only binding to the contract
	SaiProxyCreateAndExecuteTransactor // Write-only binding to the contract
	SaiProxyCreateAndExecuteFilterer   // Log filterer for contract events
}

// SaiProxyCreateAndExecuteCaller is an auto generated read-only Go binding around an Ethereum contract.
type SaiProxyCreateAndExecuteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SaiProxyCreateAndExecuteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SaiProxyCreateAndExecuteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SaiProxyCreateAndExecuteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SaiProxyCreateAndExecuteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SaiProxyCreateAndExecuteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SaiProxyCreateAndExecuteSession struct {
	Contract     *SaiProxyCreateAndExecute // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SaiProxyCreateAndExecuteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SaiProxyCreateAndExecuteCallerSession struct {
	Contract *SaiProxyCreateAndExecuteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// SaiProxyCreateAndExecuteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SaiProxyCreateAndExecuteTransactorSession struct {
	Contract     *SaiProxyCreateAndExecuteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// SaiProxyCreateAndExecuteRaw is an auto generated low-level Go binding around an Ethereum contract.
type SaiProxyCreateAndExecuteRaw struct {
	Contract *SaiProxyCreateAndExecute // Generic contract binding to access the raw methods on
}

// SaiProxyCreateAndExecuteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SaiProxyCreateAndExecuteCallerRaw struct {
	Contract *SaiProxyCreateAndExecuteCaller // Generic read-only contract binding to access the raw methods on
}

// SaiProxyCreateAndExecuteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SaiProxyCreateAndExecuteTransactorRaw struct {
	Contract *SaiProxyCreateAndExecuteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSaiProxyCreateAndExecute creates a new instance of SaiProxyCreateAndExecute, bound to a specific deployed contract.
func NewSaiProxyCreateAndExecute(address common.Address, backend bind.ContractBackend) (*SaiProxyCreateAndExecute, error) {
	contract, err := bindSaiProxyCreateAndExecute(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SaiProxyCreateAndExecute{SaiProxyCreateAndExecuteCaller: SaiProxyCreateAndExecuteCaller{contract: contract}, SaiProxyCreateAndExecuteTransactor: SaiProxyCreateAndExecuteTransactor{contract: contract}, SaiProxyCreateAndExecuteFilterer: SaiProxyCreateAndExecuteFilterer{contract: contract}}, nil
}

// NewSaiProxyCreateAndExecuteCaller creates a new read-only instance of SaiProxyCreateAndExecute, bound to a specific deployed contract.
func NewSaiProxyCreateAndExecuteCaller(address common.Address, caller bind.ContractCaller) (*SaiProxyCreateAndExecuteCaller, error) {
	contract, err := bindSaiProxyCreateAndExecute(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SaiProxyCreateAndExecuteCaller{contract: contract}, nil
}

// NewSaiProxyCreateAndExecuteTransactor creates a new write-only instance of SaiProxyCreateAndExecute, bound to a specific deployed contract.
func NewSaiProxyCreateAndExecuteTransactor(address common.Address, transactor bind.ContractTransactor) (*SaiProxyCreateAndExecuteTransactor, error) {
	contract, err := bindSaiProxyCreateAndExecute(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SaiProxyCreateAndExecuteTransactor{contract: contract}, nil
}

// NewSaiProxyCreateAndExecuteFilterer creates a new log filterer instance of SaiProxyCreateAndExecute, bound to a specific deployed contract.
func NewSaiProxyCreateAndExecuteFilterer(address common.Address, filterer bind.ContractFilterer) (*SaiProxyCreateAndExecuteFilterer, error) {
	contract, err := bindSaiProxyCreateAndExecute(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SaiProxyCreateAndExecuteFilterer{contract: contract}, nil
}

// bindSaiProxyCreateAndExecute binds a generic wrapper to an already deployed contract.
func bindSaiProxyCreateAndExecute(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SaiProxyCreateAndExecuteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SaiProxyCreateAndExecute.Contract.SaiProxyCreateAndExecuteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.SaiProxyCreateAndExecuteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.SaiProxyCreateAndExecuteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SaiProxyCreateAndExecute.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.contract.Transact(opts, method, params...)
}

// CreateAndOpen is a paid mutator transaction binding the contract method 0x581f3c50.
//
// Solidity: function createAndOpen(address registry_, address tub_) returns(address proxy, bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) CreateAndOpen(opts *bind.TransactOpts, registry_ common.Address, tub_ common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "createAndOpen", registry_, tub_)
}

// CreateAndOpen is a paid mutator transaction binding the contract method 0x581f3c50.
//
// Solidity: function createAndOpen(address registry_, address tub_) returns(address proxy, bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) CreateAndOpen(registry_ common.Address, tub_ common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.CreateAndOpen(&_SaiProxyCreateAndExecute.TransactOpts, registry_, tub_)
}

// CreateAndOpen is a paid mutator transaction binding the contract method 0x581f3c50.
//
// Solidity: function createAndOpen(address registry_, address tub_) returns(address proxy, bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) CreateAndOpen(registry_ common.Address, tub_ common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.CreateAndOpen(&_SaiProxyCreateAndExecute.TransactOpts, registry_, tub_)
}

// CreateOpenAndLock is a paid mutator transaction binding the contract method 0xeefe3818.
//
// Solidity: function createOpenAndLock(address registry_, address tub_) returns(address proxy, bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) CreateOpenAndLock(opts *bind.TransactOpts, registry_ common.Address, tub_ common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "createOpenAndLock", registry_, tub_)
}

// CreateOpenAndLock is a paid mutator transaction binding the contract method 0xeefe3818.
//
// Solidity: function createOpenAndLock(address registry_, address tub_) returns(address proxy, bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) CreateOpenAndLock(registry_ common.Address, tub_ common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.CreateOpenAndLock(&_SaiProxyCreateAndExecute.TransactOpts, registry_, tub_)
}

// CreateOpenAndLock is a paid mutator transaction binding the contract method 0xeefe3818.
//
// Solidity: function createOpenAndLock(address registry_, address tub_) returns(address proxy, bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) CreateOpenAndLock(registry_ common.Address, tub_ common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.CreateOpenAndLock(&_SaiProxyCreateAndExecute.TransactOpts, registry_, tub_)
}

// CreateOpenLockAndDraw is a paid mutator transaction binding the contract method 0xd3140a65.
//
// Solidity: function createOpenLockAndDraw(address registry_, address tub_, uint256 wad) returns(address proxy, bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) CreateOpenLockAndDraw(opts *bind.TransactOpts, registry_ common.Address, tub_ common.Address, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "createOpenLockAndDraw", registry_, tub_, wad)
}

// CreateOpenLockAndDraw is a paid mutator transaction binding the contract method 0xd3140a65.
//
// Solidity: function createOpenLockAndDraw(address registry_, address tub_, uint256 wad) returns(address proxy, bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) CreateOpenLockAndDraw(registry_ common.Address, tub_ common.Address, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.CreateOpenLockAndDraw(&_SaiProxyCreateAndExecute.TransactOpts, registry_, tub_, wad)
}

// CreateOpenLockAndDraw is a paid mutator transaction binding the contract method 0xd3140a65.
//
// Solidity: function createOpenLockAndDraw(address registry_, address tub_, uint256 wad) returns(address proxy, bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) CreateOpenLockAndDraw(registry_ common.Address, tub_ common.Address, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.CreateOpenLockAndDraw(&_SaiProxyCreateAndExecute.TransactOpts, registry_, tub_, wad)
}

// Draw is a paid mutator transaction binding the contract method 0x0344a36f.
//
// Solidity: function draw(address tub_, bytes32 cup, uint256 wad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) Draw(opts *bind.TransactOpts, tub_ common.Address, cup [32]byte, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "draw", tub_, cup, wad)
}

// Draw is a paid mutator transaction binding the contract method 0x0344a36f.
//
// Solidity: function draw(address tub_, bytes32 cup, uint256 wad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) Draw(tub_ common.Address, cup [32]byte, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Draw(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup, wad)
}

// Draw is a paid mutator transaction binding the contract method 0x0344a36f.
//
// Solidity: function draw(address tub_, bytes32 cup, uint256 wad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) Draw(tub_ common.Address, cup [32]byte, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Draw(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup, wad)
}

// Free is a paid mutator transaction binding the contract method 0xf9ef04be.
//
// Solidity: function free(address tub_, bytes32 cup, uint256 jam) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) Free(opts *bind.TransactOpts, tub_ common.Address, cup [32]byte, jam *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "free", tub_, cup, jam)
}

// Free is a paid mutator transaction binding the contract method 0xf9ef04be.
//
// Solidity: function free(address tub_, bytes32 cup, uint256 jam) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) Free(tub_ common.Address, cup [32]byte, jam *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Free(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup, jam)
}

// Free is a paid mutator transaction binding the contract method 0xf9ef04be.
//
// Solidity: function free(address tub_, bytes32 cup, uint256 jam) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) Free(tub_ common.Address, cup [32]byte, jam *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Free(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup, jam)
}

// Give is a paid mutator transaction binding the contract method 0xda93dfcf.
//
// Solidity: function give(address tub_, bytes32 cup, address lad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) Give(opts *bind.TransactOpts, tub_ common.Address, cup [32]byte, lad common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "give", tub_, cup, lad)
}

// Give is a paid mutator transaction binding the contract method 0xda93dfcf.
//
// Solidity: function give(address tub_, bytes32 cup, address lad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) Give(tub_ common.Address, cup [32]byte, lad common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Give(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup, lad)
}

// Give is a paid mutator transaction binding the contract method 0xda93dfcf.
//
// Solidity: function give(address tub_, bytes32 cup, address lad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) Give(tub_ common.Address, cup [32]byte, lad common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Give(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup, lad)
}

// Lock is a paid mutator transaction binding the contract method 0xbc25a810.
//
// Solidity: function lock(address tub_, bytes32 cup) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) Lock(opts *bind.TransactOpts, tub_ common.Address, cup [32]byte) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "lock", tub_, cup)
}

// Lock is a paid mutator transaction binding the contract method 0xbc25a810.
//
// Solidity: function lock(address tub_, bytes32 cup) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) Lock(tub_ common.Address, cup [32]byte) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Lock(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup)
}

// Lock is a paid mutator transaction binding the contract method 0xbc25a810.
//
// Solidity: function lock(address tub_, bytes32 cup) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) Lock(tub_ common.Address, cup [32]byte) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Lock(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup)
}

// LockAndDraw is a paid mutator transaction binding the contract method 0x516e9aec.
//
// Solidity: function lockAndDraw(address tub_, uint256 wad) returns(bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) LockAndDraw(opts *bind.TransactOpts, tub_ common.Address, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "lockAndDraw", tub_, wad)
}

// LockAndDraw is a paid mutator transaction binding the contract method 0x516e9aec.
//
// Solidity: function lockAndDraw(address tub_, uint256 wad) returns(bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) LockAndDraw(tub_ common.Address, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.LockAndDraw(&_SaiProxyCreateAndExecute.TransactOpts, tub_, wad)
}

// LockAndDraw is a paid mutator transaction binding the contract method 0x516e9aec.
//
// Solidity: function lockAndDraw(address tub_, uint256 wad) returns(bytes32 cup)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) LockAndDraw(tub_ common.Address, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.LockAndDraw(&_SaiProxyCreateAndExecute.TransactOpts, tub_, wad)
}

// Open is a paid mutator transaction binding the contract method 0xb95460f8.
//
// Solidity: function open(address tub_) returns(bytes32)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) Open(opts *bind.TransactOpts, tub_ common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "open", tub_)
}

// Open is a paid mutator transaction binding the contract method 0xb95460f8.
//
// Solidity: function open(address tub_) returns(bytes32)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) Open(tub_ common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Open(&_SaiProxyCreateAndExecute.TransactOpts, tub_)
}

// Open is a paid mutator transaction binding the contract method 0xb95460f8.
//
// Solidity: function open(address tub_) returns(bytes32)
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) Open(tub_ common.Address) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Open(&_SaiProxyCreateAndExecute.TransactOpts, tub_)
}

// Shut is a paid mutator transaction binding the contract method 0xbc244c11.
//
// Solidity: function shut(address tub_, bytes32 cup) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) Shut(opts *bind.TransactOpts, tub_ common.Address, cup [32]byte) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "shut", tub_, cup)
}

// Shut is a paid mutator transaction binding the contract method 0xbc244c11.
//
// Solidity: function shut(address tub_, bytes32 cup) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) Shut(tub_ common.Address, cup [32]byte) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Shut(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup)
}

// Shut is a paid mutator transaction binding the contract method 0xbc244c11.
//
// Solidity: function shut(address tub_, bytes32 cup) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) Shut(tub_ common.Address, cup [32]byte) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Shut(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup)
}

// Wipe is a paid mutator transaction binding the contract method 0xa3dc65a7.
//
// Solidity: function wipe(address tub_, bytes32 cup, uint256 wad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) Wipe(opts *bind.TransactOpts, tub_ common.Address, cup [32]byte, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "wipe", tub_, cup, wad)
}

// Wipe is a paid mutator transaction binding the contract method 0xa3dc65a7.
//
// Solidity: function wipe(address tub_, bytes32 cup, uint256 wad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) Wipe(tub_ common.Address, cup [32]byte, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Wipe(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup, wad)
}

// Wipe is a paid mutator transaction binding the contract method 0xa3dc65a7.
//
// Solidity: function wipe(address tub_, bytes32 cup, uint256 wad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) Wipe(tub_ common.Address, cup [32]byte, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.Wipe(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup, wad)
}

// WipeAndFree is a paid mutator transaction binding the contract method 0xfaed77ab.
//
// Solidity: function wipeAndFree(address tub_, bytes32 cup, uint256 jam, uint256 wad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactor) WipeAndFree(opts *bind.TransactOpts, tub_ common.Address, cup [32]byte, jam *big.Int, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.contract.Transact(opts, "wipeAndFree", tub_, cup, jam, wad)
}

// WipeAndFree is a paid mutator transaction binding the contract method 0xfaed77ab.
//
// Solidity: function wipeAndFree(address tub_, bytes32 cup, uint256 jam, uint256 wad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteSession) WipeAndFree(tub_ common.Address, cup [32]byte, jam *big.Int, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.WipeAndFree(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup, jam, wad)
}

// WipeAndFree is a paid mutator transaction binding the contract method 0xfaed77ab.
//
// Solidity: function wipeAndFree(address tub_, bytes32 cup, uint256 jam, uint256 wad) returns()
func (_SaiProxyCreateAndExecute *SaiProxyCreateAndExecuteTransactorSession) WipeAndFree(tub_ common.Address, cup [32]byte, jam *big.Int, wad *big.Int) (*types.Transaction, error) {
	return _SaiProxyCreateAndExecute.Contract.WipeAndFree(&_SaiProxyCreateAndExecute.TransactOpts, tub_, cup, jam, wad)
}
