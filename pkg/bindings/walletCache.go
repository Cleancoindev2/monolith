// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WalletCacheABI is the input ABI used to generate the binding from.
const WalletCacheABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ens_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultDailyLimit_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_controllerNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_licenceNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenWhitelistNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_walletDeployerNode_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractWallet\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"CachedWallet\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"cacheWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cachedWallets\",\"outputs\":[{\"internalType\":\"contractWallet\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cachedWalletsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"licenceNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"walletCachePop\",\"outputs\":[{\"internalType\":\"contractWallet\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletDeployerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// WalletCacheBin is the compiled bytecode used for deploying new contracts.
var WalletCacheBin = "0x60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976002557fd0ff8bd67f6e25e4e4b010df582a36a0ee9b78e49afe6cc1cff5dd5a830403306003557fe84f90570f13fe09f288f2411ff9cf50da611ed0c7db7f73d48053ffc974d3966004557fd21a61ac2e4de1319ef7c76dd03046ec2e67a92cfc9efb7c28f79a4c323a5b806005553480156100a057600080fd5b506040516155a43803806155a4833981810160405260c08110156100c357600080fd5b508051602082015160408301516060840151608085015160a090950151600180546001600160a01b038088166001600160a01b0319928316179283905560008054909216921691909117905593949293919290918380156101245760028190555b50600780546001600160a01b0319166001600160a01b038816179055600885905582156101515760038390555b811561015d5760048290555b80156101695760058190555b5050505050506154268061017e6000396000f3fe60806040523480156200001157600080fd5b5060043610620000b85760003560e01c8063877337b0116200007b578063877337b0146200011f57806387e8bed11462000129578063a4570e511462000133578063c76b0888146200013d578063e2b4ce971462000147578063fc6cabe7146200015157620000b8565b80633f15457f14620000bd57806360dbc5de14620000e357806371b9076a14620000ef578063747c31d6146200010b5780637d73b2311462000115575b600080fd5b620000c762000171565b604080516001600160a01b039092168252519081900360200190f35b620000ed62000180565b005b620000f9620002a5565b60408051918252519081900360200190f35b620000f9620002ab565b620000c7620002b1565b620000f9620002c0565b620000f9620002c6565b620000c7620002cc565b620000f9620003bb565b620000f9620003c1565b620000c7600480360360208110156200016957600080fd5b5035620003c7565b6007546001600160a01b031681565b60006200018f600554620003ef565b6007546004546001916001600160a01b031690620001ac620003c1565b600354600854604051620001c090620004e9565b6001600160a01b0397881681529515156020870152939095166040808601919091526060850192909252608084015260a083019390935260c082015290519081900360e001906000f0801580156200021c573d6000803e3d6000fd5b50600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0383166001600160a01b0319909116811790915560408051918252519192507f9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e919081900360200190a150565b60065490565b60035481565b6001546001600160a01b031690565b60045481565b60055481565b6000620002db600554620003ef565b6001600160a01b0316336001600160a01b03161462000341576040805162461bcd60e51b815260206004820152601d60248201527f6e6f742063616c6c65642062792077616c6c65742d6465706c6f796572000000604482015290519081900360640190fd5b6006546001111562000357576200035762000180565b600680546000919060001981019081106200036e57fe5b600091825260209091200154600680546001600160a01b03909216925090806200039457fe5b600082815260209020810160001990810180546001600160a01b0319169055019055905090565b60085481565b60025490565b60068181548110620003d557fe5b6000918252602090912001546001600160a01b0316905081565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b1580156200043d57600080fd5b505afa15801562000452573d6000803e3d6000fd5b505050506040513d60208110156200046957600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015620004b557600080fd5b505afa158015620004ca573d6000803e3d6000fd5b505050506040513d6020811015620004e157600080fd5b505192915050565b614efa80620004f88339019056fe60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976002553480156200003557600080fd5b5060405162004efa38038062004efa833981810160405260e08110156200005b57600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151600180546001600160a01b038087166001600160a01b0319928316179283905560008054909216921691909117905594959394929391929091908686858584828585848015620000cd5760028190555b50600380546001600160a01b0319166001600160a01b0384161760ff60a01b1916600160a01b8315158102919091179182905560ff9104166200014757604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b60408051600081526001600160a01b038416602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a15050600d556000620001a56001600160e01b036200022216565b505050505091505060008111620001f3576040805162461bcd60e51b815260206004820152600d60248201526c37379039ba30b13632b1b7b4b760991b604482015290519081900360640190fd5b620002098282026001600160e01b03620003a416565b505050600f94909455506200056d975050505050505050565b606060008060008060008062000240600d546200041160201b60201c565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b1580156200027957600080fd5b505afa1580156200028e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015620002b857600080fd5b8101908080516040519392919084640100000000821115620002d957600080fd5b908301906020820185811115620002ef57600080fd5b82516401000000008111828201881017156200030a57600080fd5b82525081516020918201929091019080838360005b83811015620003395781810151838201526020016200031f565b50505050905090810190601f168015620003675780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979f939e50919c509a5098509096509294509192505050565b6009819055600a819055600b819055620003ce42620151806200050b602090811b6200418817901c565b600c81905560408051838152602081019290925280517f47dcdfb9e867032608a011a7b2438466389c6eba4d51bf520b402083def29caa9281900390910190a150565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b1580156200045f57600080fd5b505afa15801562000474573d6000803e3d6000fd5b505050506040513d60208110156200048b57600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015620004d757600080fd5b505afa158015620004ec573d6000803e3d6000fd5b505050506040513d60208110156200050357600080fd5b505192915050565b60008282018381101562000566576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b61497d806200057d6000396000f3fe6080604052600436106102465760003560e01c80636c37a7e611610139578063be40ba79116100b6578063ce0b5bd51161007a578063ce0b5bd514610cd6578063d251fefc14610d00578063de212bf314610d2a578063e2b4ce9714610d3f578063f36febda14610d54578063f421764814610d8d57610246565b8063be40ba7914610b91578063beabacc814610ba6578063cbd2ac6814610be9578063cccdc55614610c13578063cd7958dd14610c2857610246565b8063877337b0116100fd578063877337b014610a665780638da5cb5b14610a7b57806390e690c714610a90578063aaf1fc6214610aa5578063b242e53414610b5657610246565b80636c37a7e614610966578063715018a614610990578063747c31d6146109a55780637d73b231146109ba5780637fd004fa146109eb57610246565b80633a43199f116101c757806346efe0ed1161018b57806346efe0ed146107c557806347b55a9d146108975780634d9aa248146108ac5780635adc02ab146108c15780636137d670146108eb57610246565b80633a43199f1461066d5780633b8252fa146106995780633f579f42146106c0578063458d07f21461078657806345b12efc146107b057610246565b806320c13b0b1161020e57806320c13b0b146104e05780632121dc75146105ab57806326d05ab2146105c0578063294f4025146105d557806332531c3c1461063a57610246565b806301ffc9a714610282578063100f23fd146102ca5780631127b57e146102f65780631626ba7e146103805780631aa21fba14610455575b6040805133815234602082015281517f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874929181900390910190a1005b34801561028e57600080fd5b506102b6600480360360208110156102a557600080fd5b50356001600160e01b031916610e08565b604080519115158252519081900360200190f35b3480156102d657600080fd5b506102f4600480360360208110156102ed57600080fd5b5035610e21565b005b34801561030257600080fd5b5061030b610fc6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561034557818101518382015260200161032d565b50505050905090810190601f1680156103725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038c57600080fd5b50610438600480360360408110156103a357600080fd5b81359190810190604081016020820135600160201b8111156103c457600080fd5b8201836020820111156103d657600080fd5b803590602001918460018302840111600160201b831117156103f757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610fe7945050505050565b604080516001600160e01b03199092168252519081900360200190f35b34801561046157600080fd5b506102f46004803603604081101561047857600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156104a257600080fd5b8201836020820111156104b457600080fd5b803590602001918460208302840111600160201b831117156104d557600080fd5b509092509050611055565b3480156104ec57600080fd5b506104386004803603604081101561050357600080fd5b810190602081018135600160201b81111561051d57600080fd5b82018360208201111561052f57600080fd5b803590602001918460018302840111600160201b8311171561055057600080fd5b919390929091602081019035600160201b81111561056d57600080fd5b82018360208201111561057f57600080fd5b803590602001918460018302840111600160201b831117156105a057600080fd5b5090925090506111db565b3480156105b757600080fd5b506102b66112b0565b3480156105cc57600080fd5b506102b66112c1565b3480156105e157600080fd5b506105ea6112ca565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561062657818101518382015260200161060e565b505050509050019250505060405180910390f35b34801561064657600080fd5b506102b66004803603602081101561065d57600080fd5b50356001600160a01b031661132c565b6102f46004803603604081101561068357600080fd5b506001600160a01b038135169060200135611341565b3480156106a557600080fd5b506106ae611577565b60408051918252519081900360200190f35b3480156106cc57600080fd5b5061030b600480360360608110156106e357600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561071257600080fd5b82018360208201111561072457600080fd5b803590602001918460018302840111600160201b8311171561074557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061157d945050505050565b34801561079257600080fd5b506102f4600480360360208110156107a957600080fd5b5035611a64565b3480156107bc57600080fd5b506106ae611b5c565b3480156107d157600080fd5b506102f4600480360360608110156107e857600080fd5b81359190810190604081016020820135600160201b81111561080957600080fd5b82018360208201111561081b57600080fd5b803590602001918460018302840111600160201b8311171561083c57600080fd5b919390929091602081019035600160201b81111561085957600080fd5b82018360208201111561086b57600080fd5b803590602001918460018302840111600160201b8311171561088c57600080fd5b509092509050611b7a565b3480156108a357600080fd5b506105ea611e97565b3480156108b857600080fd5b506106ae611ef7565b3480156108cd57600080fd5b506102f4600480360360208110156108e457600080fd5b5035611efd565b3480156108f757600080fd5b506102f46004803603602081101561090e57600080fd5b810190602081018135600160201b81111561092857600080fd5b82018360208201111561093a57600080fd5b803590602001918460208302840111600160201b8311171561095b57600080fd5b5090925090506121dc565b34801561097257600080fd5b506102f46004803603602081101561098957600080fd5b5035612402565b34801561099c57600080fd5b506102f4612540565b3480156109b157600080fd5b506106ae61263e565b3480156109c657600080fd5b506109cf612644565b604080516001600160a01b039092168252519081900360200190f35b3480156109f757600080fd5b506102f460048036036020811015610a0e57600080fd5b810190602081018135600160201b811115610a2857600080fd5b820183602082011115610a3a57600080fd5b803590602001918460208302840111600160201b83111715610a5b57600080fd5b509092509050612653565b348015610a7257600080fd5b506106ae612995565b348015610a8757600080fd5b506109cf61299b565b348015610a9c57600080fd5b506102f46129aa565b348015610ab157600080fd5b506102f460048036036020811015610ac857600080fd5b810190602081018135600160201b811115610ae257600080fd5b820183602082011115610af457600080fd5b803590602001918460018302840111600160201b83111715610b1557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612a08945050505050565b348015610b6257600080fd5b506102f460048036036040811015610b7957600080fd5b506001600160a01b0381351690602001351515612b45565b348015610b9d57600080fd5b506102b6612cff565b348015610bb257600080fd5b506102f460048036036060811015610bc957600080fd5b506001600160a01b03813581169160208101359091169060400135612d0e565b348015610bf557600080fd5b506102f460048036036020811015610c0c57600080fd5b5035612e81565b348015610c1f57600080fd5b506106ae61320d565b348015610c3457600080fd5b506106ae60048036036020811015610c4b57600080fd5b810190602081018135600160201b811115610c6557600080fd5b820183602082011115610c7757600080fd5b803590602001918460208302840111600160201b83111715610c9857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613213945050505050565b348015610ce257600080fd5b506102f460048036036020811015610cf957600080fd5b503561326d565b348015610d0c57600080fd5b506109cf60048036036020811015610d2357600080fd5b5035613416565b348015610d3657600080fd5b506102b661343d565b348015610d4b57600080fd5b506106ae61344b565b348015610d6057600080fd5b506106ae60048036036040811015610d7757600080fd5b506001600160a01b038135169060200135613451565b348015610d9957600080fd5b506102f460048036036020811015610db057600080fd5b810190602081018135600160201b811115610dca57600080fd5b820183602082011115610ddc57600080fd5b803590602001918460208302840111600160201b83111715610dfd57600080fd5b5090925090506135da565b6001600160e01b031981166301ffc9a760e01b14919050565b610e2a3361392c565b80610e395750610e3933613940565b610e83576040805162461bcd60e51b815260206004820152601660248201527537b7363c9037bbb732b93e3e31b7b73a3937b63632b960511b604482015290519081900360640190fd5b60085460ff16610ed2576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b610f356006805480602002602001604051908101604052809291908181526020018280548015610f2b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f0d575b5050505050613213565b8114610f725760405162461bcd60e51b81526004018080602001828103825260238152602001806148f06023913960400191505060405180910390fd5b610f7e60066000614758565b6008805460ff19169055604080513381526020810183905281517f7794eff834d760583543e6e510e717a5e66d2c064e225f4db448343c3e66afcf929181900390910190a150565b604051806040016040528060058152602001640322e332e360dc1b81525081565b600080610ffa848463ffffffff6139d416565b90506110058161392c565b611043576040805162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b604482015290519081900360640190fd5b50630b135d3f60e11b90505b92915050565b61105e3361392c565b8061106857503330145b6110ac576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b806110f5576040805162461bcd60e51b8152602060048201526014602482015273617373657420617272617920697320656d70747960601b604482015290519081900360640190fd5b60005b818110156111585760006111273085858581811061111257fe5b905060200201356001600160a01b0316613ac2565b905061114f8585858581811061113957fe5b905060200201356001600160a01b031683612d0e565b506001016110f8565b507fd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad83838360405180846001600160a01b03166001600160a01b03168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b6000808585604051602001808383808284376040805191909301818103601f190182528084528151602092830120601f8b01839004830282018301909452898152929650630b135d3f60e11b95506112529450869350899150889081908401838280828437600092019190915250610fe792505050565b6001600160e01b0319161461129e576040805162461bcd60e51b815260206004820152600d60248201526c1cda59c81b9bdd081d985b1a59609a1b604482015290519081900360640190fd5b506320c13b0b60e01b95945050505050565b600354600160a01b900460ff165b90565b60085460ff1681565b6060600780548060200260200160405190810160405280929190818152602001828054801561132257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611304575b5050505050905090565b60046020526000908152604090205460ff1681565b61134a3361392c565b8061135457503330145b611398576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b6113a182613b6d565b6113e7576040805162461bcd60e51b8152602060048201526012602482015271746f6b656e206e6f74206c6f616461626c6560701b604482015290519081900360640190fd5b60006113f38383613451565b90506113fe81613b87565b600061140b600f54613c32565b90506001600160a01b038416156114b3576114366001600160a01b038516828563ffffffff613cf416565b806001600160a01b0316631b3c96b485856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561149657600080fd5b505af11580156114aa573d6000803e3d6000fd5b5050505061152d565b806001600160a01b0316631b3c96b48486866040518463ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001828152602001925050506000604051808303818588803b15801561151357600080fd5b505af1158015611527573d6000803e3d6000fd5b50505050505b604080516001600160a01b03861681526020810185905281517f5f65674bec9af81f71be68674135a0ea3f163fb91984e3893d06da9f6ea2ce8a929181900390910190a150505050565b600b5490565b60606115883361392c565b8061159257503330145b6115d6576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b6001600160a01b03841660009081526004602052604090205460ff166115ff576115ff83613b87565b611611846001600160a01b0316613e0c565b8015611621575061162184613e12565b15611800576000806116338685613e2c565b6001600160a01b038216600090815260046020526040902054919350915060ff166116715760006116648783613451565b905061166f81613b87565b505b61168a6001600160a01b0387168563ffffffff613f3616565b604080516020808252818301909252606091602082018180388339019050509050600160f81b81601f815181106116bd57fe5b60200101906001600160f81b031916908160001a9053507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138787878460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611758578181015183820152602001611740565b50505050905090810190601f1680156117855780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156117b85781810151838201526020016117a0565b50505050905090810190601f1680156117e55780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19250611a5d915050565b60006060856001600160a01b031685856040518082805190602001908083835b6020831061183f5780518252601f199092019160209182019101611820565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146118a1576040519150601f19603f3d011682016040523d82523d6000602084013e6118a6565b606091505b50915091508181906119365760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118fb5781810151838201526020016118e3565b50505050905090810190601f1680156119285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138686868460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156119bb5781810151838201526020016119a3565b50505050905090810190601f1680156119e85780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611a1b578181015183820152602001611a03565b50505050905090810190601f168015611a485780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19150505b9392505050565b611a6d3361392c565b80611a7757503330145b611abb576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b600b8190556009548111611b2557600a54811015611b1757600a819055600c5460408051838152602081019290925280517fb8d7171194501073e2d8151eeccf1398143c5df9acfb9868d0539a256164f6ca9281900390910190a15b611b20816140f4565b611b59565b6040805182815290517f065b9ade648867cf901516060dd7a78fad8ab1aec5eb80ee57acbb30badf86ec9181900360200190a15b50565b6000600c54421115611b7157506009546112be565b50600a546112be565b611b8333613940565b611bd1576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b6000611c2286868660405160200180806339363c1d60e11b81525060040184815260200183838082843780830192505050935050505060405160208183030381529060405280519060200120614137565b9050631626ba7e60e01b6001600160e01b031916611c768285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fe792505050565b6001600160e01b03191614611cc2576040805162461bcd60e51b815260206004820152600d60248201526c1cda59c81b9bdd081d985b1a59609a1b604482015290519081900360640190fd5b600e548614611d04576040805162461bcd60e51b81526020600482015260096024820152687478207265706c617960b81b604482015290519081900360640190fd5b600e80546001019055604051600090606090309088908890808383808284376040519201945060009350909150508083038183865af19150503d8060008114611d69576040519150601f19603f3d011682016040523d82523d6000602084013e611d6e565b606091505b5091509150818190611dc15760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156118fb5781810151838201526020016118e3565b507f823dbcf2b7b0f265871963ca65ac033f6b4c71e0d82cd123d2ff23d752dc21c187878360405180806020018060200183810383528686828181526020019250808284376000838201819052601f909101601f191690920185810384528651815286516020918201939188019250908190849084905b83811015611e50578181015183820152602001611e38565b50505050905090810190601f168015611e7d5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050505050505050565b60606006805480602002602001604051908101604052809291908181526020018280548015611322576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611304575050505050905090565b60095490565b611f0633613940565b611f54576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b60085460ff16611fa3576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b6120046006805480602002602001604051908101604052809291908181526020018280548015610f2b576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610f0d575050505050613213565b81146120415760405162461bcd60e51b81526004018080602001828103825260238152602001806148f06023913960400191505060405180910390fd5b60005b60065481101561212857600460006006838154811061205f57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16612120576001600460006006848154811061209e57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790556006805460059190839081106120e457fe5b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b039092169190911790555b600101612044565b507fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a33600660405180836001600160a01b03166001600160a01b031681526020018060200182810382528381815481526020019150805480156121b457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612196575b5050935050505060405180910390a16121cf60066000614758565b506008805460ff19169055565b6121e53361392c565b806121ef57503330145b612233576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b60085460ff1615801561224e5750600854610100900460ff16155b61229f576040805162461bcd60e51b815260206004820152601c60248201527f77686974656c6973742073756d62697373696f6e2070656e64696e6700000000604482015290519081900360640190fd5b60085462010000900460ff166122f8576040805162461bcd60e51b81526020600482015260196024820152781dda1a5d195b1a5cdd081b9bdd081a5b9a5d1a585b1a5e9959603a1b604482015290519081900360640190fd5b8061233c576040805162461bcd60e51b815260206004820152600f60248201526e195b5c1d1e481dda1a5d195b1a5cdd608a1b604482015290519081900360640190fd5b61234860078383614776565b506008805461ff00191661010017905560408051602080840282810182019093528382527ffbc0e5ca6c7e4858daf0fdb185ef5186203e74ec9c64737e93c0aeaec596e1d192859285926123b79285918591829185019084908082843760009201919091525061321392505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b61240b33613940565b612459576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b80600b54146124995760405162461bcd60e51b81526004018080602001828103825260228152602001806148606022913960400191505060405180910390fd5b60095481116124d95760405162461bcd60e51b81526004018080602001828103825260288152602001806148386028913960400191505060405180910390fd5b600a8190556124f1426201518063ffffffff61418816565b600c819055600a5460408051918252602082019290925281517fb8d7171194501073e2d8151eeccf1398143c5df9acfb9868d0539a256164f6ca929181900390910190a1611b59600b546140f4565b6125493361392c565b612593576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b600354600160a01b900460ff166125f1576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b600380546001600160a01b0319169055604080516000808252602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a1565b600f5490565b6001546001600160a01b031690565b61265c3361392c565b8061266657503330145b6126aa576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b60085460ff161580156126c55750600854610100900460ff16155b612716576040805162461bcd60e51b815260206004820152601c60248201527f77686974656c6973742073756d62697373696f6e2070656e64696e6700000000604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b81518110156128325761276f82828151811061276257fe5b602002602001015161392c565b156127ba576040805162461bcd60e51b8152602060048201526016602482015275636f6e7461696e73206f776e6572206164647265737360501b604482015290519081900360640190fd5b60006001600160a01b03168282815181106127d157fe5b60200260200101516001600160a01b0316141561282a576040805162461bcd60e51b8152602060048201526012602482015271636f6e7461696e732030206164647265737360701b604482015290519081900360640190fd5b60010161274a565b5060085462010000900460ff1661288c576040805162461bcd60e51b81526020600482015260196024820152781dda1a5d195b1a5cdd081b9bdd081a5b9a5d1a585b1a5e9959603a1b604482015290519081900360640190fd5b816128d0576040805162461bcd60e51b815260206004820152600f60248201526e195b5c1d1e481dda1a5d195b1a5cdd608a1b604482015290519081900360640190fd5b6128dc60068484614776565b506008805460ff1916600117905560408051602080850282810182019093528482527f9c80b3b5f68b3e017766d59e8d09b34efe6462b05c398f35cab9e271d9bc3b9c92869286926129499285918591829185019084908082843760009201919091525061321392505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b600d5490565b6003546001600160a01b031690565b6129b33361392c565b6129fd576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b600e80546001019055565b612a113361392c565b80612a1b57503330145b612a5f576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8051602080820191906000808060605b86851015612b3b57612a8886605463ffffffff6141e216565b888601805160148201516034909201805193995060609190911c96509094509092509050612acd6054612ac1878563ffffffff61418816565b9063ffffffff61418816565b945086851115612b14576040805162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b604482015290519081900360640190fd5b81612b2a57506040805160208101909152600081525b612b3584848361157d565b50612a6f565b5050505050505050565b612b4e3361392c565b612b98576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b600354600160a01b900460ff16612bf6576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b6001600160a01b038216612c3b5760405162461bcd60e51b81526004018080602001828103825260238152602001806148a36023913960400191505060405180910390fd5b6003805460ff60a01b1916600160a01b8315150217905580612c9457604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b600354604080516001600160a01b039283168152918416602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b60085462010000900460ff1681565b612d173361392c565b80612d2157503330145b612d65576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8080612da2576040805162461bcd60e51b8152602060048201526007602482015266076616c75653d360cc1b604482015290519081900360640190fd5b6001600160a01b038416612ded576040805162461bcd60e51b815260206004820152600d60248201526c064657374696e6174696f6e3d3609c1b604482015290519081900360640190fd5b6001600160a01b03841660009081526004602052604090205460ff16612e26576000612e198484613451565b9050612e2481613b87565b505b612e3184848461423f565b604080516001600160a01b0380871682528516602082015280820184905290517fd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee9181900360600190a150505050565b612e8a33613940565b612ed8576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b600854610100900460ff16612f2c576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b612f8d6007805480602002602001604051908101604052809291908181526020018280548015610f2b576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610f0d575050505050613213565b8114612fca5760405162461bcd60e51b81526004018080602001828103825260238152602001806148f06023913960400191505060405180910390fd5b60005b600754811015613158576004600060078381548110612fe857fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615613150576000600460006007848154811061302857fe5b6000918252602080832091909101546001600160a01b031683528201929092526040018120805460ff1916921515929092179091555b60055461307290600163ffffffff6141e216565b81101561313a576007828154811061308657fe5b600091825260209091200154600580546001600160a01b0390921691839081106130ac57fe5b6000918252602090912001546001600160a01b03161415613132576005805460001981019081106130d957fe5b600091825260209091200154600580546001600160a01b0390921691839081106130ff57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061313a565b60010161305e565b50600580549061314e9060001983016147d9565b505b600101612fcd565b507fd218c430fa348f4ce67791021b6b89c0c3eacd4ead1d8f5b83c60038ec28249b33600760405180836001600160a01b03166001600160a01b031681526020018060200182810382528381815481526020019150805480156131e457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116131c6575b5050935050505060405180910390a16131ff60076000614758565b506008805461ff0019169055565b600e5481565b60008160405160200180828051906020019060200280838360005b8381101561324657818101518382015260200161322e565b50505050905001915050604051602081830303815290604052805190602001209050919050565b6132763361392c565b80613285575061328533613940565b6132cf576040805162461bcd60e51b815260206004820152601660248201527537b7363c9037bbb732b93e3e31b7b73a3937b63632b960511b604482015290519081900360640190fd5b600854610100900460ff16613323576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b6133846007805480602002602001604051908101604052809291908181526020018280548015610f2b576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610f0d575050505050613213565b81146133c15760405162461bcd60e51b81526004018080602001828103825260238152602001806148f06023913960400191505060405180910390fd5b6133cd60076000614758565b6008805461ff0019169055604080513381526020810183905281517f13c935eb475aa0f6e931fece83e2ac44569ce2d53460d29a6dedab40b965c8a3929181900390910190a150565b6005818154811061342357fe5b6000918252602090912001546001600160a01b0316905081565b600854610100900460ff1681565b60025490565b600061345b6142a3565b6001600160a01b0316836001600160a01b0316141561347b57508061104f565b816001600160a01b0384161561351657600080600061349987614319565b50505093509350935050806134b557600094505050505061104f565b816134f0576040805162461bcd60e51b81526020600482015260066024820152650726174653d360d41b604482015290519081900360640190fd5b61351083613504888563ffffffff6144ab16565b9063ffffffff61450416565b93505050505b600080600061352361456e565b5050509350935093505080613575576040805162461bcd60e51b8152602060048201526013602482015272746f6b656e206e6f7420617661696c61626c6560681b604482015290519081900360640190fd5b816135bb576040805162461bcd60e51b81526020600482015260116024820152700737461626c65636f696e20726174653d3607c1b604482015290519081900360640190fd5b6135cf82613504868663ffffffff6144ab16565b979650505050505050565b6135e33361392c565b806135ed57503330145b613631576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b81518110156137405761367d82828151811061276257fe5b156136c8576040805162461bcd60e51b8152602060048201526016602482015275636f6e7461696e73206f776e6572206164647265737360501b604482015290519081900360640190fd5b60006001600160a01b03168282815181106136df57fe5b60200260200101516001600160a01b03161415613738576040805162461bcd60e51b8152602060048201526012602482015271636f6e7461696e732030206164647265737360701b604482015290519081900360640190fd5b600101613665565b5060085462010000900460ff1615613797576040805162461bcd60e51b81526020600482015260156024820152741dda1a5d195b1a5cdd081a5b9a5d1a585b1a5e9959605a1b604482015290519081900360640190fd5b60005b8281101561388857600460008585848181106137b257fe5b602090810292909201356001600160a01b03168352508101919091526040016000205460ff16613880576001600460008686858181106137ee57fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600584848381811061384357fe5b835460018101855560009485526020948590200180546001600160a01b0319166001600160a01b0395909202939093013593909316929092179055505b60010161379a565b506008805462ff0000191662010000179055604080513380825260208201838152600580549484018590527fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a949293909290919060608301908490801561391857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116138fa575b5050935050505060405180910390a1505050565b6003546001600160a01b0390811691161490565b600061394d600254613c32565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156139a257600080fd5b505afa1580156139b6573d6000803e3d6000fd5b505050506040513d60208110156139cc57600080fd5b505192915050565b600081516041146139e75750600061104f565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115613a2d576000935050505061104f565b8060ff16601b14158015613a4557508060ff16601c14155b15613a56576000935050505061104f565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015613aad573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60006001600160a01b03821615613b5c57816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015613b2957600080fd5b505afa158015613b3d573d6000803e3d6000fd5b505050506040513d6020811015613b5357600080fd5b5051905061104f565b506001600160a01b0382163161104f565b600080613b7983614319565b509098975050505050505050565b613b8f6146dd565b80600a541015613bd9576040805162461bcd60e51b815260206004820152601060248201526f185d985a5b18589b194f185b5bdd5b9d60821b604482015290519081900360640190fd5b600a54613bec908263ffffffff6141e216565b600a819055600c5460408051928352602083019190915280517fb8d7171194501073e2d8151eeccf1398143c5df9acfb9868d0539a256164f6ca9281900390910190a150565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015613c7f57600080fd5b505afa158015613c93573d6000803e3d6000fd5b505050506040513d6020811015613ca957600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b1580156139a257600080fd5b801580613d7a575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015613d4c57600080fd5b505afa158015613d60573d6000803e3d6000fd5b505050506040513d6020811015613d7657600080fd5b5051155b613db55760405162461bcd60e51b81526004018080602001828103825260368152602001806149136036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052613e07908490613f36565b505050565b3b151590565b600080613e1e83614319565b509198975050505050505050565b600080613e3a600d54613c32565b6001600160a01b031663afc72e9385856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613eae578181015183820152602001613e96565b50505050905090810190601f168015613edb5780820380516001836020036101000a031916815260200191505b509350505050604080518083038186803b158015613ef857600080fd5b505afa158015613f0c573d6000803e3d6000fd5b505050506040513d6040811015613f2257600080fd5b508051602090910151909590945092505050565b613f48826001600160a01b0316613e0c565b613f99576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310613fd75780518252601f199092019160209182019101613fb8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614039576040519150601f19603f3d011682016040523d82523d6000602084013e61403e565b606091505b509150915081614095576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156140ee578080602001905160208110156140b157600080fd5b50516140ee5760405162461bcd60e51b815260040180806020018281038252602a8152602001806148c6602a913960400191505060405180910390fd5b50505050565b6009819055604080513381526020810183905281517f2a843f39f13315c4c1a9bc53a1a32162858f272f3b2d0c656f409431251b6768929181900390910190a150565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b600082820183811015611a5d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115614239576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b038216614289576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015614283573d6000803e3d6000fd5b50613e07565b613e076001600160a01b038316848363ffffffff61470616565b60006142b0600d54613c32565b6001600160a01b031663e9cbd8226040518163ffffffff1660e01b815260040160206040518083038186803b1580156142e857600080fd5b505afa1580156142fc573d6000803e3d6000fd5b505050506040513d602081101561431257600080fd5b5051905090565b606060008060008060008061432f600d54613c32565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060006040518083038186803b15801561438457600080fd5b505afa158015614398573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e08110156143c157600080fd5b8101908080516040519392919084600160201b8211156143e057600080fd5b9083019060208201858111156143f557600080fd5b8251600160201b81118282018810171561440e57600080fd5b82525081516020918201929091019080838360005b8381101561443b578181015183820152602001614423565b50505050905090810190601f1680156144685780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979e50929c50909a509850965094509192505050919395979092949650565b6000826144ba5750600061104f565b828202828482816144c757fe5b0414611a5d5760405162461bcd60e51b81526004018080602001828103825260218152602001806148826021913960400191505060405180910390fd5b600080821161455a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b600082848161456557fe5b04949350505050565b6060600080600080600080614584600d54613c32565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b1580156145bc57600080fd5b505afa1580156145d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e08110156145f957600080fd5b8101908080516040519392919084600160201b82111561461857600080fd5b90830190602082018581111561462d57600080fd5b8251600160201b81118282018810171561464657600080fd5b82525081516020918201929091019080838360005b8381101561467357818101518382015260200161465b565b50505050905090810190601f1680156146a05780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979f939e50919c509a5098509096509294509192505050565b600c54421115614704576146fa426201518063ffffffff61418816565b600c55600954600a555b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052613e07908490613f36565b5080546000825590600052602060002090810190611b5991906147f9565b8280548282559060005260206000209081019282156147c9579160200282015b828111156147c95781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614796565b506147d5929150614813565b5090565b815481835581811115613e0757600083815260209020613e079181019083015b6112be91905b808211156147d557600081556001016147ff565b6112be91905b808211156147d55780546001600160a01b031916815560010161481956fe6c696d69742073686f756c642062652067726561746572207468616e2063757272656e74206f6e65636f6e6669726d65642f7375626d6974746564206c696d6974206d69736d61746368536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f776e65722063616e6e6f742062652073657420746f207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f6e2d6d61746368696e672070656e64696e672077686974656c69737420686173685361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a265627a7a72315820e980a98d70e16eae39fd3c994ae24a25be65f6a2d28dc91298bf1cdb58274ced64736f6c634300050f0032a265627a7a723158201f88bc1265711ec707accc664d12b9d3d4e7a8eacc7107731ffd848043f258ce64736f6c634300050f0032"

// DeployWalletCache deploys a new Ethereum contract, binding an instance of WalletCache to it.
func DeployWalletCache(auth *bind.TransactOpts, backend bind.ContractBackend, _ens_ common.Address, _defaultDailyLimit_ *big.Int, _controllerNode_ [32]byte, _licenceNode_ [32]byte, _tokenWhitelistNode_ [32]byte, _walletDeployerNode_ [32]byte) (common.Address, *types.Transaction, *WalletCache, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WalletCacheBin), backend, _ens_, _defaultDailyLimit_, _controllerNode_, _licenceNode_, _tokenWhitelistNode_, _walletDeployerNode_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// WalletCache is an auto generated Go binding around an Ethereum contract.
type WalletCache struct {
	WalletCacheCaller     // Read-only binding to the contract
	WalletCacheTransactor // Write-only binding to the contract
	WalletCacheFilterer   // Log filterer for contract events
}

// WalletCacheCaller is an auto generated read-only Go binding around an Ethereum contract.
type WalletCacheCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WalletCacheTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WalletCacheFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WalletCacheSession struct {
	Contract     *WalletCache      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletCacheCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WalletCacheCallerSession struct {
	Contract *WalletCacheCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// WalletCacheTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WalletCacheTransactorSession struct {
	Contract     *WalletCacheTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WalletCacheRaw is an auto generated low-level Go binding around an Ethereum contract.
type WalletCacheRaw struct {
	Contract *WalletCache // Generic contract binding to access the raw methods on
}

// WalletCacheCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WalletCacheCallerRaw struct {
	Contract *WalletCacheCaller // Generic read-only contract binding to access the raw methods on
}

// WalletCacheTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WalletCacheTransactorRaw struct {
	Contract *WalletCacheTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWalletCache creates a new instance of WalletCache, bound to a specific deployed contract.
func NewWalletCache(address common.Address, backend bind.ContractBackend) (*WalletCache, error) {
	contract, err := bindWalletCache(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// NewWalletCacheCaller creates a new read-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheCaller(address common.Address, caller bind.ContractCaller) (*WalletCacheCaller, error) {
	contract, err := bindWalletCache(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheCaller{contract: contract}, nil
}

// NewWalletCacheTransactor creates a new write-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheTransactor(address common.Address, transactor bind.ContractTransactor) (*WalletCacheTransactor, error) {
	contract, err := bindWalletCache(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheTransactor{contract: contract}, nil
}

// NewWalletCacheFilterer creates a new log filterer instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheFilterer(address common.Address, filterer bind.ContractFilterer) (*WalletCacheFilterer, error) {
	contract, err := bindWalletCache(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WalletCacheFilterer{contract: contract}, nil
}

// bindWalletCache binds a generic wrapper to an already deployed contract.
func bindWalletCache(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.WalletCacheCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transact(opts, method, params...)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCaller) CachedWallets(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWallets", arg0)
	return *ret0, err
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCallerSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) CachedWalletsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWalletsCount")
	return *ret0, err
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) DefaultDailyLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "defaultDailyLimit")
	return *ret0, err
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheSession) DefaultDailyLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultDailyLimit(&_WalletCache.CallOpts)
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) DefaultDailyLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultDailyLimit(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) LicenceNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "licenceNode")
	return *ret0, err
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) WalletDeployerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "walletDeployerNode")
	return *ret0, err
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactor) CacheWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "cacheWallet")
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactorSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactor) WalletCachePop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "walletCachePop")
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactorSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCacheCachedWalletIterator is returned from FilterCachedWallet and is used to iterate over the raw logs and unpacked data for CachedWallet events raised by the WalletCache contract.
type WalletCacheCachedWalletIterator struct {
	Event *WalletCacheCachedWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletCacheCachedWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletCacheCachedWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletCacheCachedWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletCacheCachedWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletCacheCachedWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletCacheCachedWallet represents a CachedWallet event raised by the WalletCache contract.
type WalletCacheCachedWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCachedWallet is a free log retrieval operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) FilterCachedWallet(opts *bind.FilterOpts) (*WalletCacheCachedWalletIterator, error) {

	logs, sub, err := _WalletCache.contract.FilterLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return &WalletCacheCachedWalletIterator{contract: _WalletCache.contract, event: "CachedWallet", logs: logs, sub: sub}, nil
}

// WatchCachedWallet is a free log subscription operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) WatchCachedWallet(opts *bind.WatchOpts, sink chan<- *WalletCacheCachedWallet) (event.Subscription, error) {

	logs, sub, err := _WalletCache.contract.WatchLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletCacheCachedWallet)
				if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCachedWallet is a log parse operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) ParseCachedWallet(log types.Log) (*WalletCacheCachedWallet, error) {
	event := new(WalletCacheCachedWallet)
	if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}
