// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OracleABI is the input ABI used to generate the binding from.
const OracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_myid\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryID\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoCompareAPIPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"name\":\"_tokenList\",\"type\":\"address[]\"}],\"name\":\"updateTokenRatesList\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"updateTokenRates\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"updateCryptoCompareAPIPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver_\",\"type\":\"address\"},{\"name\":\"_ens_\",\"type\":\"address\"},{\"name\":\"_controllerNode_\",\"type\":\"bytes32\"},{\"name\":\"_tokenWhitelistNode_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"SetGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_queryID\",\"type\":\"bytes32\"}],\"name\":\"RequestedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"FailedUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"VerifiedProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"SetCryptoComparePublicKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"}]"

// OracleBin is the compiled bytecode used for deploying new contracts.
const OracleBin = `60806040523480156200001157600080fd5b5060405160808062005da8833981018060405260808110156200003357600080fd5b50805160208083015160408085015160609586015160018054600160a060020a03808716600160a060020a0319928316179283905560008054909216921691909117905560078290556008819055825196870183528287529495929490939092919062005d68908301398051620000b39160099160209091019062000a33565b5060038054600160a060020a031916600160a060020a038616179055620000e86402540be40064010000000062000126810204565b6200011c7ff00000000000000000000000000000000000000000000000000000000000000064010000000062000368810204565b5050505062000ad5565b600354600160a060020a031615806200015c57506003546200015a90600160a060020a0316640100000000620005af810204565b155b156200017957620001776000640100000000620005b3810204565b505b600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620001e657600080fd5b505af1158015620001fb573d6000803e3d6000fd5b505050506040513d60208110156200021257600080fd5b5051600254600160a060020a03908116911614620002e557600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200029757600080fd5b505af1158015620002ac573d6000803e3d6000fd5b505050506040513d6020811015620002c357600080fd5b505160028054600160a060020a031916600160a060020a039092169190911790555b600254604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b1580156200034c57600080fd5b505af115801562000361573d6000803e3d6000fd5b5050505050565b600354600160a060020a031615806200039e57506003546200039c90600160a060020a0316640100000000620005af810204565b155b15620003bb57620003b96000640100000000620005b3810204565b505b600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200042857600080fd5b505af11580156200043d573d6000803e3d6000fd5b505050506040513d60208110156200045457600080fd5b5051600254600160a060020a039081169116146200052757600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620004d957600080fd5b505af1158015620004ee573d6000803e3d6000fd5b505050506040513d60208110156200050557600080fd5b505160028054600160a060020a031916600160a060020a039092169190911790555b600254604080517f688dcfd70000000000000000000000000000000000000000000000000000000081527fff00000000000000000000000000000000000000000000000000000000000000841660048201529051600160a060020a039092169163688dcfd79160248082019260009290919082900301818387803b1580156200034c57600080fd5b3b90565b6000620005c8640100000000620005ce810204565b92915050565b600080620005f9731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed640100000000620005af810204565b1115620006775760038054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e657400000000000000000000000000000000000000000060208201526200066e9064010000000062000a1a810204565b50600162000a17565b6000620006a173c03a2615d5efaf5f49f60b7bb6583eaec212fdf1640100000000620005af810204565b1115620007165760038054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e33000000000000000000000000000000000000000060208201526200066e9064010000000062000a1a810204565b60006200074073b7a07bcf2ba2f2703b24c0691b5278999c59ac7e640100000000620005af810204565b1115620007b55760038054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e000000000000000000000000000000000000000000000060208201526200066e9064010000000062000a1a810204565b6000620007df73146500cfd35b22e4a392fe0adc06de1a1368ed48640100000000620005af810204565b1115620008545760038054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b65627900000000000000000000000000000000000000000060208201526200066e9064010000000062000a1a810204565b60006200087e73a2998efd205fb9d4b4963afb70778d6354ad3a41640100000000620005af810204565b1115620008f35760038054600160a060020a03191673a2998efd205fb9d4b4963afb70778d6354ad3a4117905560408051808201909152600a81527f6574685f676f65726c690000000000000000000000000000000000000000000060208201526200066e9064010000000062000a1a810204565b60006200091d736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475640100000000620005af810204565b111562000953575060038054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475179055600162000a17565b60006200097d7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf640100000000620005af810204565b1115620009b3575060038054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf179055600162000a17565b6000620009dd7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa640100000000620005af810204565b111562000a13575060038054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa179055600162000a17565b5060005b90565b805162000a2f90600490602084019062000a33565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a7657805160ff191683800117855562000aa6565b8280016001018555821562000aa6579182015b8281111562000aa657825182559160200191906001019062000a89565b5062000ab492915062000ab8565b5090565b62000a1791905b8082111562000ab4576000815560010162000abf565b6152838062000ae56000396000f3fe6080604052600436106100a05760003560e060020a90048063937f54a411610068578063937f54a414610384578063996cba68146103fb578063b598f8821461043e578063c2c3d0541461045b578063ca6ad1e4146104d8578063e2b4ce9714610502576100a0565b806327dc297e146100a557806338bbfa50146101615780633acbe96e146102a25780637d73b2311461032c578063877337b01461035d575b600080fd5b3480156100b157600080fd5b5061015f600480360360408110156100c857600080fd5b813591908101906040810160208201356401000000008111156100ea57600080fd5b8201836020820111156100fc57600080fd5b8035906020019184600183028401116401000000008311171561011e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610517945050505050565b005b34801561016d57600080fd5b5061015f6004803603606081101561018457600080fd5b813591908101906040810160208201356401000000008111156101a657600080fd5b8201836020820111156101b857600080fd5b803590602001918460018302840111640100000000831117156101da57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561022d57600080fd5b82018360208201111561023f57600080fd5b8035906020019184600183028401116401000000008311171561026157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610537945050505050565b3480156102ae57600080fd5b506102b7610717565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102f15781810151838201526020016102d9565b50505050905090810190601f16801561031e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033857600080fd5b506103416107a5565b60408051600160a060020a039092168252519081900360200190f35b34801561036957600080fd5b506103726107b5565b60408051918252519081900360200190f35b61015f6004803603604081101561039a57600080fd5b813591908101906040810160208201356401000000008111156103bc57600080fd5b8201836020820111156103ce57600080fd5b803590602001918460208302840111640100000000831117156103f057600080fd5b5090925090506107bb565b34801561040757600080fd5b5061015f6004803603606081101561041e57600080fd5b50600160a060020a0381358116916020810135909116906040013561085c565b61015f6004803603602081101561045457600080fd5b5035610915565b34801561046757600080fd5b5061015f6004803603602081101561047e57600080fd5b81019060208101813564010000000081111561049957600080fd5b8201836020820111156104ab57600080fd5b803590602001918460018302840111640100000000831117156104cd57600080fd5b509092509050610980565b3480156104e457600080fd5b5061015f600480360360208110156104fb57600080fd5b5035610a5a565b34801561050e57600080fd5b50610372610b00565b6040805160008152602081019091526105339083908390610537565b5050565b61053f610b06565b600160a060020a0316331461059e576040805160e560020a62461bcd02815260206004820152601660248201527f73656e646572206973206e6f74206f7261636c697a6500000000000000000000604482015290519081900360640190fd5b6000838152600a6020526040812054600160a060020a031690806105c183610cf9565b965050509450505050811515610621576040805160e560020a62461bcd02815260206004820152601760248201527f746f6b656e206d75737420626520617661696c61626c65000000000000000000604482015290519081900360640190fd5b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260009384936106c2938b938b93909290918301828280156106b75780601f1061068c576101008083540402835291602001916106b7565b820191906000526020600020905b81548152906001019060200180831161069a57829003601f168201915b505050505086610e29565b9092509050811561070d5760006106e06106db896113e3565b611706565b60008a8152600a602052604090208054600160a060020a031916905590508161070a878383611719565b50505b5050505050505050565b6009805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561079d5780601f106107725761010080835404028352916020019161079d565b820191906000526020600020905b81548152906001019060200180831161078057829003601f168201915b505050505081565b600154600160a060020a03165b90565b60085490565b6107c4336117ab565b151561081a576040805160e560020a62461bcd02815260206004820152601a60248201527f73656e646572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015290519081900360640190fd5b6108578383838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061184292505050565b505050565b61086533611b9d565b15156108bb576040805160e560020a62461bcd02815260206004820152601660248201527f73656e646572206973206e6f7420616e2061646d696e00000000000000000000604482015290519081900360640190fd5b6108c6838383611c02565b60408051600160a060020a0380861682528416602082015280820183905290517ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839181900360600190a1505050565b61091e336117ab565b1515610974576040805160e560020a62461bcd02815260206004820152601a60248201527f73656e646572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015290519081900360640190fd5b61097d81611c68565b50565b61098933611b9d565b15156109df576040805160e560020a62461bcd02815260206004820152601660248201527f73656e646572206973206e6f7420616e2061646d696e00000000000000000000604482015290519081900360640190fd5b6109eb60098383614fc4565b506040805133808252602082018381529282018490527fc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa929091859185919060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b610a63336117ab565b1515610ab9576040805160e560020a62461bcd02815260206004820152601a60248201527f73656e646572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015290519081900360640190fd5b610ac281611f4b565b604080513381526020810183905281517ffbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4929181900390910190a150565b60075490565b600354600090600160a060020a03161580610b335750600354610b3190600160a060020a0316612133565b155b15610b4457610b426000612137565b505b600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b9757600080fd5b505af1158015610bab573d6000803e3d6000fd5b505050506040513d6020811015610bc157600080fd5b5051600254600160a060020a03908116911614610c7757600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610c2b57600080fd5b505af1158015610c3f573d6000803e3d6000fd5b505050506040513d6020811015610c5557600080fd5b505160028054600160a060020a031916600160a060020a039092169190911790555b600260009054906101000a9004600160a060020a0316600160a060020a031663c281d19e6040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610cc857600080fd5b505afa158015610cdc573d6000803e3d6000fd5b505050506040513d6020811015610cf257600080fd5b5051905090565b6060600080600080600080610d0f600854612141565b600160a060020a0316631f69565f896040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060006040518083038186803b158015610d6757600080fd5b505afa158015610d7b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015610da457600080fd5b810190808051640100000000811115610dbc57600080fd5b82016020810184811115610dcf57600080fd5b8151640100000000811182820187101715610de957600080fd5b5050602082015160408301516060840151608085015160a086015160c090960151949e50929c50909a509850965090945092505050919395979092949650565b60008060a58551141515610e87576040805160e560020a62461bcd02815260206004820152601460248201527f696e76616c69642070726f6f66206c656e677468000000000000000000000000604482015290519081900360640190fd5b6041856001815181101515610e9857fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16141515610f0c576040805160e560020a62461bcd02815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015290519081900360640190fd5b60408051604180825260808201909252606091602082018180388339019050509050610f3e8660026041846000612235565b865190915060609087906044908110610f5357fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16610100886041600201815181101515610f8557fe5b90602001015160f860020a900460f860020a0260f860020a900460ff160201141515610ffb576040805160e560020a62461bcd02815260206004820152601660248201527f696e76616c69642068656164657273206c656e67746800000000000000000000604482015290519081900360640190fd5b604080516060808252608082019092528160208201818038833901905050905061102b8760456060846000612235565b9050611038818388612281565b151561108e576040805160e560020a62461bcd02815260206004820152601160248201527f696e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b6040805160148082528183019092526060916020820181803883390190505090506110bf82600b6014846000612235565b90506000806110ce8389612345565b909250905081151561112a576040805160e560020a62461bcd02815260206004820152600c60248201527f696e76616c696420646174650000000000000000000000000000000000000000604482015290519081900360640190fd5b60408051602c808252606082810190935260208201818038833901905050905061115a856034602c846000612235565b90506111658161278a565b8051906020012060028d6040516020018082805190602001908083835b602083106111a15780518252601f199092019160209182019101611182565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106112045780518252601f1990920191602091820191016111e5565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611243573d6000803e3d6000fd5b5050506040513d602081101561125857600080fd5b5051604080516020818101939093528151808203840181529082019091528051910120146112d0576040805160e560020a62461bcd02815260206004820152601860248201527f726573756c742068617368206e6f74206d61746368696e670000000000000000604482015290519081900360640190fd5b7f0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd98a8d604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561133457818101518382015260200161131c565b50505050905090810190601f1680156113615780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561139457818101518382015260200161137c565b50505050905090810190601f1680156113c15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15060019b909a5098505050505050505050565b60606000826040516020018082805190602001908083835b6020831061141a5780518252601f1990920191602091820191016113fb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040525190506008811180156114625750601c8111155b15156114b8576040805160e560020a62461bcd02815260206004820152601260248201527f6d6973666f726d617474656420696e7075740000000000000000000000000000604482015290519081900360640190fd5b60408051600780825281830190925260609160208201818038833901905050905061154f846040516020018082805190602001908083835b6020831061150f5780518252601f1990920191602091820191016114f0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260006007846000612235565b50604080517f7b22455448223a000000000000000000000000000000000000000000000000008152905190819003600701902081516020830120146115de576040805160e560020a62461bcd02815260206004820152600f60248201527f707265666978206d69736d617463680000000000000000000000000000000000604482015290519081900360640190fd5b6115e6615042565b6115ef85612ec5565b905061163f6116326040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250612ec5565b829063ffffffff612eea16565b50806000015192506116956116886040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250612ec5565b829063ffffffff612f0416565b5080516000198401146116f2576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f74206a736f6e20666f726d61740000000000000000000000000000000000604482015290519081900360640190fd5b6116fb81612f62565b93505050505b919050565b6000611713826012612fb2565b92915050565b611724600854612141565b600160a060020a031663d545782e8484846040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018381526020018281526020019350505050600060405180830381600087803b15801561178e57600080fd5b505af11580156117a2573d6000803e3d6000fd5b50505050505050565b60006117b8600754612141565b600160a060020a031663b429afeb836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b505050506040513d602081101561183a57600080fd5b505192915050565b8051151561189d576040805160208082526010908201527f656d70747920746f6b656e206c697374000000000000000000000000000000008183015290516000805160206151b18339815191529181900360600190a1610533565b30600160a060020a03163181516118d160408051908101604052806003815260200160ea60020a6215549302815250613b21565b02111561192b576040805160208082526014908201527f696e73756666696369656e742062616c616e63650000000000000000000000008183015290516000805160206151b18339815191529181900360600190a1610533565b611933615042565b611955606060405190810160405280603281526020016150e260329139612ec5565b905061195f615042565b61199d6040805190810160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250612ec5565b905060005b8351811015611b9657606060006119cf86848151811015156119c057fe5b90602001906020020151610cf9565b505050935050509150801515611a2f576040805160e560020a62461bcd02815260206004820152601760248201527f746f6b656e206d75737420626520617661696c61626c65000000000000000000604482015290519081900360640190fd5b611a37615042565b611a4083612ec5565b604080518082019091526003815260ea60020a62155493026020820152909150600090611a9590611a8f88611a83611a7e8c8863ffffffff613d6b16565b612ec5565b9063ffffffff613d6b16565b8b613ddf565b90508785815181101515611aa557fe5b6020908102919091018101516000838152600a90925260409091208054600160a060020a031916600160a060020a039092169190911790557f47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe611b0783612f62565b826040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611b4b578181015183820152602001611b33565b50505050905090810190601f168015611b785780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050600190920191506119a29050565b5050505050565b6000611baa600754612141565b600160a060020a03166324d7806c836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561181057600080fd5b600160a060020a0382161515611c4e57604051600160a060020a0384169082156108fc029083906000818181858888f19350505050158015611c48573d6000803e3d6000fd5b50610857565b610857600160a060020a038316848363ffffffff6141e416565b6060611c72614264565b9050805160001415611cd1576040805160208082526009908201527f6e6f20746f6b656e7300000000000000000000000000000000000000000000008183015290516000805160206151b18339815191529181900360600190a1610533565b30600160a060020a0316318151611d0560408051908101604052806003815260200160ea60020a6215549302815250613b21565b021115611d5f576040805160208082526014908201527f696e73756666696369656e742062616c616e63650000000000000000000000008183015290516000805160206151b18339815191529181900360600190a1610533565b611d67615042565b611d89606060405190810160405280603281526020016150e260329139612ec5565b9050611d93615042565b611dd16040805190810160405280601481526020017f267473796d733d455448267369676e3d74727565000000000000000000000000815250612ec5565b905060005b8351811015611b96576060611df285838151811015156119c057fe5b5050505050509050611e02615042565b611e0b82612ec5565b604080518082019091526003815260ea60020a62155493026020820152909150600090611e4f90611e4987611a83611a7e8b8863ffffffff613d6b16565b8a613ddf565b90508684815181101515611e5f57fe5b6020908102919091018101516000838152600a90925260409091208054600160a060020a031916600160a060020a039092169190911790557f47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe611ec183612f62565b826040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611f05578181015183820152602001611eed565b50505050905090810190601f168015611f325780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050600101611dd6565b600354600160a060020a03161580611f755750600354611f7390600160a060020a0316612133565b155b15611f8657611f846000612137565b505b600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611fd957600080fd5b505af1158015611fed573d6000803e3d6000fd5b505050506040513d602081101561200357600080fd5b5051600254600160a060020a039081169116146120b957600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561206d57600080fd5b505af1158015612081573d6000803e3d6000fd5b505050506040513d602081101561209757600080fd5b505160028054600160a060020a031916600160a060020a039092169190911790555b600254604080517fca6ad1e4000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a039092169163ca6ad1e49160248082019260009290919082900301818387803b15801561211f57600080fd5b505af1158015611b96573d6000803e3d6000fd5b3b90565b600061171361433c565b60008054604080517f0178b8bf000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a0390921691630178b8bf91602480820192602092909190829003018186803b1580156121a757600080fd5b505afa1580156121bb573d6000803e3d6000fd5b505050506040513d60208110156121d157600080fd5b5051604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a0390921691633b3b57de91602480820192602092909190829003018186803b15801561181057600080fd5b81516060908483019081111561224a57600080fd5b60208087019084015b86886020010182101561227457888201518682015260209182019101612253565b5093979650505050505050565b60008060006123176002876040518082805190602001908083835b602083106122bb5780518252601f19909201916020918201910161229c565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156122fa573d6000803e3d6000fd5b5050506040513d602081101561230f57600080fd5b5051866146ec565b92509050808015612339575083516020850120600160a060020a038381169116145b925050505b9392505050565b600080836040516020018082805190602001908083835b6020831061237b5780518252601f19909201916020918201910161235c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040525160141415156123bb57fe5b6123c3615042565b6123cc85612ec5565b90506123d6615042565b6124146040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250612ec5565b905061241e615042565b61245c6040805190810160405280600181526020017f2000000000000000000000000000000000000000000000000000000000000000815250612ec5565b9050600061248061247b612476868563ffffffff612eea16565b612f62565b61477b565b90506000811180156124925750602081105b15156124e8576040805160e560020a62461bcd02815260206004820152600960248201527f646179206572726f720000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000612505612500612476878663ffffffff612eea16565b614788565b60ff16905060008111801561251a5750600d81105b1515612570576040805160e560020a62461bcd02815260206004820152600b60248201527f6d6f6e7468206572726f72000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061258861247b612476888763ffffffff612eea16565b90506107e18111801561259c5750610bb881105b15156125f2576040805160e560020a62461bcd02815260206004820152600a60248201527f79656172206572726f7200000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061260a61247b612476898963ffffffff612eea16565b905060198110612664576040805160e560020a62461bcd02815260206004820152600a60248201527f686f7572206572726f7200000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061267c61247b6124768a8a63ffffffff612eea16565b9050603c81106126d6576040805160e560020a62461bcd02815260206004820152600c60248201527f6d696e757465206572726f720000000000000000000000000000000000000000604482015290519081900360640190fd5b60006126ee61247b6124768b8b63ffffffff612eea16565b9050603c8110612748576040805160e560020a62461bcd02815260206004820152600c60248201527f7365636f6e64206572726f720000000000000000000000000000000000000000604482015290519081900360640190fd5b60008183606402856127100289620f424002896305f5e10002896402540be40002010101010190508c8111819b509b50505050505050505050505b9250929050565b60606000806000806000865190506060816040519080825280601f01601f1916602001820160405280156127c5576020820181803883390190505b509050600080831180156127da575060048306155b1515612830576040805160e560020a62461bcd02815260206004820152601760248201527f696e76616c69642062617365363420656e636f64696e67000000000000000000604482015290519081900360640190fd5b604080517f3d000000000000000000000000000000000000000000000000000000000000008152905190819003600101902089518a90600119860190811061287457fe5b602091018101516040805160f860020a92839004909202600160f860020a031916828401528051600181840301815260219092019052805191012014156128c05760028303925061294c565b604080517f3d000000000000000000000000000000000000000000000000000000000000008152905190819003600101902089518a90600019860190811061290457fe5b602091018101516040805160f860020a92839004909202600160f860020a0319168284015280516001818403018152602190920190528051910120141561294c576001830392505b60048084040260005b81811015612bc85760a060405190810160405280607b8152602001615136607b91398b5160018301928d91811061298857fe5b90602001015160f860020a900460f860020a0260f860020a900460ff168151811015156129b157fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b8152602001615136607b91398b5160018301928d9181106129f157fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16815181101515612a1a57fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b8152602001615136607b91398b5160018301928d918110612a5a57fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16815181101515612a8357fe5b90602001015160f860020a900460f860020a02965060a060405190810160405280607b8152602001615136607b91398b5160018301928d918110612ac357fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16815181101515612aec57fe5b0160200151845160f860020a9182900490910296506001840193600160f860020a03198b81166004026010828d16041716918691908110612b2957fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c16041716918691908110612b6e57fe5b906020010190600160f860020a031916908160001a90535083516001840193600160f860020a0319898116604002891716918691908110612bab57fe5b906020010190600160f860020a031916908160001a905350612955565b81850360021415612cea5760a060405190810160405280607b8152602001615136607b91398b5160018301928d918110612bfe57fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16815181101515612c2757fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b8152602001615136607b91398b5160018301928d918110612c6757fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16815181101515612c9057fe5b0160200151845160f860020a9182900490910298506001840193600160f860020a03198b81166004026010828d16041716918691908110612ccd57fe5b906020010190600160f860020a031916908160001a905350612eb6565b81850360031415612eb65760a060405190810160405280607b8152602001615136607b91398b5160018301928d918110612d2057fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16815181101515612d4957fe5b90602001015160f860020a900460f860020a02985060a060405190810160405280607b8152602001615136607b91398b5160018301928d918110612d8957fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16815181101515612db257fe5b90602001015160f860020a900460f860020a02975060a060405190810160405280607b8152602001615136607b91398b5160018301928d918110612df257fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16815181101515612e1b57fe5b0160200151845160f860020a9182900490910297506001840193600160f860020a03198b81166004026010828d16041716918691908110612e5857fe5b906020010190600160f860020a031916908160001a905350835160018401936010600160f860020a03198b8116919091026004828c16041716918691908110612e9d57fe5b906020010190600160f860020a031916908160001a9053505b50508152979650505050505050565b612ecd615042565b506040805180820190915281518152602082810190820152919050565b612ef2615042565b612efd838383614b73565b5092915050565b612f0c615042565b815183511015612f1d575081611713565b8151835160208086015190850151910191909103906001908214612f4b575082516020840151819020908220145b8015612f5957835185510385525b50929392505050565b60608082600001516040519080825280601f01601f191660200182016040528015612f94576020820181803883390190505b5090506000602082019050612efd8185602001518660000151614be4565b60008281808080808080808080805b8b51811015613837578b517f3000000000000000000000000000000000000000000000000000000000000000908d9083908110612ffa57fe5b90602001015160f860020a900460f860020a02600160f860020a0319161015801561307057508b517f3900000000000000000000000000000000000000000000000000000000000000908d908390811061305057fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b801561307a575083155b1561314a5784156130e8576130968a600a63ffffffff614c2216565b8c51909a506130db906030908e90849081106130ae57fe5b90602001015160f860020a900460f860020a0260f860020a90040360ff168b614c8290919063ffffffff16565b9950600190970196613145565b600195506130fd8b600a63ffffffff614c2216565b8c51909b50613142906030908e908490811061311557fe5b90602001015160f860020a900460f860020a0260f860020a90040360ff168c614c8290919063ffffffff16565b9a505b61382f565b8b517f3000000000000000000000000000000000000000000000000000000000000000908d908390811061317a57fe5b90602001015160f860020a900460f860020a02600160f860020a031916101580156131f057508b517f3900000000000000000000000000000000000000000000000000000000000000908d90839081106131d057fe5b90602001015160f860020a900460f860020a02600160f860020a03191611155b80156131f95750835b1561325b5761320f89600a63ffffffff614c2216565b8c51909950613254906030908e908490811061322757fe5b90602001015160f860020a900460f860020a0260f860020a90040360ff168a614c8290919063ffffffff16565b985061382f565b8b517f2e00000000000000000000000000000000000000000000000000000000000000908d908390811061328b57fe5b90602001015160f860020a900460f860020a02600160f860020a03191614156133ba57851515613305576040805160e560020a62461bcd02815260206004820152601560248201527f6d697373696e6720696e74656772616c20706172740000000000000000000000604482015290519081900360640190fd5b841561335b576040805160e560020a62461bcd02815260206004820152601760248201527f6475706c696361746520646563696d616c20706f696e74000000000000000000604482015290519081900360640190fd5b83156133b1576040805160e560020a62461bcd02815260206004820152601660248201527f646563696d616c206166746572206578706f6e656e7400000000000000000000604482015290519081900360640190fd5b6001945061382f565b8b517f2d00000000000000000000000000000000000000000000000000000000000000908d90839081106133ea57fe5b90602001015160f860020a900460f860020a02600160f860020a031916141561351c578215613463576040805160e560020a62461bcd02815260206004820152600b60248201527f6475706c6963617465202d000000000000000000000000000000000000000000604482015290519081900360640190fd5b81156134b9576040805160e560020a62461bcd02815260206004820152600a60248201527f6578747261207369676e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600187018114613513576040805160e560020a62461bcd02815260206004820152601e60248201527f2d207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b6001925061382f565b8b517f2b00000000000000000000000000000000000000000000000000000000000000908d908390811061354c57fe5b90602001015160f860020a900460f860020a02600160f860020a031916141561367e5781156135c5576040805160e560020a62461bcd02815260206004820152600b60248201527f6475706c6963617465202b000000000000000000000000000000000000000000604482015290519081900360640190fd5b821561361b576040805160e560020a62461bcd02815260206004820152600a60248201527f6578747261207369676e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600187018114613675576040805160e560020a62461bcd02815260206004820152601e60248201527f2b207369676e206e6f7420696d6d6564696174656c7920616674657220650000604482015290519081900360640190fd5b6001915061382f565b8b517f4500000000000000000000000000000000000000000000000000000000000000908d90839081106136ae57fe5b90602001015160f860020a900460f860020a02600160f860020a031916148061372157508b517f6500000000000000000000000000000000000000000000000000000000000000908d908390811061370257fe5b90602001015160f860020a900460f860020a02600160f860020a031916145b156137df5785151561377d576040805160e560020a62461bcd02815260206004820152601560248201527f6d697373696e6720696e74656772616c20706172740000000000000000000000604482015290519081900360640190fd5b83156137d3576040805160e560020a62461bcd02815260206004820152601960248201527f6475706c6963617465206578706f6e656e742073796d626f6c00000000000000604482015290519081900360640190fd5b6001935080965061382f565b6040805160e560020a62461bcd02815260206004820152600d60248201527f696e76616c696420646967697400000000000000000000000000000000000000604482015290519081900360640190fd5b600101612fc1565b82806138405750815b156138595760028701811161385457600080fd5b61386e565b831561386e5760018701811161386e57600080fd5b8215613904578d89106138fa57604e8e8a03106138d5576040805160e560020a62461bcd02815260206004820152600d60248201527f6578706f6e656e74203e20373700000000000000000000000000000000000000604482015290519081900360640190fd5b8d8903600a0a8b8115156138e557fe5b049c506117139b505050505050505050505050565b888e039d50613917565b6139148e8a63ffffffff614c8216565b9d505b878e10613a0157604e88106139605760405160e560020a62461bcd0281526004018080602001828103825260228152602001806151146022913960400191505060405180910390fd5b6139748b600a8a900a63ffffffff614c2216565b9a506139868b8b63ffffffff614c8216565b9a50604e888f03106139e2576040805160e560020a62461bcd02815260206004820152600d60248201527f6578706f6e656e74203e20373700000000000000000000000000000000000000604482015290519081900360640190fd5b6139fa888f03600a0a8c614c2290919063ffffffff16565b9a50613ac6565b968d900396604e8810613a485760405160e560020a62461bcd0281526004018080602001828103825260228152602001806151146022913960400191505060405180910390fd5b87600a0a8a811515613a5657fe5b049950604e8e10613a9b5760405160e560020a62461bcd0281526004018080602001828103825260228152602001806151146022913960400191505060405180910390fd5b613ab18e600a0a8c614c2290919063ffffffff16565b9a50613ac38b8b63ffffffff614c8216565b9a505b66400000000000008b10613b0e5760405160e560020a62461bcd02815260040180806020018281038252603c8152602001806151f2603c913960400191505060405180910390fd5b50989d9c50505050505050505050505050565b600354600090600160a060020a03161580613b4e5750600354613b4c90600160a060020a0316612133565b155b15613b5f57613b5d6000612137565b505b600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613bb257600080fd5b505af1158015613bc6573d6000803e3d6000fd5b505050506040513d6020811015613bdc57600080fd5b5051600254600160a060020a03908116911614613c9257600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613c4657600080fd5b505af1158015613c5a573d6000803e3d6000fd5b505050506040513d6020811015613c7057600080fd5b505160028054600160a060020a031916600160a060020a039092169190911790555b6002546040517f524f3889000000000000000000000000000000000000000000000000000000008152602060048201818152855160248401528551600160a060020a039094169363524f388993879383926044909201919085019080838360005b83811015613d0b578181015183820152602001613cf3565b50505050905090810190601f168015613d385780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015613d5757600080fd5b505af1158015611824573d6000803e3d6000fd5b60608082600001518460000151016040519080825280601f01601f191660200182016040528015613da3576020820181803883390190505b5090506000602082019050613dc18186602001518760000151614be4565b845160208501518551613dd79284019190614be4565b509392505050565b600354600090600160a060020a03161580613e0c5750600354613e0a90600160a060020a0316612133565b155b15613e1d57613e1b6000612137565b505b600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613e7057600080fd5b505af1158015613e84573d6000803e3d6000fd5b505050506040513d6020811015613e9a57600080fd5b5051600254600160a060020a03908116911614613f5057600360009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613f0457600080fd5b505af1158015613f18573d6000803e3d6000fd5b505050506040513d6020811015613f2e57600080fd5b505160028054600160a060020a031916600160a060020a039092169190911790555b600254604080517f2ef3accc0000000000000000000000000000000000000000000000000000000081526024810185905260048101918252865160448201528651600093600160a060020a031692632ef3accc928992889291829160649091019060208601908083838c5b83811015613fd3578181015183820152602001613fbb565b50505050905090810190601f1680156140005780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561402057600080fd5b505af1158015614034573d6000803e3d6000fd5b505050506040513d602081101561404a57600080fd5b50519050670de0b6b3a76400003a84020181111561406c57506000905061233e565b6002546040517fc51be90f00000000000000000000000000000000000000000000000000000000815260006004820181815260648301879052608060248401908152895160848501528951600160a060020a039095169463c51be90f948794938c938c938c93604481019160a49091019060208801908083838c5b838110156140ff5781810151838201526020016140e7565b50505050905090810190601f16801561412c5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561415f578181015183820152602001614147565b50505050905090810190601f16801561418c5780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b1580156141ae57600080fd5b505af11580156141c2573d6000803e3d6000fd5b50505050506040513d60208110156141d957600080fd5b505195945050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610857908490614cdf565b6060614271600854612141565b600160a060020a031663443dd2a46040518163ffffffff1660e060020a02815260040160006040518083038186803b1580156142ac57600080fd5b505afa1580156142c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156142e957600080fd5b81019080805164010000000081111561430157600080fd5b8201602081018481111561431457600080fd5b815185602082028301116401000000008211171561433157600080fd5b509094505050505090565b60008061435c731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612133565b11156143cd5760038054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81527f6574685f6d61696e6e657400000000000000000000000000000000000000000060208201526143c590614eaf565b5060016107b2565b60006143ec73c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612133565b11156144555760038054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81527f6574685f726f707374656e33000000000000000000000000000000000000000060208201526143c590614eaf565b600061447473b7a07bcf2ba2f2703b24c0691b5278999c59ac7e612133565b11156144dd5760038054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981527f6574685f6b6f76616e000000000000000000000000000000000000000000000060208201526143c590614eaf565b60006144fc73146500cfd35b22e4a392fe0adc06de1a1368ed48612133565b11156145655760038054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81527f6574685f72696e6b65627900000000000000000000000000000000000000000060208201526143c590614eaf565b600061458473a2998efd205fb9d4b4963afb70778d6354ad3a41612133565b11156145ed5760038054600160a060020a03191673a2998efd205fb9d4b4963afb70778d6354ad3a4117905560408051808201909152600a81527f6574685f676f65726c690000000000000000000000000000000000000000000060208201526143c590614eaf565b600061460c736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475612133565b1115614640575060038054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016107b2565b600061465f7320e12a1f859b3feae5fb2a0a32c18f5a65555bbf612133565b1115614693575060038054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016107b2565b60006146b27351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa612133565b11156146e6575060038054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016107b2565b50600090565b60008060008060008551604114151561470f575060009350839250612783915050565b50505060208301516040840151606085015160001a601b60ff8216101561473457601b015b8060ff16601b1415801561474c57508060ff16601c14155b15614761575060009350839250612783915050565b61476d87828585614ec2565b945094505050509250929050565b6000611713826000612fb2565b600080826040516020018082805190602001908083835b602083106147be5780518252601f19909201916020918201910161479f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060405180807f4a616e000000000000000000000000000000000000000000000000000000000081525060030190506040518091039020811415614842576001915050611701565b604080517f466562000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614885576002915050611701565b604080517f4d61720000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156148c8576003915050611701565b604080517f41707200000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561490b576004915050611701565b604080517f4d617900000000000000000000000000000000000000000000000000000000008152905190819003600301902081141561494e576005915050611701565b604080517f4a756e000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614991576006915050611701565b604080517f4a756c0000000000000000000000000000000000000000000000000000000000815290519081900360030190208114156149d4576007915050611701565b604080517f417567000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614a17576008915050611701565b604080517f536570000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614a5a576009915050611701565b604080517f4f6374000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614a9d57600a915050611701565b604080517f4e6f76000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614ae057600b915050611701565b604080517f446563000000000000000000000000000000000000000000000000000000000081529051908190036003019020811415614b2357600c915050611701565b6040805160e560020a62461bcd02815260206004820152601160248201527f6e6f7420612076616c6964206d6f6e7468000000000000000000000000000000604482015290519081900360640190fd5b614b7b615042565b6000614b998560000151866020015186600001518760200151614eff565b60208087018051918601919091528051820385528651905191925001811415614bc55760008552614bdb565b8351835186519101900385528351810160208601525b50909392505050565b5b60208110614c04578151835260209283019290910190601f1901614be5565b905182516020929092036101000a6000190180199091169116179052565b6000821515614c3357506000611713565b828202828482811515614c4257fe5b041461233e5760405160e560020a62461bcd0281526004018080602001828103825260218152602001806151d16021913960400191505060405180910390fd5b60008282018381101561233e576040805160e560020a62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b614cf182600160a060020a0316614fbc565b1515614d47576040805160e560020a62461bcd02815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b6000606083600160a060020a0316836040518082805190602001908083835b60208310614d855780518252601f199092019160209182019101614d66565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614de7576040519150601f19603f3d011682016040523d82523d6000602084013e614dec565b606091505b5091509150811515614e48576040805160e560020a62461bcd02815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b600081511115614ea957808060200190516020811015614e6757600080fd5b50511515614ea95760405160e560020a62461bcd02815260040180806020018281038252602a81526020018061522e602a913960400191505060405180910390fd5b50505050565b8051610533906004906020840190615059565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b60008381868511614fad5760208511614f725783518251600019600860208990030260020a011991821690888a018890039083165b808314614f6457818610614f52578a8a019650505050505050614fb4565b50600190940180519094908316614f34565b859650505050505050614fb4565b508383206000905b8588038211614fab5785832081811415614f9a5783945050505050614fb4565b506001928301929190910190614f7a565b505b5050508284015b949350505050565b6000903b1190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106150055782800160ff19823516178555615032565b82800160010185558215615032579182015b82811115615032578235825591602001919060010190615017565b5061503e9291506150c7565b5090565b604080518082019091526000808252602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061509a57805160ff1916838001178555615032565b82800160010185558215615032579182015b828111156150325782518255916020019190600101906150ac565b6107b291905b8082111561503e57600081556001016150cd56fe68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d6d6f7265207468616e20373720646563696d616c2064696769747320706172736564000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e003e003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f10111213141516171819000000003f001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132334eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776e756d626572206578636565646564206d6178696d756d20616c6c6f7765642076616c756520666f722073616665206a736f6e206465636f64696e675361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a165627a7a7230582074e91562d758898e8d7d48a326befd9fc2c7e9bbffccb139b5e5c80454c4e2aa0029a0f4f688350018ad1b9785991c0bde5f704b005dc79972b114dbed4a615a983710bfc647ebe5a320daa28771dce6a2d104f5efa2e4a85ba3760b76d46f8571ca`

// DeployOracle deploys a new Ethereum contract, binding an instance of Oracle to it.
func DeployOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _resolver_ common.Address, _ens_ common.Address, _controllerNode_ [32]byte, _tokenWhitelistNode_ [32]byte) (common.Address, *types.Transaction, *Oracle, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OracleBin), backend, _resolver_, _ens_, _controllerNode_, _tokenWhitelistNode_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// Oracle is an auto generated Go binding around an Ethereum contract.
type Oracle struct {
	OracleCaller     // Read-only binding to the contract
	OracleTransactor // Write-only binding to the contract
	OracleFilterer   // Log filterer for contract events
}

// OracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type OracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OracleSession struct {
	Contract     *Oracle           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OracleCallerSession struct {
	Contract *OracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OracleTransactorSession struct {
	Contract     *OracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type OracleRaw struct {
	Contract *Oracle // Generic contract binding to access the raw methods on
}

// OracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OracleCallerRaw struct {
	Contract *OracleCaller // Generic read-only contract binding to access the raw methods on
}

// OracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OracleTransactorRaw struct {
	Contract *OracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOracle creates a new instance of Oracle, bound to a specific deployed contract.
func NewOracle(address common.Address, backend bind.ContractBackend) (*Oracle, error) {
	contract, err := bindOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Oracle{OracleCaller: OracleCaller{contract: contract}, OracleTransactor: OracleTransactor{contract: contract}, OracleFilterer: OracleFilterer{contract: contract}}, nil
}

// NewOracleCaller creates a new read-only instance of Oracle, bound to a specific deployed contract.
func NewOracleCaller(address common.Address, caller bind.ContractCaller) (*OracleCaller, error) {
	contract, err := bindOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OracleCaller{contract: contract}, nil
}

// NewOracleTransactor creates a new write-only instance of Oracle, bound to a specific deployed contract.
func NewOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*OracleTransactor, error) {
	contract, err := bindOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OracleTransactor{contract: contract}, nil
}

// NewOracleFilterer creates a new log filterer instance of Oracle, bound to a specific deployed contract.
func NewOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*OracleFilterer, error) {
	contract, err := bindOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OracleFilterer{contract: contract}, nil
}

// bindOracle binds a generic wrapper to an already deployed contract.
func bindOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.OracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.OracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Oracle *OracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Oracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Oracle *OracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Oracle *OracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Oracle.Contract.contract.Transact(opts, method, params...)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) ControllerNode() ([32]byte, error) {
	return _Oracle.Contract.ControllerNode(&_Oracle.CallOpts)
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleCaller) CryptoCompareAPIPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "cryptoCompareAPIPublicKey")
	return *ret0, err
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleSession) CryptoCompareAPIPublicKey() ([]byte, error) {
	return _Oracle.Contract.CryptoCompareAPIPublicKey(&_Oracle.CallOpts)
}

// CryptoCompareAPIPublicKey is a free data retrieval call binding the contract method 0x3acbe96e.
//
// Solidity: function cryptoCompareAPIPublicKey() constant returns(bytes)
func (_Oracle *OracleCallerSession) CryptoCompareAPIPublicKey() ([]byte, error) {
	return _Oracle.Contract.CryptoCompareAPIPublicKey(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_Oracle *OracleCallerSession) EnsRegistry() (common.Address, error) {
	return _Oracle.Contract.EnsRegistry(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Oracle.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_Oracle *OracleCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _Oracle.Contract.TokenWhitelistNode(&_Oracle.CallOpts)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactor) Callback(opts *bind.TransactOpts, _queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "__callback", _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(bytes32 _queryID, string _result, bytes _proof) returns()
func (_Oracle *OracleTransactorSession) Callback(_queryID [32]byte, _result string, _proof []byte) (*types.Transaction, error) {
	return _Oracle.Contract.Callback(&_Oracle.TransactOpts, _queryID, _result, _proof)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactor) Claim(opts *bind.TransactOpts, _to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "claim", _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0x996cba68.
//
// Solidity: function claim(address _to, address _asset, uint256 _amount) returns()
func (_Oracle *OracleTransactorSession) Claim(_to common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.Claim(&_Oracle.TransactOpts, _to, _asset, _amount)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactor) SetCustomGasPrice(opts *bind.TransactOpts, _gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "setCustomGasPrice", _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// SetCustomGasPrice is a paid mutator transaction binding the contract method 0xca6ad1e4.
//
// Solidity: function setCustomGasPrice(uint256 _gasPrice) returns()
func (_Oracle *OracleTransactorSession) SetCustomGasPrice(_gasPrice *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.SetCustomGasPrice(&_Oracle.TransactOpts, _gasPrice)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactor) UpdateCryptoCompareAPIPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateCryptoCompareAPIPublicKey", _publicKey)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleSession) UpdateCryptoCompareAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateCryptoCompareAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateCryptoCompareAPIPublicKey is a paid mutator transaction binding the contract method 0xc2c3d054.
//
// Solidity: function updateCryptoCompareAPIPublicKey(bytes _publicKey) returns()
func (_Oracle *OracleTransactorSession) UpdateCryptoCompareAPIPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateCryptoCompareAPIPublicKey(&_Oracle.TransactOpts, _publicKey)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactor) UpdateTokenRates(opts *bind.TransactOpts, _gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRates", _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRates is a paid mutator transaction binding the contract method 0xb598f882.
//
// Solidity: function updateTokenRates(uint256 _gasLimit) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRates(_gasLimit *big.Int) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRates(&_Oracle.TransactOpts, _gasLimit)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactor) UpdateTokenRatesList(opts *bind.TransactOpts, _gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.contract.Transact(opts, "updateTokenRatesList", _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// UpdateTokenRatesList is a paid mutator transaction binding the contract method 0x937f54a4.
//
// Solidity: function updateTokenRatesList(uint256 _gasLimit, address[] _tokenList) returns()
func (_Oracle *OracleTransactorSession) UpdateTokenRatesList(_gasLimit *big.Int, _tokenList []common.Address) (*types.Transaction, error) {
	return _Oracle.Contract.UpdateTokenRatesList(&_Oracle.TransactOpts, _gasLimit, _tokenList)
}

// OracleClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Oracle contract.
type OracleClaimedIterator struct {
	Event *OracleClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleClaimed represents a Claimed event raised by the Oracle contract.
type OracleClaimed struct {
	To     common.Address
	Asset  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) FilterClaimed(opts *bind.FilterOpts) (*OracleClaimedIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return &OracleClaimedIterator{contract: _Oracle.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xf7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683.
//
// Solidity: event Claimed(address _to, address _asset, uint256 _amount)
func (_Oracle *OracleFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *OracleClaimed) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleClaimed)
				if err := _Oracle.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleFailedUpdateRequestIterator is returned from FilterFailedUpdateRequest and is used to iterate over the raw logs and unpacked data for FailedUpdateRequest events raised by the Oracle contract.
type OracleFailedUpdateRequestIterator struct {
	Event *OracleFailedUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleFailedUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleFailedUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleFailedUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleFailedUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleFailedUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleFailedUpdateRequest represents a FailedUpdateRequest event raised by the Oracle contract.
type OracleFailedUpdateRequest struct {
	Reason string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFailedUpdateRequest is a free log retrieval operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) FilterFailedUpdateRequest(opts *bind.FilterOpts) (*OracleFailedUpdateRequestIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return &OracleFailedUpdateRequestIterator{contract: _Oracle.contract, event: "FailedUpdateRequest", logs: logs, sub: sub}, nil
}

// WatchFailedUpdateRequest is a free log subscription operation binding the contract event 0x4eb5629fd8501532aeb93b1b6a5b5b2ae398561e56514ed4b4b0c5ac2d381b6e.
//
// Solidity: event FailedUpdateRequest(string _reason)
func (_Oracle *OracleFilterer) WatchFailedUpdateRequest(opts *bind.WatchOpts, sink chan<- *OracleFailedUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "FailedUpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleFailedUpdateRequest)
				if err := _Oracle.contract.UnpackLog(event, "FailedUpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleRequestedUpdateIterator is returned from FilterRequestedUpdate and is used to iterate over the raw logs and unpacked data for RequestedUpdate events raised by the Oracle contract.
type OracleRequestedUpdateIterator struct {
	Event *OracleRequestedUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleRequestedUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleRequestedUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleRequestedUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleRequestedUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleRequestedUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleRequestedUpdate represents a RequestedUpdate event raised by the Oracle contract.
type OracleRequestedUpdate struct {
	Symbol  string
	QueryID [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRequestedUpdate is a free log retrieval operation binding the contract event 0x47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe.
//
// Solidity: event RequestedUpdate(string _symbol, bytes32 _queryID)
func (_Oracle *OracleFilterer) FilterRequestedUpdate(opts *bind.FilterOpts) (*OracleRequestedUpdateIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return &OracleRequestedUpdateIterator{contract: _Oracle.contract, event: "RequestedUpdate", logs: logs, sub: sub}, nil
}

// WatchRequestedUpdate is a free log subscription operation binding the contract event 0x47737841f636da1ca9f2de10d9bfb96c4251e0b31de72a902d4fd4ac8797bbbe.
//
// Solidity: event RequestedUpdate(string _symbol, bytes32 _queryID)
func (_Oracle *OracleFilterer) WatchRequestedUpdate(opts *bind.WatchOpts, sink chan<- *OracleRequestedUpdate) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "RequestedUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleRequestedUpdate)
				if err := _Oracle.contract.UnpackLog(event, "RequestedUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetCryptoComparePublicKeyIterator is returned from FilterSetCryptoComparePublicKey and is used to iterate over the raw logs and unpacked data for SetCryptoComparePublicKey events raised by the Oracle contract.
type OracleSetCryptoComparePublicKeyIterator struct {
	Event *OracleSetCryptoComparePublicKey // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetCryptoComparePublicKeyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetCryptoComparePublicKey)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetCryptoComparePublicKey)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetCryptoComparePublicKeyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetCryptoComparePublicKeyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetCryptoComparePublicKey represents a SetCryptoComparePublicKey event raised by the Oracle contract.
type OracleSetCryptoComparePublicKey struct {
	Sender    common.Address
	PublicKey []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetCryptoComparePublicKey is a free log retrieval operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) FilterSetCryptoComparePublicKey(opts *bind.FilterOpts) (*OracleSetCryptoComparePublicKeyIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return &OracleSetCryptoComparePublicKeyIterator{contract: _Oracle.contract, event: "SetCryptoComparePublicKey", logs: logs, sub: sub}, nil
}

// WatchSetCryptoComparePublicKey is a free log subscription operation binding the contract event 0xc6b0860ba9f580e9c5b6ba4e0954fe82827096a99d92e8c2d73009539ea8d9fa.
//
// Solidity: event SetCryptoComparePublicKey(address _sender, bytes _publicKey)
func (_Oracle *OracleFilterer) WatchSetCryptoComparePublicKey(opts *bind.WatchOpts, sink chan<- *OracleSetCryptoComparePublicKey) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetCryptoComparePublicKey")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetCryptoComparePublicKey)
				if err := _Oracle.contract.UnpackLog(event, "SetCryptoComparePublicKey", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleSetGasPriceIterator is returned from FilterSetGasPrice and is used to iterate over the raw logs and unpacked data for SetGasPrice events raised by the Oracle contract.
type OracleSetGasPriceIterator struct {
	Event *OracleSetGasPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleSetGasPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleSetGasPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleSetGasPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleSetGasPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleSetGasPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleSetGasPrice represents a SetGasPrice event raised by the Oracle contract.
type OracleSetGasPrice struct {
	Sender   common.Address
	GasPrice *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetGasPrice is a free log retrieval operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) FilterSetGasPrice(opts *bind.FilterOpts) (*OracleSetGasPriceIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return &OracleSetGasPriceIterator{contract: _Oracle.contract, event: "SetGasPrice", logs: logs, sub: sub}, nil
}

// WatchSetGasPrice is a free log subscription operation binding the contract event 0xfbd406825addb09beef160afc17bb80ba28df4a3533dcd23592b82658a1c5ab4.
//
// Solidity: event SetGasPrice(address _sender, uint256 _gasPrice)
func (_Oracle *OracleFilterer) WatchSetGasPrice(opts *bind.WatchOpts, sink chan<- *OracleSetGasPrice) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "SetGasPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleSetGasPrice)
				if err := _Oracle.contract.UnpackLog(event, "SetGasPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// OracleVerifiedProofIterator is returned from FilterVerifiedProof and is used to iterate over the raw logs and unpacked data for VerifiedProof events raised by the Oracle contract.
type OracleVerifiedProofIterator struct {
	Event *OracleVerifiedProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OracleVerifiedProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OracleVerifiedProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OracleVerifiedProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OracleVerifiedProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OracleVerifiedProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OracleVerifiedProof represents a VerifiedProof event raised by the Oracle contract.
type OracleVerifiedProof struct {
	PublicKey []byte
	Result    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedProof is a free log retrieval operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) FilterVerifiedProof(opts *bind.FilterOpts) (*OracleVerifiedProofIterator, error) {

	logs, sub, err := _Oracle.contract.FilterLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return &OracleVerifiedProofIterator{contract: _Oracle.contract, event: "VerifiedProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedProof is a free log subscription operation binding the contract event 0x0902fdd015aa1e56f7e6026b69c0595e82155dcbd83a83a23b40f9fe96babbd9.
//
// Solidity: event VerifiedProof(bytes _publicKey, string _result)
func (_Oracle *OracleFilterer) WatchVerifiedProof(opts *bind.WatchOpts, sink chan<- *OracleVerifiedProof) (event.Subscription, error) {

	logs, sub, err := _Oracle.contract.WatchLogs(opts, "VerifiedProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OracleVerifiedProof)
				if err := _Oracle.contract.UnpackLog(event, "VerifiedProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
